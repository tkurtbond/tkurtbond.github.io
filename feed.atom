<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="https://tkurtbond.github.io/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>Lacking Natural Simplicity</title>
  <id>https://tkurtbond.github.io/feed.atom</id>
  <updated>2023-03-25T01:33:59Z</updated>
  <author>
    <name>T. Kurt Bond</name>
  </author>
  <link rel="self" type="application/atom+xml" href="https://tkurtbond.github.io/feed.atom"/>
  <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>OVA: Galactic Rangers — Session 1</title>
    <id>https://tkurtbond.github.io/posts/2023/03/24/ova-galactic-rangers-session-1/</id>
    <updated>2023-03-24T21:08:07-04:00</updated>
    <published>2023-03-24T21:08:07-04:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2023/03/24/ova-galactic-rangers-session-1/"/>
    <summary type="html">&lt;aside class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;Text in &lt;code class="docutils literal"&gt;{&lt;/code&gt; and &lt;code class="docutils literal"&gt;}&lt;/code&gt; are out of game explanations.  Text in
&lt;code class="docutils literal"&gt;[&lt;/code&gt; and &lt;code class="docutils literal"&gt;]&lt;/code&gt; are out of character comments from the players and
GM.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;&lt;strong&gt;Player Characters&lt;/strong&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Strazin Kostra, tigerman Galactic Ranger!&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Yin, a shapechanging Galactic Ranger!&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Strazin fights Gary from Accounting (who looks like a humanoid
dragon), his boss, on his first day at work!  {This was just a
training exercise.} He defeats him in one blow!  But Gary says “You
may have beaten me, but Cheryl from HR is the &lt;em&gt;real&lt;/em&gt; challenge…” (Dun
dun dun!)&lt;/p&gt;
&lt;p&gt;Gary sends us out after four criminal bosses: the Turtle does
protection, the Tiger does gambling, the Bird does illegal information
gathering and trading, and the Dragon does drugs.&lt;/p&gt;
&lt;p&gt;We decide to go after the Bird later.  We'd have go off planet to the
satellite controlling space station around the planet of the bird
people.  On paper it is a telecommunication booster, but he uses it to
steal data.  Anyway, he's the hardest to approach, and we need
somebody smart, which is not playing to either of our strengths.&lt;/p&gt;
&lt;p&gt;We need to gather hard evidence of crimes, so they can be put away
for ever.&lt;/p&gt;
&lt;p&gt;We decide to go after the Tiger.  We are going to a casino with
associated brothel, Alpha Blue, under cover.  We are offered a hit of
a mild (and legal) drug at registration.&lt;/p&gt;
&lt;p&gt;{Drugs are not illegal unless really special: moon sugar, super
cocaine, etc. Crimes: illegal pit fighting where people die, contests
where people are expected to die, etc.}&lt;/p&gt;
&lt;p&gt;Yin goes straight to the tables, and breaks even, then gets the
feeling there is a disturbance in the force.&lt;/p&gt;
&lt;p&gt;Strazin gets a mental image of a guy going back and to the left
through a secret passage to one of the arenas.  Strazin tells Yin
telepathically and they follow the guy to a death match.  They've got
five guys going over beams over a death drop, and they're betting on
who survives.  We end up in a lower box with the betters.  We've got a
martial arts guy, Fister, and Loud Strike, a wanted gun runner, who is
also wanted. {We are wired with audio and video.}  Fister and Loud
Strike are talking about going to the private suite of the Tiger to
get the winnings after the match.&lt;/p&gt;
&lt;p&gt;The Contestants are: Red &amp;amp; Blue tied for first, then Green &amp;amp; Black
tied, and trailing Yellow.  Yin and then Strazin bets on Yellow; none
of the betters can believe it.  Then Strazin uses Psychic to assist
Yellow, pushing twice then Green pushed black off in frustration and
lost his balance and fell.&lt;/p&gt;
&lt;p&gt;We win the jackpot, and Fister and the other guy take us up to the
Tigers office, where we see &lt;strong&gt;a&lt;/strong&gt; tiger (not &lt;strong&gt;The Tiger&lt;/strong&gt;), who is
very rotund, not at all fit, Fat Tony, who asks if we want blue bucks
(the casino money) or to cash it out now.  We keep the blue bucks, for
later, and when he goes to pays recognizes Yin as infamous across the
Galaxy, and a fight breaks out.  It turns against us and we flee, Yin
uses &lt;em class="ability"&gt;Shape-Shifter&lt;/em&gt; to go down through the vents in the
floor and Strazin uses &lt;em class="ability"&gt;Psychic&lt;/em&gt; to read their weapon
patterns and to jump out the window and time it to catch the elevator
on the way down.  Yin says “We will never talk about this!”&lt;/p&gt;
&lt;p&gt;We got &lt;strong class="xp"&gt;2 XP&lt;/strong&gt; each, and each get a bonus &lt;strong class="xp"&gt;1 XP&lt;/strong&gt;, for meta
reasons.&lt;/p&gt;</summary>
    <category term="ova" label="ova"/>
    <category term="ova-galactic-rangers" label="ova galactic rangers"/>
    <category term="rpg" label="rpg"/>
    <category term="session-logs" label="session logs"/>
  </entry>
  <entry>
    <title>Simple OVA Character Sheet for Google Sheets</title>
    <id>https://tkurtbond.github.io/posts/2023/02/28/simple-ova-character-sheet-for-google-sheets/</id>
    <updated>2023-02-28T18:48:04-05:00</updated>
    <published>2023-02-28T18:48:04-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2023/02/28/simple-ova-character-sheet-for-google-sheets/"/>
    <summary type="html">&lt;p&gt;I added a simple character sheet for &lt;a class="reference external" href="https://www.wiseturtle.com/games.html"&gt;OVA: The Anime
Role-Playing Game&lt;/a&gt; for Google Sheets to my &lt;a class="reference external" href="https://tkurtbond.github.io/pages/rpg-downloads/"&gt;RPG Downloads&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;I like the design of this one a bit better.  I may have to redesign
the &lt;a class="reference external" href="https://tkurtbond.github.io/posts/2023/02/20/simple-ova-character-sheet-for-libreoffice-calc/"&gt;LibreOffice version&lt;/a&gt;.&lt;/p&gt;</summary>
    <category term="character-sheet" label="character sheet"/>
    <category term="google-sheets" label="google sheets"/>
    <category term="ova" label="ova"/>
    <category term="pdf" label="pdf"/>
    <category term="rpg" label="rpg"/>
  </entry>
  <entry>
    <title>Simple OVA Character Sheet for LibreOffice Calc</title>
    <id>https://tkurtbond.github.io/posts/2023/02/20/simple-ova-character-sheet-for-libreoffice-calc/</id>
    <updated>2023-02-20T22:26:47-05:00</updated>
    <published>2023-02-20T22:26:47-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2023/02/20/simple-ova-character-sheet-for-libreoffice-calc/"/>
    <summary type="html">&lt;p&gt;I added a brutally simple character sheet for &lt;a class="reference external" href="https://www.wiseturtle.com/games.html"&gt;OVA: The Anime
Role-Playing Game&lt;/a&gt; to my &lt;a class="reference external" href="https://tkurtbond.github.io/pages/rpg-downloads/"&gt;RPG Downloads&lt;/a&gt; page.  It is for
LibreOffice Calc.  There is also a brutally simple PDF generated from
it as well.&lt;/p&gt;</summary>
    <category term="character-sheet" label="character sheet"/>
    <category term="libreoffice" label="libreoffice"/>
    <category term="libreoffice-calc" label="libreoffice calc"/>
    <category term="ova" label="ova"/>
    <category term="pdf" label="pdf"/>
    <category term="rpg" label="rpg"/>
  </entry>
  <entry>
    <title>Downloads for various RPGs</title>
    <id>https://tkurtbond.github.io/posts/2023/02/19/downloads-for-various-rpgs/</id>
    <updated>2023-02-19T14:10:02-05:00</updated>
    <published>2023-02-19T14:10:02-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2023/02/19/downloads-for-various-rpgs/"/>
    <summary type="html">&lt;p&gt;I've made some stuff that I've used for some RPGs available for
&lt;a class="reference external" href="https://tkurtbond.github.io/pages/rpg-downloads/"&gt;download&lt;/a&gt;.  Right now it has reference sheets for several editions of
&lt;em&gt;Big Eyes, Small Mouth&lt;/em&gt; (Second Edition Revised, Third Edition, and
Fourth edition) and for &lt;em&gt;OVA: The Anime Role-playing Game&lt;/em&gt;.&lt;/p&gt;</summary>
    <category term="besm" label="besm"/>
    <category term="besm2er" label="besm2er"/>
    <category term="besm3e" label="besm3e"/>
    <category term="besm4e" label="besm4e"/>
    <category term="gaming" label="gaming"/>
    <category term="ova" label="ova"/>
    <category term="rpg" label="rpg"/>
  </entry>
  <entry>
    <title>Overcoming reST's limited table control by including raw groff TBL</title>
    <id>https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/</id>
    <updated>2023-02-03T08:31:34-05:00</updated>
    <published>2023-02-03T08:31:34-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/"/>
    <summary type="html">&lt;p&gt;&lt;em&gt;Last edited: 2023-02-14 07:06:18 EST&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So.  I have a CHICKEN Scheme program that converts &lt;a class="reference external" href="http://dyskami.ca/besm.html"&gt;Big Eyes Small
Mouth 4E&lt;/a&gt; characters from a YAML definition into &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;reStructuredText&lt;/a&gt;
(reST).&lt;/p&gt;
&lt;p&gt;Unfortunately, &lt;a class="reference external" href="https://pandoc.org/"&gt;pandoc&lt;/a&gt;’s (and probably the orginal python &lt;a class="reference external" href="https://docutils.sourceforge.io/"&gt;docutils&lt;/a&gt;’),
formatting of tables from &lt;span class="app"&gt;reST&lt;/span&gt; is limited and doesn’t let me do
what I need to do.&lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#markdown" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here’s an image of the BESM 4E character, Xeksil &lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#xeksil" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;, I played
Wednesday night:&lt;/p&gt;
&lt;img alt="Original charactersheet for Xeksil in :app:`reST` using grid tables" src="https://tkurtbond.github.io/images/xeksil-plain-rst-version.png"&gt;
&lt;p&gt;As you can see, it doesn’t fully fill the width of the page, and the
first two columns are too wide for the information they contain.&lt;/p&gt;
&lt;p&gt;I’m contemplating changing the program so that the actual tables are
in &lt;a class="reference external" href="https://www.gnu.org/software/groff/"&gt;groff&lt;/a&gt; &lt;span class="app"&gt;tbl&lt;/span&gt; format directly, and insert them into the
generated &lt;span class="app"&gt;reST&lt;/span&gt; file in &lt;code class="docutils literal"&gt;.. raw:: ms&lt;/code&gt; directives.  That locks
me into using &lt;span class="app"&gt;pandoc&lt;/span&gt;’s &lt;span class="app"&gt;groff&lt;/span&gt; &lt;span class="app"&gt;ms&lt;/span&gt; macros output, but I
could just write a new version that outputs ConTeXt (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/ConTeXt"&gt;C1&lt;/a&gt;, &lt;a class="reference external" href="https://wiki.contextgarden.net/Main_Page"&gt;C2&lt;/a&gt;) if I
ever need one…&lt;/p&gt;
&lt;p&gt;As a test, I converted a character and his mecha into raw &lt;span class="app"&gt;groff&lt;/span&gt;
&lt;span class="app"&gt;ms&lt;/span&gt; with &lt;span class="app"&gt;tbl&lt;/span&gt; output.  Here’s an image of that:&lt;/p&gt;
&lt;img alt="Test character sheet for Enyon Boase in plain groff -ms with TBL." src="https://tkurtbond.github.io/images/enyon-in-groff-ms-directly.png"&gt;
&lt;p&gt;As you can see, the tables fill the width of the text entirely and the
first two columns are narrower and the third column expands to fill
the width of the text.  I was also able to put double lines before and
after each entity, and put single lines after the headers and before
the total lines.&lt;/p&gt;
&lt;p&gt;I think this looks much better.&lt;/p&gt;
&lt;p&gt;Note that the first example is on 5.5” by 8.5” page (which I use for
things I’m going to look at on the screen a lot, because it takes up
less space) and the second example is on 8.5” by 11” paper and in two
columns.  It was essentially impossible to have &lt;span class="app"&gt;pandoc&lt;/span&gt; (and I’m
sure docutils) produce 2 column output and have the &lt;span class="app"&gt;reST&lt;/span&gt;
versions of the tables adapt to the width of the columns.  With the
narrower widths of the first two table columns the third table column
is wide enough that I can use pages with two columns.&lt;/p&gt;
&lt;p&gt;CPB (who I talked about this with earlier) commented: The data is in
YAML now right?  Why not just generate troff?&lt;/p&gt;
&lt;p&gt;Because when I write the actual text of things, I prefer &lt;span class="app"&gt;reST&lt;/span&gt;.
So, for instance, the description of the character or entity I write
in &lt;span class="app"&gt;reST&lt;/span&gt;.  And I like &lt;span class="app"&gt;reST&lt;/span&gt; for the main documents into
which I include these generated files because then I can output to
HTML too.  (Or to ConTexT; I’ve got some documents where I needed
features that ConTexT has and &lt;span class="app"&gt;pandoc&lt;/span&gt;’s groff -ms output doesn’t
have.)&lt;/p&gt;
&lt;p&gt;I’ve already written the character formatting program (named
&lt;span class="command"&gt;besm-rst&lt;/span&gt;, originally enough) so that it can output the
table version or a terse version where the different sections are in
normal paragraphs, which is useful because it is much more compact.
Adding a version that outputs &lt;span class="app"&gt;reST&lt;/span&gt; with tables expressed as an
&lt;span class="app"&gt;reST&lt;/span&gt; &lt;code class="docutils literal"&gt;.. raw:: ms&lt;/code&gt; block that contains the table sections as
&lt;span class="app"&gt;groff -ms&lt;/span&gt; &lt;span class="app"&gt;tbl&lt;/span&gt; source would just be writing another
version of the output routine, selectable with a command line option.&lt;/p&gt;
&lt;p&gt;The original output routine to produce &lt;span class="app"&gt;reST&lt;/span&gt; grid tables and its
support procedures were 315 lines.  The second output routine to
paragraphs and its new support procedures (it uses some of the first
output routine’s support procedures) was 158 lines.&lt;/p&gt;
&lt;p&gt;It will be interesting to see how long the troff output will be.&lt;/p&gt;
&lt;p&gt;Oh, here is Lieutenant Enyon Boase again, this time in paragraph format:&lt;/p&gt;
&lt;img alt="/images/enyon-terse-plain-rst-version.png" src="https://tkurtbond.github.io/images/enyon-terse-plain-rst-version.png"&gt;
&lt;p&gt;That’s also a 8.5” by 11” page, and as you can see, it’s much more
compact, but harder for folks to find each individual item.  This is
basically the format that was used in the original BESM 1E and 2E
books, and the table based version appeared in BESM 3E and was
continued in 4E.&lt;/p&gt;
&lt;p&gt;I think the table format is much easier to read.&lt;/p&gt;
&lt;p&gt;Now, when I use the &lt;span class="app"&gt;reST&lt;/span&gt; table output and generate HTML from it
it looks kinda crude:&lt;/p&gt;
&lt;img alt="Character sheet for Enyon Boase using reST grid tables for HTML output." src="https://tkurtbond.github.io/images/enyon-rst-grid-table-html-output.png"&gt;
&lt;p&gt;However, I think I may be able to fix that with CSS.&lt;/p&gt;
&lt;p&gt;The HTML is relatively clean.  (It probably doesn't really need the
width specifications in the colgroup element, but &lt;span class="app"&gt;pandoc&lt;/span&gt; puts
those in.)&lt;/p&gt;
&lt;p&gt;That’s actually six tables.  If I wrap them in one div with a
particular class I think I can get them formatted right.&lt;/p&gt;
&lt;p&gt;CPB commented: CSS supports printing.&lt;/p&gt;
&lt;p&gt;Yes, there is actually at least one commercial document formatting
system that uses CSS for sophisticated print output, much more
elaborate than what the browsers support, I think.  And there is at
least one open source solution, &lt;a class="reference external" href="https://weasyprint.org/"&gt;weasyprint&lt;/a&gt;, that uses CSS to produce
PDF.&lt;/p&gt;
&lt;p&gt;But I know &lt;span class="app"&gt;tbl&lt;/span&gt; better than CSS. 😉&lt;/p&gt;
&lt;p&gt;I do have a need for good looking output html for the output of the
program: so I can put it on my blog!  It would be better than images
in cases where I’m not actually comparing the PDF output of various
things.&lt;/p&gt;
&lt;p&gt;Well, it took me longer that I expected, 4¼ hours.  After the first 2
hours I was fried (it had been a long day): if I had stopped then I
probably could have finished it the next day in an hour.  Oh well.
The new output routine and its new supporting routines were 208 lines
long.&lt;/p&gt;
&lt;p&gt;Here's an image of the page produced (probably from same YAML file; I
have a couple, since one of them was an early test file for
&lt;span class="command"&gt;besm-rst&lt;/span&gt;) using the new output routine, with &lt;span class="app"&gt;reST&lt;/span&gt;
output with &lt;span class="app"&gt;tbl&lt;/span&gt; output in &lt;code class="docutils literal"&gt;.. raw:: ms&lt;/code&gt;, pulled from the
document with all the pregenerated characters:&lt;/p&gt;
&lt;img alt="Enyon Boase reST output with tbl in raw ms block" src="https://tkurtbond.github.io/images/enyon-boase-rst-output-with-raw-ms-tbl.png"&gt;
&lt;p&gt;And for reference, here is the YAML version of Enyon Boase:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code yaml"&gt;&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-1" name="rest_code_f3a79d4436544645ae4c89346a091b2a-1" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-1"&gt;&lt;/a&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-2" name="rest_code_f3a79d4436544645ae4c89346a091b2a-2" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-2"&gt;&lt;/a&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Lieutenant Enyon Boase&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-3" name="rest_code_f3a79d4436544645ae4c89346a091b2a-3" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt;                        &lt;/span&gt;&lt;span class="c1"&gt;# Average: (/ (+ 8 6 6) 3.0) 6.666666666666667&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-4" name="rest_code_f3a79d4436544645ae4c89346a091b2a-4" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Body&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-5" name="rest_code_f3a79d4436544645ae4c89346a091b2a-5" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;8&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-6" name="rest_code_f3a79d4436544645ae4c89346a091b2a-6" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;16&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-7" name="rest_code_f3a79d4436544645ae4c89346a091b2a-7" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Mind&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-8" name="rest_code_f3a79d4436544645ae4c89346a091b2a-8" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;6&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-9" name="rest_code_f3a79d4436544645ae4c89346a091b2a-9" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;12&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-10" name="rest_code_f3a79d4436544645ae4c89346a091b2a-10" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Soul&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-11" name="rest_code_f3a79d4436544645ae4c89346a091b2a-11" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;6&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-12" name="rest_code_f3a79d4436544645ae4c89346a091b2a-12" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;12&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-13" name="rest_code_f3a79d4436544645ae4c89346a091b2a-13" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;derived&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-14" name="rest_code_f3a79d4436544645ae4c89346a091b2a-14" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;ACV&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-15" name="rest_code_f3a79d4436544645ae4c89346a091b2a-15" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;9&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-16" name="rest_code_f3a79d4436544645ae4c89346a091b2a-16" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-16"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;DCV&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-17" name="rest_code_f3a79d4436544645ae4c89346a091b2a-17" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;7&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-18" name="rest_code_f3a79d4436544645ae4c89346a091b2a-18" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-18"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;DM&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-19" name="rest_code_f3a79d4436544645ae4c89346a091b2a-19" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-19"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;5&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-20" name="rest_code_f3a79d4436544645ae4c89346a091b2a-20" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-20"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;HP&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-21" name="rest_code_f3a79d4436544645ae4c89346a091b2a-21" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-21"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;70&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-22" name="rest_code_f3a79d4436544645ae4c89346a091b2a-22" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-22"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;EP&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-23" name="rest_code_f3a79d4436544645ae4c89346a091b2a-23" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-23"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;60&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-24" name="rest_code_f3a79d4436544645ae4c89346a091b2a-24" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-24"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;SV&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-25" name="rest_code_f3a79d4436544645ae4c89346a091b2a-25" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-25"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;14&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-26" name="rest_code_f3a79d4436544645ae4c89346a091b2a-26" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-26"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-27" name="rest_code_f3a79d4436544645ae4c89346a091b2a-27" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-27"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Attack Mastery&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-28" name="rest_code_f3a79d4436544645ae4c89346a091b2a-28" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-28"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-29" name="rest_code_f3a79d4436544645ae4c89346a091b2a-29" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-29"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-30" name="rest_code_f3a79d4436544645ae4c89346a091b2a-30" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-30"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Extra Actions&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-31" name="rest_code_f3a79d4436544645ae4c89346a091b2a-31" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-31"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-32" name="rest_code_f3a79d4436544645ae4c89346a091b2a-32" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-32"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;4&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-33" name="rest_code_f3a79d4436544645ae4c89346a091b2a-33" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-33"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;+1 Extra Action&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-34" name="rest_code_f3a79d4436544645ae4c89346a091b2a-34" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-34"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Item:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;FV2021&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Coleopteran"&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-35" name="rest_code_f3a79d4436544645ae4c89346a091b2a-35" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-35"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;35&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-36" name="rest_code_f3a79d4436544645ae4c89346a091b2a-36" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-36"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Skills&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-37" name="rest_code_f3a79d4436544645ae4c89346a091b2a-37" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-37"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-38" name="rest_code_f3a79d4436544645ae4c89346a091b2a-38" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-38"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-39" name="rest_code_f3a79d4436544645ae4c89346a091b2a-39" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-39"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;20 Skill Points&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-40" name="rest_code_f3a79d4436544645ae4c89346a091b2a-40" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-40"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;defects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-41" name="rest_code_f3a79d4436544645ae4c89346a091b2a-41" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-41"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Unique&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Defect:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Obsessed&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;by&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Military&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;History"&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-42" name="rest_code_f3a79d4436544645ae4c89346a091b2a-42" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-42"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-43" name="rest_code_f3a79d4436544645ae4c89346a091b2a-43" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-43"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;-1&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-44" name="rest_code_f3a79d4436544645ae4c89346a091b2a-44" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-44"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;skills&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-45" name="rest_code_f3a79d4436544645ae4c89346a091b2a-45" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-45"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Interrogation&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-46" name="rest_code_f3a79d4436544645ae4c89346a091b2a-46" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-46"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-47" name="rest_code_f3a79d4436544645ae4c89346a091b2a-47" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-47"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-48" name="rest_code_f3a79d4436544645ae4c89346a091b2a-48" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-48"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Law&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-49" name="rest_code_f3a79d4436544645ae4c89346a091b2a-49" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-49"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-50" name="rest_code_f3a79d4436544645ae4c89346a091b2a-50" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-50"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-51" name="rest_code_f3a79d4436544645ae4c89346a091b2a-51" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-51"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;specialisations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-52" name="rest_code_f3a79d4436544645ae4c89346a091b2a-52" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-52"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Military&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-53" name="rest_code_f3a79d4436544645ae4c89346a091b2a-53" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-53"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Leadership&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-54" name="rest_code_f3a79d4436544645ae4c89346a091b2a-54" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-54"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-55" name="rest_code_f3a79d4436544645ae4c89346a091b2a-55" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-55"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-56" name="rest_code_f3a79d4436544645ae4c89346a091b2a-56" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-56"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Military Sciences&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-57" name="rest_code_f3a79d4436544645ae4c89346a091b2a-57" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-57"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-58" name="rest_code_f3a79d4436544645ae4c89346a091b2a-58" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-58"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;4&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-59" name="rest_code_f3a79d4436544645ae4c89346a091b2a-59" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-59"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Persuasion&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-60" name="rest_code_f3a79d4436544645ae4c89346a091b2a-60" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-60"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-61" name="rest_code_f3a79d4436544645ae4c89346a091b2a-61" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-61"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-62" name="rest_code_f3a79d4436544645ae4c89346a091b2a-62" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-62"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Political Sciences&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-63" name="rest_code_f3a79d4436544645ae4c89346a091b2a-63" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-63"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-64" name="rest_code_f3a79d4436544645ae4c89346a091b2a-64" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-64"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-65" name="rest_code_f3a79d4436544645ae4c89346a091b2a-65" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-65"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Stealth&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-66" name="rest_code_f3a79d4436544645ae4c89346a091b2a-66" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-66"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-67" name="rest_code_f3a79d4436544645ae4c89346a091b2a-67" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-67"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;4&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-68" name="rest_code_f3a79d4436544645ae4c89346a091b2a-68" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-68"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Visual Arts&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-69" name="rest_code_f3a79d4436544645ae4c89346a091b2a-69" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-69"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-70" name="rest_code_f3a79d4436544645ae4c89346a091b2a-70" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-70"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-71" name="rest_code_f3a79d4436544645ae4c89346a091b2a-71" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-71"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Writing&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-72" name="rest_code_f3a79d4436544645ae4c89346a091b2a-72" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-72"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-73" name="rest_code_f3a79d4436544645ae4c89346a091b2a-73" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-73"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-74" name="rest_code_f3a79d4436544645ae4c89346a091b2a-74" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-74"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;specialisations&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_f3a79d4436544645ae4c89346a091b2a-75" name="rest_code_f3a79d4436544645ae4c89346a091b2a-75" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_f3a79d4436544645ae4c89346a091b2a-75"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Reports&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here is the YAML version of his FV2021 Coleopteran:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code yaml"&gt;&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-1" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-1" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-1"&gt;&lt;/a&gt;&lt;span class="nn"&gt;---&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-2" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-2" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-2"&gt;&lt;/a&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;FV2021 Coleopteran&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-3" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-3" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;page&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;BRCS, p. 94=95&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-4" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-4" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-5" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-5" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;A three-metre talk British-built humanoid combat walker used by&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-6" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-6" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;the Canadians on Mars.  They use a new “mind-interface”&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-7" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-7" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;neuro-helmet that makes the mecha very agile.  However, if a&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-8" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-8" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;different pilot wants to use the mecha, the neuro-helmet must be&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-9" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-9" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;“retuned” to their brain waves — this takes a full day; until&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-10" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-10" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;then, halve the Defence Mastery and Combat Technique: Lightning&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-11" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-11" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;Reflexes Attribute bonuses.  The mecha are painted standard&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-12" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-12" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="no"&gt;colours: UN white, with sky-blue helmets.&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-13" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-13" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;derived&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-14" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-14" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Health Points&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-15" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-15" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;value&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;80&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-16" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-16" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-16"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;attributes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-17" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-17" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Features&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-18" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-18" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-18"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-19" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-19" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-19"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-20" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-20" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-20"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Radio,&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Inertial&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Naviagion"&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-21" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-21" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-21"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Ground Speed&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-22" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-22" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-22"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-23" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-23" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-23"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-24" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-24" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-24"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Up to 50 kph&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-25" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-25" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-25"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Armour&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-26" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-26" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-26"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;3&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-27" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-27" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-27"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;effective&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;4&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-28" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-28" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-28"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;6&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-29" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-29" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-29"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;limiters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-30" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-30" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-30"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Unique&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Limiter:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Partial:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Thin"&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-31" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-31" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-31"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-32" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-32" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-32"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;Hit thin area with called shot for half Armour Rating; 20 AR;&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-33" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-33" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-33"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;20 Health Points&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-34" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-34" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-34"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Combat Technique&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-35" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-35" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-35"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-36" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-36" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-36"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-37" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-37" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-37"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Lightning&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Reflexes:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;major&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;edge&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;on&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Initiative&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;rolls"&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-38" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-38" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-38"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Defence Mastery&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-39" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-39" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-39"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-40" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-40" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-40"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-41" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-41" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-41"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;+2 to Defense Combat Value&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-42" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-42" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-42"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Resilient&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-43" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-43" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-43"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;6&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-44" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-44" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-44"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;12&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-45" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-45" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-45"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-46" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-46" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-46"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;Space: low pressure, high pressure, intense cold, intense&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-47" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-47" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-47"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;heat, radiation, lack of air&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-48" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-48" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-48"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Supersense&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-49" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-49" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-49"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;4&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-50" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-50" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-50"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;4&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-51" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-51" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-51"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Sensors, range 10 km&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-52" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-52" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-52"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Superstrength&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-53" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-53" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-53"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-54" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-54" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-54"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;8&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-55" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-55" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-55"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-56" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-56" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-56"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;Lift 500 kg (a horse); +10 Unarmed Combat Damage;&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-57" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-57" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-57"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;+2 Muscle Weapons Damage&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-58" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-58" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-58"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Tough&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-59" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-59" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-59"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;6&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-60" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-60" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-60"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;6&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-61" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-61" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-61"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;+60 Health Points&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-62" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-62" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-62"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Weapon:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Railgun"&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-63" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-63" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-63"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;12&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-64" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-64" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-64"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;effective&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;9&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-65" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-65" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-65"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;24&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-66" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-66" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-66"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-67" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-67" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-67"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;Damage Modifier ×&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="no"&gt;9; Range 10 km; fails and cannot be used&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-68" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-68" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-68"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;again on natural 2 or 3&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-69" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-69" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-69"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;enhancements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-70" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-70" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-70"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Range&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;5&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-71" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-71" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-71"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;limiters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-72" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-72" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-72"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Unreliable&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-73" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-73" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-73"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Weapon:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Rocket&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Pod"&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-74" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-74" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-74"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;14&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-75" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-75" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-75"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;effective&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;9&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-76" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-76" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-76"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;14&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-77" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-77" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-77"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-78" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-78" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-78"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;Damage Modifier ×&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="no"&gt;9; Autofire: 1 hit if attack exceeds defence&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-79" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-79" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-79"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;by 0–3, 2 hits if it exceeds by 4–6, 3 hits if it exceeds by&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-80" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-80" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-80"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;&amp;gt;7–9, etc.; Area 3m radius; Range 1 km; 3 shots; Can be&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-81" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-81" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-81"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;deflected or destroyed for 1 round; Alternate attack: cost&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-82" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-82" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-82"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;halved&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-83" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-83" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-83"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;enhancements&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-84" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-84" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-84"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Autofire&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;3&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-85" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-85" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-85"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Area&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-86" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-86" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-86"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Range&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;4&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-87" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-87" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-87"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;limiters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-88" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-88" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-88"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;[&lt;/span&gt;&lt;span class="nv"&gt;Charges&lt;/span&gt;&lt;span class="p p-Indicator"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;2&lt;/span&gt;&lt;span class="p p-Indicator"&gt;]&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-89" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-89" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-89"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Stoppable&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-90" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-90" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-90"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Weapon:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Plasma&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Fist"&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-91" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-91" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-91"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;level&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;11&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-92" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-92" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-92"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;effective&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;12&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-93" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-93" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-93"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;11&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-94" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-94" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-94"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-95" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-95" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-95"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;Damage Modifier ×&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="no"&gt;12; Muscle Weapon; 6 shots; Alternate attack:&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-96" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-96" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-96"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;cost halved&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-97" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-97" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-97"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;limiters&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-98" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-98" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-98"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Charges&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-99" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-99" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-99"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;defects&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-100" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-100" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-100"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Awkward Size&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-101" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-101" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-101"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;2&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-102" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-102" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-102"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;-4&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-103" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-103" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-103"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p p-Indicator"&gt;|&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-104" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-104" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-104"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;Size 2: Medium: +2 to be hit for every size attacker is&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-105" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-105" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-105"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;smaller, −2 to be hit for every size attack is larger, 1.5–8&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-106" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-106" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-106"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="no"&gt;tonnes, big horse to bigger than an elephant&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-107" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-107" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-107"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;Conditional Ownership&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-108" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-108" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-108"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-109" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-109" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-109"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;-1&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-110" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-110" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-110"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;details&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;UN Army ownership&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-111" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-111" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-111"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p p-Indicator"&gt;-&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;name&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Special&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Requirement:&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;Frequent&lt;/span&gt;&lt;span class="nv"&gt; &lt;/span&gt;&lt;span class="s"&gt;maintenance"&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-112" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-112" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-112"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;rank&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;1&lt;/span&gt;
&lt;a id="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-113" name="rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-113" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#rest_code_e1ce4f7ebbe548ee8b7dbf744535d579-113"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="nt"&gt;points&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="l l-Scalar l-Scalar-Plain"&gt;-3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The git repo with this program and some test data is on &lt;a class="reference external" href="https://github.com/tkurtbond/besm-tools"&gt;github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Enyon Boase is a pregenerated character that I came up for my
&lt;span class="title"&gt;BESM 4E&lt;/span&gt; rewrite of the &lt;span class="title"&gt;BESM 1E&lt;/span&gt; adventure “Red
Planet, Blue Helmets”, from &lt;span class="title"&gt;Big Robots, Cool Starships&lt;/span&gt;.  The
FV2021 Coleopteran is also from that adventure.&lt;/p&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="markdown" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;It's a little better coming from one of &lt;span class="app"&gt;pandoc&lt;/span&gt;'s
variants of Markdown, because you can specify alignment of columns
in some forms of tables, but you still have too little control over
the appearance of the table, and to make tables easy to read you
need more control than you have.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="xeksil" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://tkurtbond.github.io/posts/2023/02/03/overcoming-rests-limited-table-control-by-including-raw-groff-tbl/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Xeksil has the “Dimension Walk” attribute.  In the
backstory in my head he's the son of a woman from the Courts of
Chaos (from Zelazny's &lt;span class="series"&gt;Amber Chronicles&lt;/span&gt;) and a man that at
least &lt;em&gt;looks&lt;/em&gt; human (but may not be; I haven't decided yet), so for
Xeksil this ability is “Shadow Shifting”.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;!-- Local Variables:
time-stamp-format: "%Y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "\\*Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
End: --&gt;</summary>
    <category term="besm" label="besm"/>
    <category term="besm-4e" label="besm 4e"/>
    <category term="big-eyes-small-mouth" label="big eyes small mouth"/>
    <category term="context" label="context"/>
    <category term="docutils" label="docutils"/>
    <category term="groff" label="groff"/>
    <category term="html" label="html"/>
    <category term="pandoc" label="pandoc"/>
    <category term="rest" label="rest"/>
    <category term="restructuredtext" label="restructuredtext"/>
    <category term="rpg" label="rpg"/>
    <category term="yaml" label="yaml"/>
  </entry>
  <entry>
    <title>Minimal blog experiment</title>
    <id>https://tkurtbond.github.io/posts/2022/12/30/micro-blog-experiment/</id>
    <updated>2022-12-30T14:07:27-05:00</updated>
    <published>2022-12-30T14:07:27-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2022/12/30/micro-blog-experiment/"/>
    <summary type="html">&lt;p&gt;I'm trying an experiment in minimal blogging at &lt;a class="reference external" href="http://consp.org/"&gt;Lacking Natural
Simplicity, Another Take&lt;/a&gt;, using &lt;a class="reference external" href="https://lichen.sensorstation.co/"&gt;Lichen&lt;/a&gt; (a
Content Management System someone wrote in Forth) and &lt;a class="reference external" href="https://gemini.circumlunar.space/docs/cheatsheet.gmi"&gt;Gemtext&lt;/a&gt;.&lt;/p&gt;</summary>
    <category term="gemini" label="gemini"/>
    <category term="gemtext" label="gemtext"/>
    <category term="lichen" label="lichen"/>
  </entry>
  <entry>
    <title>The Lord of the Rings Adventure Game from Iron Crown Enterprises</title>
    <id>https://tkurtbond.github.io/posts/2022/12/10/the-lord-of-the-rings-adventure-game-from-iron-crown-enterprises/</id>
    <updated>2022-12-10T18:30:01-05:00</updated>
    <published>2022-12-10T18:30:01-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2022/12/10/the-lord-of-the-rings-adventure-game-from-iron-crown-enterprises/"/>
    <summary type="html">&lt;p&gt;&lt;em&gt;Last edited: 2022-12-26 22:43:46 EST&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;I got an interesting game yesterday, and finished reading it today:
the 1991 &lt;em&gt;Lord of the Rings Adventure Game&lt;/em&gt; from &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Iron_Crown_Enterprises"&gt;Iron Crown
Enterprises&lt;/a&gt;, which was the first holder of the Tolkien franchise
for RPGs.&lt;/p&gt;
&lt;p&gt;ICE got its start with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Rolemaster"&gt;Rolemaster&lt;/a&gt;, which started as a detailed
add-on combat system for D&amp;amp;D and developed into a very detailed RPG of
its own, based on open-ended d100 rolls: high is good and on very
high or low rolls you roll again and add the new roll for high or
subtracted for low, continuing infinitely in either direction.&lt;/p&gt;
&lt;p&gt;ICE then got the Tolkien franchise and developed &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Middle-earth_Role_Playing"&gt;Middle-Earth Role
Playing&lt;/a&gt; (MERP) as a slightly simplified RPG for those who wanted to
play in Middle Earth, but did not want all the complexities of the
full Rolemaster system.  The adventures were written in such a way that
you could play them either with Rolemaster or MERP, and had some short
guidelines to help the GM adapt them for other games.  They had a lot
of success and their Middle Earth products were extensive and highly
regarded.&lt;/p&gt;
&lt;p&gt;Lots of folk used them with other RPG systems.  (I bought several for
the ideas.)&lt;/p&gt;
&lt;p&gt;Later in their run, ICE wanted to tap the larger Tolkien readership and
so wrote the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Lord_of_the_Rings_Adventure_Game"&gt;Lord of the Ring Adventure Game&lt;/a&gt; as a much simpler
game that they hoped would draw interested readers and the viewers of
the animated Hobbit and Lord of the Rings.&lt;/p&gt;
&lt;p&gt;(I have fond memories of the animated Hobbit, though I knew it only
through reading the graphic novel adaptation that used art from the
movie when I was at my uncle and aunt's place in New York one summer.
I finally saw it, probably on TV some years later.)&lt;/p&gt;
&lt;p&gt;Anyway, the Lord of the Rings Adventure Game (LOR hereafter, as seems
to be customary) comes in a box with a 32 page rulebook, a 64 page
adventure with 6 pre-generated characters, a 32 pamphlet of 4 pages of
backstory for the 6 pregens and area maps for the adventure, several
poster sized maps, including a nice color one of Middle Earth, and
(missing in my copy, as the seller had noted in the description) 2
six-sided dice and a sheet of standup cardboard figures of people and
creatures and the pregens.&lt;/p&gt;
&lt;p&gt;Characters have 12 stats: 6 capabilities (Strength, Agility,
Intelligence, Movement, and Endurance) and 6 skills (Defense, Melee
Offensive Bonus, Ranged Offensive Bonus, General, Subterfuge,
Perception, and Magical).  The value of each of these is called a
bonus, and can be less than zero.&lt;/p&gt;
&lt;p&gt;You pick one of 9 character types (Hobbit Scout, Elf Scout, Human
Warrior, Dwarf Warrior, Elf Warrior, Human Ranger, Half-elf Ranger,
Human Bard, and Elf Bard), which sets your equipment and capability
values and starting skill values, and then you have six +1 bonuses to
add to your skills as you choose, no more than +3 to any one skill.
If you have +1 or more in magic you get two spells per +1 bonus.  Some
of your equipment gives bonuses to your stats.  I'll note that your
character type doesn't restrict what you can do: if you want your
Warrior to be able to use magic, put some of your starting skill
bonuses into Magical!  And they don't really have much to do with what
your characters occupation is: someone who takes one of the Warrior
character types can be a merchant, someone who takes one of the Scout
character types can be a healer.  It is all in how you assign your
starting skill bonuses.&lt;/p&gt;
&lt;p&gt;Your character type sets your Endurance (basically your hit points),
with the dwarf warrior having the most at 60 points and the elf bard
the least at 30 points.&lt;/p&gt;
&lt;p&gt;There are 15 spells, all with a fairly reasonable balance between
keeping with the magic seen in the novels, which is to say not
tremendously powerful, and what one would expect from a fantasy RPG.
The spells are Strength, Shield, Speed, Balance, Camouflage,
Concentration, Item Analysis, Clairvoyance, Healing, Luck, Protection
from Magic, Sustenance, Calm, Charm Animal, and Fire Bolt.  Magic
items typically add a plus to a stat, or let you do something you
couldn’t before.&lt;/p&gt;
&lt;p&gt;Maneuvers are how you use your stats.  Some, like climbing a tree have
a set difficulty.  Others the GM sets the difficulty, from Routine (4)
to Absurd (18).&lt;/p&gt;
&lt;p&gt;You roll 2d6 plus a stat bonus versus a target number or an opponent’s
roll.  Meet or exceed an unopposed roll to succeed, while you can tie
on opposed rolls.  In combat you take the attacker’s Offensive Bonus
minus the defenders Defensive Bonus and roll 2d6 and look the result
up in a chart to see how much damage is done and whether the defender
is knocked unconscious or killed outright.&lt;/p&gt;
&lt;p&gt;Activities are things that are normally automatically successful if
you have the equipment and time (tying up a captive, setting up camp,
digging a ditch), but turn into GM moderated maneuvers if you don’t
have the time or equipment (digging a ditch to hide in before the
opponents you want to ambush show up).&lt;/p&gt;
&lt;p&gt;There are 14 action sequences.  These things like combat (one of the
action sequences) where there is a general sequence you follow to do
something, from sneaking through a town at night to tracking through a
wilderness or ambushing an enemy.  I like how these are written up as
a standard sequence of things to do and consider, just like how combat
is done in most system.&lt;/p&gt;
&lt;p&gt;These action sequences can be adjusted by the GM for circumstances and
they encourage you to make up your own.  You might make one up for
when someone is wanting to convince a crowd of something.  They are
multi-step procedures for doing something.  I think they would be
quite useful.&lt;/p&gt;
&lt;p&gt;You get Experience Points (EP) for successful maneuvers depending on
how hard the target number was, for every point of damage inflicted,
with unconsciousness and killed results worth more, and for every
point of damage the caster of a spell takes to cast the spell.  (Every
spell costs the caster Damage to cast!). You also get EP for good
ideas and for the group accomplishing significant goals.&lt;/p&gt;
&lt;p&gt;The included adventure is a mix of programmed sequences to help the
new GM and players learn the system, where the choices the players
make determines what section you turn to next, and the sections are
broken up into action sequences and the results determine which
section the players go to next, GM notes on how to run or adjust
things, and descriptions of what happens.&lt;/p&gt;
&lt;p&gt;I do notice that each of the pregens has a special ability: finding
lost items or people, eidetic memory, knowing if any creature within a
20 foot radius is aligned with forces of darkness, healing wounds
faster, being unusually skilled at bargaining and negotiation, and
always knowing which way is north and can follow known routes
perfectly.  But there is no rule for assigning these to characters.  I
imagine that if the GM wanted to have special abilities for other
characters the GM and the players should come up with them.&lt;/p&gt;
&lt;p&gt;The rules encourage you to use figures or counters to represent
characters in combat, and movement is given in inches, to be measured
on the map, if you draw one, or on the table if you just set out the
figures at the right distances.  You could easily use a battle map
with a grid, if you have one.  Movement at a walk is 50 feet plus 10
feet multiplied by the characters Movement bonus.&lt;/p&gt;
&lt;p&gt;Anyway, I like it.  I hope to run it this year for Christmas, if all
goes well.&lt;/p&gt;
&lt;p&gt;There is, of course, a Wikipedia &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Lord_of_the_Rings_Adventure_Game"&gt;page&lt;/a&gt; about it, but it is even
briefer than this post.&lt;/p&gt;
&lt;p&gt;There is a compatible game, The &lt;a class="reference external" href="https://sites.google.com/site/ambarquenta/home/the-offical-games/meag"&gt;Middle-Earth Adventure Game&lt;/a&gt;
(MEAG), that was designed by Brian Gross and J.R. Gracen.  I knew of
it before I got the LotRAG, it seems to be a generalization and
expansion, and thus a little more complicated, but it doesn't look
&lt;em&gt;too&lt;/em&gt; complicated.  I'll read it and report what I think of it.&lt;/p&gt;
&lt;!-- Local Variables:
time-stamp-format: "%Y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "\\*Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
End: --&gt;</summary>
    <category term="ice" label="ice"/>
    <category term="iron-crown-enterprises" label="iron crown enterprises"/>
    <category term="lor" label="lor"/>
    <category term="lord-of-the-rings-adventure-game" label="lord of the rings adventure game"/>
    <category term="lotrag" label="lotrag"/>
    <category term="merp" label="merp"/>
    <category term="rolemaster" label="rolemaster"/>
  </entry>
  <entry>
    <title>Maintaining the old ada-mode.el formerly distributed with Emacs</title>
    <id>https://tkurtbond.github.io/posts/2022/12/06/maintaining-the-old-ada-modeel-formerly-distributed-with-emacs/</id>
    <updated>2022-12-06T13:28:59-05:00</updated>
    <published>2022-12-06T13:28:59-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2022/12/06/maintaining-the-old-ada-modeel-formerly-distributed-with-emacs/"/>
    <summary type="html">&lt;p&gt;I wrote a &lt;a class="reference external" href="https://tkurtbond.github.io/posts/2022/07/09/using-the-old-version-of-ada-mode-for-emacs/"&gt;post&lt;/a&gt; about using the old ada-mode.el that used to be
distributed with &lt;span class="app"&gt;Emacs&lt;/span&gt; because I couldn't get the newer,
separate package &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/ada-mode.html"&gt;version&lt;/a&gt; to work for me.&lt;/p&gt;
&lt;p&gt;Well, this morning when I pulled up an Ada file in &lt;span class="app"&gt;Emacs&lt;/span&gt; version
28 there were two problems:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;The information to invoke ada-mode on Ada files was not in the
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;auto-mode-alist&lt;/span&gt;&lt;/code&gt; variable in &lt;span class="app"&gt;Emacs&lt;/span&gt;.  That was easy
enough to fix: add &lt;span class="file"&gt;.ada&lt;/span&gt;, &lt;span class="file"&gt;.ads&lt;/span&gt;, and &lt;span class="file"&gt;.adb&lt;/span&gt; to
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;auto-mode-alist&lt;/span&gt;&lt;/code&gt; (and &lt;span class="file"&gt;.gpr&lt;/span&gt;, too, since Ada mode works
for &lt;span class="app"&gt;gprbuild&lt;/span&gt; files as well):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_b91809c7171d4567bc6587fda662b705-1" name="rest_code_b91809c7171d4567bc6587fda662b705-1" href="https://tkurtbond.github.io/posts/2022/12/06/maintaining-the-old-ada-modeel-formerly-distributed-with-emacs/#rest_code_b91809c7171d4567bc6587fda662b705-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cl-loop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ext&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\\.gpr$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.ada$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.ads$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.adb$"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b91809c7171d4567bc6587fda662b705-2" name="rest_code_b91809c7171d4567bc6587fda662b705-2" href="https://tkurtbond.github.io/posts/2022/12/06/maintaining-the-old-ada-modeel-formerly-distributed-with-emacs/#rest_code_b91809c7171d4567bc6587fda662b705-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'auto-mode-alist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cons&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ext&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'ada-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That was easy enough.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When I tried to do any indentation &lt;span class="cmd"&gt;emacs&lt;/span&gt; reported an error,
with the error message “End position is smaller than start
position”.  Eventually I tracked this down to a call to
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;parse-partial-sexp&lt;/span&gt;&lt;/code&gt; in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ada-in-open-paren-p&lt;/span&gt;&lt;/code&gt;.  It turns out
that somewhere after &lt;span class="app"&gt;Emacs&lt;/span&gt; version 27.2 was released the
&lt;span class="app"&gt;Emacs&lt;/span&gt; developers added a check to &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;parse-partial-sexp&lt;/span&gt;&lt;/code&gt; to
ensure that the &lt;code class="docutils literal"&gt;FROM&lt;/code&gt; argument (which indicates where in the
buffer to start parsing) was less than the &lt;code class="docutils literal"&gt;TO&lt;/code&gt; argument (which
indicates where in the buffer to &lt;strong&gt;stop&lt;/strong&gt; parsing).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Drat.  Drat.  Drat.  Well, looking at the code it was clear that
since &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ada-in-open-paren-p&lt;/span&gt;&lt;/code&gt; is explicitly searching backwards
that &lt;code class="docutils literal"&gt;TO&lt;/code&gt; would &lt;strong&gt;always&lt;/strong&gt; be smaller than &lt;code class="docutils literal"&gt;FROM&lt;/code&gt;.  So I could
just transpose the s-expressions that found those two values.  I
tried it, and it worked!&lt;/p&gt;
&lt;p&gt;At that point I realized that I had committed to maintain the old
version of ada-mode, at least for myself, and that I'd already talked
about it on my blog and it was small step from there to setting up a
GitHub &lt;a class="reference external" href="https://github.com/tkurtbond/old-ada-mode"&gt;repository&lt;/a&gt; with the old code, adding an &lt;a class="reference external" href="https://github.com/tkurtbond/old-ada-mode/issues/1"&gt;issue&lt;/a&gt; describing the
problem, adding a &lt;a class="reference external" href="https://github.com/tkurtbond/old-ada-mode/commit/7ee6fe55862ec615c7fe23d881adfee2d0094770"&gt;commit&lt;/a&gt; with the fix, and then writing this blog
post.&lt;/p&gt;
&lt;p&gt;Somewhere, someone is laughing and enjoying the schadenfreude.  Maybe
this will help someone else.&lt;/p&gt;
&lt;p&gt;And since I already have a GitHub &lt;a class="reference external" href="https://github.com/tkurtbond/old-ada-mode"&gt;repository&lt;/a&gt;, I ought to document the
first &lt;a class="reference external" href="https://github.com/tkurtbond/old-ada-mode/issues/2"&gt;problem&lt;/a&gt; and since it is a documentation problem, put a mention
in the &lt;a class="reference external" href="https://github.com/tkurtbond/old-ada-mode/commit/67a79caacd851120fee2bca4704938a2f27e1bba"&gt;README&lt;/a&gt;.&lt;/p&gt;</summary>
    <category term="ada" label="ada"/>
    <category term="ada-mode" label="ada-mode"/>
    <category term="ada-modeel" label="ada-mode.el"/>
    <category term="emacs" label="emacs"/>
  </entry>
  <entry>
    <title>Demonicity, a Tri-Stat boxed game by Dyskami</title>
    <id>https://tkurtbond.github.io/posts/2022/12/02/demonicity-a-tri-stat-boxed-game-by-dyskami/</id>
    <updated>2022-12-02T22:54:07-05:00</updated>
    <published>2022-12-02T22:54:07-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2022/12/02/demonicity-a-tri-stat-boxed-game-by-dyskami/"/>
    <summary type="html">&lt;p&gt;I finished reading Dyskami Publishing’s &lt;em&gt;Demonicity&lt;/em&gt; tonight (&lt;a href="https://www.drivethrurpg.com/product/369442/Demonicity-RolePlaying-Adventures-TriStat-System"&gt;PDF&lt;/a&gt;).  I liked the document design and found it easy to read, except the “Demon City” two page spread which I found a pain to read because of the body font.  I liked the artwork; it was not particularly anime or manga like, unlike &lt;em&gt;BESM Fourth Edition&lt;/em&gt;.  There were a few typos, missing words, and other minor mistakes, but there was only one that hindered comprehension, and that one I figured out eventually from the context.  The rules are easy to understand.&lt;/p&gt;
&lt;p&gt;The setting of &lt;em&gt;Demonicity&lt;/em&gt; is the titular “Demon City”, a city that is the location of an attack by demons from an different world/dimension.  It is obviously inspired by their earlier licensed RPG, &lt;em&gt;Demon City Shinjuku&lt;/em&gt;, which I quite liked.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Demonicity&lt;/em&gt; has a very interesting stripped down version of the Tri-Stat system that makes character generation and play much simpler.  In some ways it reminds me of &lt;em&gt;BESM First Edition&lt;/em&gt;, though it is even simpler. The three Stats are Body, Mind, and Soul, of course, so that’s the same.  There are also Attributes, which are the special things a character can do.  Stats can be determined randomly or assigned by the player, and they and Attributes always cost points.  And there are some Derived Values: Combat, Health, Sanity.&lt;/p&gt;
&lt;p&gt;You roll 2d6 and add a stat or a derived value (like Combat), plus optionally an Attribue’s level, and compare the result to a target number or an opposed roll.  Things that make something easier are Edges: you get an extra die or two on your dice roll, and you keep the highest two.  Things that make something harder, like trying to use two weapons at once without training, gives you Obstacles: an extra die or two on your dice roll, but you keep the two &lt;em&gt;lowest&lt;/em&gt; rolls.  Edges cancel out Obstacles and vice versa.  Combat is theater of the mind.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Demoicity&lt;/em&gt;’s version of &lt;em&gt;BESM&lt;/em&gt;’s Attributes are quite stripped down.  There are only nine: Adaptability, Damage, Demonicity, Fighting, Knacks, Movement, Resistance, Resources, and Skills.  These are bought in levels as usual, but associated with each are a number of Foci (as many as one has levels in the Attribute), which gives the character a special ability.  Demonicity is the Attribute that allows a character to do most of the more impressive supernatural things, for instance.  A few of its Foci are Healing, Meld (mere with inanimate objects), and Shadow Form.  The Fighting Attribute makes a character more proficient at combat than their Stats would suggest, and it’s Foci specify which kinds of Fighting you are better at (Melee or Ranged), or makes it easier to do certain things in combat (Blind Fighting, Two Weapons).  Generally, an Attribute’s level adds to dice rolls for things associated with it, while having an appropriate Foci means that you get an Edge.  After every session characters get a few points to increase their Stats and Attributes.&lt;/p&gt;
&lt;p&gt;The rulebook is only 32 pages long and has a thicker card stock cover.  It is accompanied by six one page adventures with related art on the back and by six pre-generated characters with an image of the character on the back, all on card stock.  There are also four six-sided dice.  The box everything comes in seems sturdy.  In general the production values are quite good.&lt;/p&gt;
&lt;p&gt;People who are confident with their improvisation skills can probably run the adventures easily, but those who like more details will probably want to do a bit more preparation. The adventures appear designed to be easily linked into a six episode mini-campaign, or can form the backbone of a longer campaign if the GM writes their own adventures.&lt;/p&gt;
&lt;p&gt;I like the inclusion of the pre-generated characters and the one page adventures.  They allow a gaming group to pick the game and start playing with little or no preparation.  And the simplified rules make it easy to learn the game, and to create characters if the gaming group doesn't want to use the pre-generated characters.  I think this makes it an excellent pick-up-and-play game.&lt;/p&gt;
&lt;p&gt;I would like to have seen something like the adventure generators from various Savage Worlds setting books or Toon and its supplements.  They allow the GM who is stuck for ideas to come up with something quickly when inspiration is lacking. But it would have been difficult to fit in the constraints of the product.  Perhaps on another sheet of card stock, since I can’t see deleting anything from the rulebook?  BESM and Tri-Stat generally have very little procedural support for coming up with NPCs, scenes, adventures, etc., and I think an adventure generator would be a useful addition. Of course, having the example adventures to give an idea of what &lt;em&gt;Demonicity&lt;/em&gt; adventures would be like is very useful.&lt;/p&gt;
&lt;p&gt;All in all, I quite like &lt;em&gt;Demonicity&lt;/em&gt; and hope to play it soon.  My only reservations are about the price of this game and the other two Tri-Stat boxed games, &lt;em&gt;Pixies&lt;/em&gt; and &lt;em&gt;Wyrms&lt;/em&gt;.  Forty-five retail dollars Canadian for the &lt;a href="http://dyskami.ca/tristat.html"&gt;physical product&lt;/a&gt; seems like a lot.  The &lt;a href="https://www.drivethrurpg.com/product/369442/Demonicity-RolePlaying-Adventures-TriStat-System"&gt;PDF&lt;/a&gt; seems more reasonable at 15 dollars.&lt;/p&gt;</summary>
    <category term="demonicity" label="demonicity"/>
    <category term="dyskami" label="dyskami"/>
    <category term="rpg" label="rpg"/>
    <category term="tri-stat" label="tri-stat"/>
  </entry>
  <entry>
    <title>Splitting Strings on a Delimiter in the Ada Programming Language</title>
    <id>https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/</id>
    <updated>2022-08-05T11:10:39-04:00</updated>
    <published>2022-08-05T11:10:39-04:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/"/>
    <summary type="html">&lt;p&gt;&lt;em&gt;Last edited: 2022-12-06 13:30:34 EST&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When I did a search for “splitting strings on a delimiter in the Ada
programming language” recently I did not get many useful results.
Eventually I stumbled over &lt;a class="reference external" href="https://gcc.gnu.org/onlinedocs/gcc-12.1.0/gnat_rm/GNAT-String_005fSplit-g-strspl-ads.html#GNAT-String_005fSplit-g-strspl-ads"&gt;GNAT.String_Split&lt;/a&gt; which is an
instantiation of the generic package &lt;a class="reference external" href="https://gcc.gnu.org/onlinedocs/gcc-12.1.0/gnat_rm/GNAT-Array_005fSplit-g-arrspl-ads.html#GNAT-Array_005fSplit-g-arrspl-ads"&gt;GNAT.Array_Split&lt;/a&gt;.  I also
finally &lt;a class="reference external" href="https://blog.adacore.com/new-strings-package-in-gnatcoll"&gt;found&lt;/a&gt; &lt;a class="reference external" href="https://github.com/AdaCore/gnatcoll-core/blob/master/src/gnatcoll-strings_impl.ads"&gt;GNATCOLL.Strings_Impl&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/AdaCore/gnatcoll-core/blob/master/src/gnatcoll-strings.ads"&gt;GNATCOLL.Strings&lt;/a&gt;, its
default instantiation, which looks especially interesting, contains
a split implementation, and which seems to be designed to be a more
efficient string implementation than  than &lt;code class="docutils literal"&gt;Ada.Strings.Unbounded&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, those are all a little complicated, so it might be
appropriate to show a simpler implementation.&lt;/p&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;String&lt;/code&gt; type in Ada is a array of characters.  Once
declared, a &lt;code class="docutils literal"&gt;String&lt;/code&gt; variable always has the same length.  That
means that all the strings in an array of strings have to be the same
length.  However, an &lt;code class="docutils literal"&gt;access&lt;/code&gt; (Ada's version of a
pointer) to a &lt;code class="docutils literal"&gt;String&lt;/code&gt; can point to a string of any length, so for
this version we'll return an array of pointers to &lt;code class="docutils literal"&gt;String&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Operations on &lt;code class="docutils literal"&gt;String&lt;/code&gt; are defined in &lt;a class="reference external" href="http://www.ada-auth.org/standards/rm12_w_tc1/html/RM-A-4-3.html"&gt;Ada.Strings.Fixed&lt;/a&gt;.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code ada"&gt;&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-1" name="rest_code_cf34e715ae4649578cd126997566127b-1" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Strings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Strings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-2" name="rest_code_cf34e715ae4649578cd126997566127b-2" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Strings.Fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Strings.Fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-3" name="rest_code_cf34e715ae4649578cd126997566127b-3" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-4" name="rest_code_cf34e715ae4649578cd126997566127b-4" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-4"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Integer_Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Integer_Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-5" name="rest_code_cf34e715ae4649578cd126997566127b-5" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-5"&gt;&lt;/a&gt;&lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;split_fixed&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-6" name="rest_code_cf34e715ae4649578cd126997566127b-6" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-6"&gt;&lt;/a&gt;   &lt;span class="c1"&gt;-- Ada.Text_IO contains a type, Count, that would conflict with&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-7" name="rest_code_cf34e715ae4649578cd126997566127b-7" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-7"&gt;&lt;/a&gt;   &lt;span class="c1"&gt;-- the function Ada.Strings.Fixed.Count, so don't "use Ada.Text_IO;"&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-8" name="rest_code_cf34e715ae4649578cd126997566127b-8" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-8"&gt;&lt;/a&gt;   &lt;span class="c1"&gt;-- instead, make a package the gives it a shorter name, and use all its&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-9" name="rest_code_cf34e715ae4649578cd126997566127b-9" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-9"&gt;&lt;/a&gt;   &lt;span class="c1"&gt;-- procedures with that as the prefix.&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-10" name="rest_code_cf34e715ae4649578cd126997566127b-10" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-10"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;package&lt;/span&gt; &lt;span class="nc"&gt;ATIO&lt;/span&gt; &lt;span class="kr"&gt;renames&lt;/span&gt; &lt;span class="nc"&gt;Ada.Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-11" name="rest_code_cf34e715ae4649578cd126997566127b-11" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-11"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;String_Ptr&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt; &lt;span class="kr"&gt;access&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-12" name="rest_code_cf34e715ae4649578cd126997566127b-12" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-12"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Vector&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt; &lt;span class="kr"&gt;array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Natural&lt;/span&gt; &lt;span class="kr"&gt;range&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;)&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt; &lt;span class="n"&gt;String_Ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-13" name="rest_code_cf34e715ae4649578cd126997566127b-13" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-13"&gt;&lt;/a&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-14" name="rest_code_cf34e715ae4649578cd126997566127b-14" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-14"&gt;&lt;/a&gt;   &lt;span class="c1"&gt;-- Allocate a new String in a storage pool, initializing it to S, and&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-15" name="rest_code_cf34e715ae4649578cd126997566127b-15" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-15"&gt;&lt;/a&gt;   &lt;span class="c1"&gt;-- returning an access to it (a pointer).&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-16" name="rest_code_cf34e715ae4649578cd126997566127b-16" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-16"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;"+"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Source&lt;/span&gt; &lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;String_Ptr&lt;/span&gt;  &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-17" name="rest_code_cf34e715ae4649578cd126997566127b-17" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-17"&gt;&lt;/a&gt;      &lt;span class="n"&gt;SP&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String_Ptr&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="kr"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;'(&lt;/span&gt;&lt;span class="n"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-18" name="rest_code_cf34e715ae4649578cd126997566127b-18" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-18"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-19" name="rest_code_cf34e715ae4649578cd126997566127b-19" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-19"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;SP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-20" name="rest_code_cf34e715ae4649578cd126997566127b-20" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-20"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-21" name="rest_code_cf34e715ae4649578cd126997566127b-21" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-21"&gt;&lt;/a&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-22" name="rest_code_cf34e715ae4649578cd126997566127b-22" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-22"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-23" name="rest_code_cf34e715ae4649578cd126997566127b-23" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-23"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Positive&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-24" name="rest_code_cf34e715ae4649578cd126997566127b-24" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-24"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-25" name="rest_code_cf34e715ae4649578cd126997566127b-25" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-25"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Num_Parts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="kt"&gt;Count&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-26" name="rest_code_cf34e715ae4649578cd126997566127b-26" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-26"&gt;&lt;/a&gt;      &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Num_Parts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-27" name="rest_code_cf34e715ae4649578cd126997566127b-27" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-27"&gt;&lt;/a&gt;      &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-28" name="rest_code_cf34e715ae4649578cd126997566127b-28" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-28"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-29" name="rest_code_cf34e715ae4649578cd126997566127b-29" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-29"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;while&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Length&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-30" name="rest_code_cf34e715ae4649578cd126997566127b-30" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-30"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Index&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-31" name="rest_code_cf34e715ae4649578cd126997566127b-31" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-31"&gt;&lt;/a&gt;         &lt;span class="kr"&gt;exit&lt;/span&gt; &lt;span class="kr"&gt;when&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-32" name="rest_code_cf34e715ae4649578cd126997566127b-32" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-32"&gt;&lt;/a&gt;         &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-33" name="rest_code_cf34e715ae4649578cd126997566127b-33" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-33"&gt;&lt;/a&gt;         &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="n"&gt;Position&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-34" name="rest_code_cf34e715ae4649578cd126997566127b-34" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-34"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;-- The pattern can be longer than one character.&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-35" name="rest_code_cf34e715ae4649578cd126997566127b-35" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-35"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-36" name="rest_code_cf34e715ae4649578cd126997566127b-36" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-36"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-37" name="rest_code_cf34e715ae4649578cd126997566127b-37" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-37"&gt;&lt;/a&gt;      &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-38" name="rest_code_cf34e715ae4649578cd126997566127b-38" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-38"&gt;&lt;/a&gt;      &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Last&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-39" name="rest_code_cf34e715ae4649578cd126997566127b-39" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-39"&gt;&lt;/a&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-40" name="rest_code_cf34e715ae4649578cd126997566127b-40" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-40"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-41" name="rest_code_cf34e715ae4649578cd126997566127b-41" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-41"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-42" name="rest_code_cf34e715ae4649578cd126997566127b-42" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-42"&gt;&lt;/a&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-43" name="rest_code_cf34e715ae4649578cd126997566127b-43" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-43"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;V&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;Vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-44" name="rest_code_cf34e715ae4649578cd126997566127b-44" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-44"&gt;&lt;/a&gt;      &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-45" name="rest_code_cf34e715ae4649578cd126997566127b-45" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-45"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-46" name="rest_code_cf34e715ae4649578cd126997566127b-46" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-46"&gt;&lt;/a&gt;      &lt;span class="n"&gt;ATIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put_Line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s"&gt;": """&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s"&gt;""""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-47" name="rest_code_cf34e715ae4649578cd126997566127b-47" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-47"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;First&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Last&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-48" name="rest_code_cf34e715ae4649578cd126997566127b-48" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-48"&gt;&lt;/a&gt;         &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-49" name="rest_code_cf34e715ae4649578cd126997566127b-49" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-49"&gt;&lt;/a&gt;         &lt;span class="n"&gt;ATIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"    Part "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;ATIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;": """&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-50" name="rest_code_cf34e715ae4649578cd126997566127b-50" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-50"&gt;&lt;/a&gt;         &lt;span class="n"&gt;ATIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kr"&gt;all&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-51" name="rest_code_cf34e715ae4649578cd126997566127b-51" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-51"&gt;&lt;/a&gt;         &lt;span class="n"&gt;ATIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put_Line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-52" name="rest_code_cf34e715ae4649578cd126997566127b-52" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-52"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-53" name="rest_code_cf34e715ae4649578cd126997566127b-53" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-53"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;Print_Vector&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-54" name="rest_code_cf34e715ae4649578cd126997566127b-54" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-54"&gt;&lt;/a&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-55" name="rest_code_cf34e715ae4649578cd126997566127b-55" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-55"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"Hello, World!|I am fine!|How are you?"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-56" name="rest_code_cf34e715ae4649578cd126997566127b-56" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-56"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-57" name="rest_code_cf34e715ae4649578cd126997566127b-57" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-57"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                    &lt;span class="c1"&gt;--  Empty string.&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-58" name="rest_code_cf34e715ae4649578cd126997566127b-58" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-58"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-59" name="rest_code_cf34e715ae4649578cd126997566127b-59" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-59"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                   &lt;span class="c1"&gt;--  Just one  of pattern.&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-60" name="rest_code_cf34e715ae4649578cd126997566127b-60" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-60"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-61" name="rest_code_cf34e715ae4649578cd126997566127b-61" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-61"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"||"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                  &lt;span class="c1"&gt;--  Just two of pattern.&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-62" name="rest_code_cf34e715ae4649578cd126997566127b-62" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-62"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-63" name="rest_code_cf34e715ae4649578cd126997566127b-63" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-63"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                 &lt;span class="c1"&gt;--  Just one part.&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-64" name="rest_code_cf34e715ae4649578cd126997566127b-64" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-64"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-65" name="rest_code_cf34e715ae4649578cd126997566127b-65" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-65"&gt;&lt;/a&gt;   &lt;span class="c1"&gt;-- The delimiter doesn't have to be one character.&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-66" name="rest_code_cf34e715ae4649578cd126997566127b-66" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-66"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"foo&amp;lt;=&amp;gt;bar"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-67" name="rest_code_cf34e715ae4649578cd126997566127b-67" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-67"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;=&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-68" name="rest_code_cf34e715ae4649578cd126997566127b-68" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-68"&gt;&lt;/a&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-69" name="rest_code_cf34e715ae4649578cd126997566127b-69" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-69"&gt;&lt;/a&gt;&lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-70" name="rest_code_cf34e715ae4649578cd126997566127b-70" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-70"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-71" name="rest_code_cf34e715ae4649578cd126997566127b-71" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-71"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-72" name="rest_code_cf34e715ae4649578cd126997566127b-72" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-72"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-73" name="rest_code_cf34e715ae4649578cd126997566127b-73" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-73"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-74" name="rest_code_cf34e715ae4649578cd126997566127b-74" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-74"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-75" name="rest_code_cf34e715ae4649578cd126997566127b-75" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-75"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_cf34e715ae4649578cd126997566127b-76" name="rest_code_cf34e715ae4649578cd126997566127b-76" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_cf34e715ae4649578cd126997566127b-76"&gt;&lt;/a&gt;&lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;split_fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's the output:&lt;/p&gt;
&lt;pre class="literal-block"&gt;S1: "Hello, World!|I am fine!|How are you?"
    Part 1: "Hello, World!"
    Part 2: "I am fine!"
    Part 3: "How are you?"
S2: ""
    Part 1: ""
S3: "|"
    Part 1: ""
    Part 2: ""
S4: "||"
    Part 1: ""
    Part 2: ""
    Part 3: ""
S5: "one"
    Part 1: "one"
S6: "foo&amp;lt;=&amp;gt;bar"
    Part 1: "foo"
    Part 2: "bar"
&lt;/pre&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;Bounded_String&lt;/code&gt; type in Ada has a maximum capacity and a
current length.  You instantiate a new package for each different
maximum capacity that you want, producing a different type for each.
You can assign any string smaller than or equal to the maximum length,
and the current length is recorded.&lt;/p&gt;
&lt;p&gt;Operations on &lt;code class="docutils literal"&gt;Bounded_String&lt;/code&gt; are defined in
&lt;a class="reference external" href="http://www.ada-auth.org/standards/rm12_w_tc1/html/RM-A-4-4.html"&gt;Ada.Strings.Bounded&lt;/a&gt;.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code ada"&gt;&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-1" name="rest_code_19dbc17845734330801e065f4c2de944-1" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Strings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Strings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-2" name="rest_code_19dbc17845734330801e065f4c2de944-2" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Strings.Bounded&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Strings.Bounded&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-3" name="rest_code_19dbc17845734330801e065f4c2de944-3" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO.Bounded_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-4" name="rest_code_19dbc17845734330801e065f4c2de944-4" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-4"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-5" name="rest_code_19dbc17845734330801e065f4c2de944-5" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-5"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Integer_Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Integer_Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-6" name="rest_code_19dbc17845734330801e065f4c2de944-6" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-6"&gt;&lt;/a&gt;&lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;split_bounded&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-7" name="rest_code_19dbc17845734330801e065f4c2de944-7" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-7"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;package&lt;/span&gt; &lt;span class="nc"&gt;B_String&lt;/span&gt; &lt;span class="kr"&gt;is new&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-8" name="rest_code_19dbc17845734330801e065f4c2de944-8" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-8"&gt;&lt;/a&gt;     &lt;span class="nc"&gt;Ada.Strings.Bounded.Generic_Bounded_Length&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Max&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; 128&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-9" name="rest_code_19dbc17845734330801e065f4c2de944-9" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-9"&gt;&lt;/a&gt;   &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;B_String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-10" name="rest_code_19dbc17845734330801e065f4c2de944-10" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-10"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;package&lt;/span&gt; &lt;span class="nc"&gt;B_String_IO&lt;/span&gt; &lt;span class="kr"&gt;is new&lt;/span&gt; &lt;span class="nc"&gt;Bounded_IO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;B_String&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;B_String_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-11" name="rest_code_19dbc17845734330801e065f4c2de944-11" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-11"&gt;&lt;/a&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-12" name="rest_code_19dbc17845734330801e065f4c2de944-12" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-12"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Vector&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt; &lt;span class="kr"&gt;array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Natural&lt;/span&gt; &lt;span class="kr"&gt;range&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;)&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Bounded_String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-13" name="rest_code_19dbc17845734330801e065f4c2de944-13" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-13"&gt;&lt;/a&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-14" name="rest_code_19dbc17845734330801e065f4c2de944-14" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-14"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;Bounded_String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-15" name="rest_code_19dbc17845734330801e065f4c2de944-15" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-15"&gt;&lt;/a&gt;                  &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-16" name="rest_code_19dbc17845734330801e065f4c2de944-16" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-16"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Positive&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-17" name="rest_code_19dbc17845734330801e065f4c2de944-17" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-17"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-18" name="rest_code_19dbc17845734330801e065f4c2de944-18" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-18"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Num_Parts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;B_String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Count&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-19" name="rest_code_19dbc17845734330801e065f4c2de944-19" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-19"&gt;&lt;/a&gt;      &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="n"&gt;Num_Parts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-20" name="rest_code_19dbc17845734330801e065f4c2de944-20" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-20"&gt;&lt;/a&gt;      &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-21" name="rest_code_19dbc17845734330801e065f4c2de944-21" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-21"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-22" name="rest_code_19dbc17845734330801e065f4c2de944-22" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-22"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;while&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-23" name="rest_code_19dbc17845734330801e065f4c2de944-23" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-23"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Index&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-24" name="rest_code_19dbc17845734330801e065f4c2de944-24" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-24"&gt;&lt;/a&gt;         &lt;span class="kr"&gt;exit&lt;/span&gt; &lt;span class="kr"&gt;when&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-25" name="rest_code_19dbc17845734330801e065f4c2de944-25" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-25"&gt;&lt;/a&gt;         &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-26" name="rest_code_19dbc17845734330801e065f4c2de944-26" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-26"&gt;&lt;/a&gt;         &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Bounded_Slice&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-27" name="rest_code_19dbc17845734330801e065f4c2de944-27" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-27"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;-- The pattern can be longer than one character.&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-28" name="rest_code_19dbc17845734330801e065f4c2de944-28" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-28"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-29" name="rest_code_19dbc17845734330801e065f4c2de944-29" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-29"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-30" name="rest_code_19dbc17845734330801e065f4c2de944-30" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-30"&gt;&lt;/a&gt;      &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-31" name="rest_code_19dbc17845734330801e065f4c2de944-31" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-31"&gt;&lt;/a&gt;      &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Bounded_Slice&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-32" name="rest_code_19dbc17845734330801e065f4c2de944-32" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-32"&gt;&lt;/a&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-33" name="rest_code_19dbc17845734330801e065f4c2de944-33" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-33"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-34" name="rest_code_19dbc17845734330801e065f4c2de944-34" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-34"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-35" name="rest_code_19dbc17845734330801e065f4c2de944-35" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-35"&gt;&lt;/a&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-36" name="rest_code_19dbc17845734330801e065f4c2de944-36" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-36"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;Bounded_String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;V&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;Vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-37" name="rest_code_19dbc17845734330801e065f4c2de944-37" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-37"&gt;&lt;/a&gt;      &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-38" name="rest_code_19dbc17845734330801e065f4c2de944-38" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-38"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-39" name="rest_code_19dbc17845734330801e065f4c2de944-39" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-39"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Put_Line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s"&gt;": """&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s"&gt;""""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-40" name="rest_code_19dbc17845734330801e065f4c2de944-40" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-40"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;First&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Last&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-41" name="rest_code_19dbc17845734330801e065f4c2de944-41" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-41"&gt;&lt;/a&gt;         &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-42" name="rest_code_19dbc17845734330801e065f4c2de944-42" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-42"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"    Part "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;": """&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-43" name="rest_code_19dbc17845734330801e065f4c2de944-43" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-43"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Put_Line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-44" name="rest_code_19dbc17845734330801e065f4c2de944-44" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-44"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-45" name="rest_code_19dbc17845734330801e065f4c2de944-45" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-45"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;Print_Vector&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-46" name="rest_code_19dbc17845734330801e065f4c2de944-46" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-46"&gt;&lt;/a&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-47" name="rest_code_19dbc17845734330801e065f4c2de944-47" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-47"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Bounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;To_Bounded_String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!|I am fine!|How are you?"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-48" name="rest_code_19dbc17845734330801e065f4c2de944-48" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-48"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-49" name="rest_code_19dbc17845734330801e065f4c2de944-49" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-49"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Bounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;To_Bounded_String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="c1"&gt;--  Empty string.&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-50" name="rest_code_19dbc17845734330801e065f4c2de944-50" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-50"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-51" name="rest_code_19dbc17845734330801e065f4c2de944-51" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-51"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Bounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;To_Bounded_String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;--  Just one  of pattern.&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-52" name="rest_code_19dbc17845734330801e065f4c2de944-52" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-52"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-53" name="rest_code_19dbc17845734330801e065f4c2de944-53" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-53"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Bounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;To_Bounded_String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"||"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;--  Just two of pattern.&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-54" name="rest_code_19dbc17845734330801e065f4c2de944-54" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-54"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-55" name="rest_code_19dbc17845734330801e065f4c2de944-55" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-55"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Bounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;To_Bounded_String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;--  Just one part.&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-56" name="rest_code_19dbc17845734330801e065f4c2de944-56" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-56"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-57" name="rest_code_19dbc17845734330801e065f4c2de944-57" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-57"&gt;&lt;/a&gt;   &lt;span class="c1"&gt;-- The delimiter doesn't have to be one character.&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-58" name="rest_code_19dbc17845734330801e065f4c2de944-58" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-58"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Bounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;To_Bounded_String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"foo&amp;lt;=&amp;gt;bar"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-59" name="rest_code_19dbc17845734330801e065f4c2de944-59" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-59"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;=&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-60" name="rest_code_19dbc17845734330801e065f4c2de944-60" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-60"&gt;&lt;/a&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-61" name="rest_code_19dbc17845734330801e065f4c2de944-61" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-61"&gt;&lt;/a&gt;&lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-62" name="rest_code_19dbc17845734330801e065f4c2de944-62" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-62"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-63" name="rest_code_19dbc17845734330801e065f4c2de944-63" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-63"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-64" name="rest_code_19dbc17845734330801e065f4c2de944-64" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-64"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-65" name="rest_code_19dbc17845734330801e065f4c2de944-65" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-65"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-66" name="rest_code_19dbc17845734330801e065f4c2de944-66" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-66"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-67" name="rest_code_19dbc17845734330801e065f4c2de944-67" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-67"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_19dbc17845734330801e065f4c2de944-68" name="rest_code_19dbc17845734330801e065f4c2de944-68" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_19dbc17845734330801e065f4c2de944-68"&gt;&lt;/a&gt;&lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;split_bounded&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's the output:&lt;/p&gt;
&lt;pre class="literal-block"&gt;S1: "Hello, World!|I am fine!|How are you?"
    Part 1: "Hello, World!"
    Part 2: "I am fine!"
    Part 3: "How are you?"
S2: ""
    Part 1: ""
S3: "|"
    Part 1: ""
    Part 2: ""
S4: "||"
    Part 1: ""
    Part 2: ""
    Part 3: ""
S5: "one"
    Part 1: "one"
S6: "foo&amp;lt;=&amp;gt;bar"
    Part 1: "foo"
    Part 2: "bar"
&lt;/pre&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;Unbounded_String&lt;/code&gt; type in Ada grows dynamically as needed,
but is not as time efficient as fixed strings or bounded strings.
For this version, we'll use &lt;a class="reference external" href="http://www.ada-auth.org/standards/rm12_w_tc1/html/RM-A-18-2.html"&gt;Ada.Containers.Vectors&lt;/a&gt; for a
dynamically expending vector, rather than a fixed size vector.&lt;/p&gt;
&lt;p&gt;Operations on &lt;code class="docutils literal"&gt;Unbounded_String&lt;/code&gt; are defined in
&lt;a class="reference external" href="http://www.ada-auth.org/standards/rm12_w_tc1/html/RM-A-4-5.html"&gt;Ada.Strings.Unbounded&lt;/a&gt;.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code ada"&gt;&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-1" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-1" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Strings.Unbounded&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Strings.Unbounded&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-2" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-2" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-3" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-3" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Integer_Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Integer_Text_Io&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-4" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-4" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-4"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO.Unbounded_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO.Unbounded_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-5" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-5" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-5"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Containers.Vectors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-6" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-6" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-6"&gt;&lt;/a&gt;&lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;split_unbounded&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-7" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-7" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-7"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;package&lt;/span&gt; &lt;span class="nc"&gt;Unbounded_String_Vectors&lt;/span&gt; &lt;span class="kr"&gt;is new&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-8" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-8" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-8"&gt;&lt;/a&gt;     &lt;span class="nc"&gt;Ada.Containers.Vectors&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;Natural&lt;span class="p"&gt;,&lt;/span&gt; Unbounded_String&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-9" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-9" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-9"&gt;&lt;/a&gt;   &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Unbounded_String_Vectors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-10" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-10" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-10"&gt;&lt;/a&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-11" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-11" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-11"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;"+"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Source&lt;/span&gt; &lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-12" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-12" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-12"&gt;&lt;/a&gt;                &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Unbounded_String&lt;/span&gt; &lt;span class="kr"&gt;renames&lt;/span&gt; &lt;span class="n"&gt;To_Unbounded_String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-13" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-13" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-13"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;subtype&lt;/span&gt; &lt;span class="kt"&gt;UBS_Vector&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Unbounded_String_Vectors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Vector&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-14" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-14" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-14"&gt;&lt;/a&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-15" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-15" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-15"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;Unbounded_String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-16" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-16" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-16"&gt;&lt;/a&gt;                  &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;UBS_Vector&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-17" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-17" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-17"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Positive&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-18" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-18" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-18"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-19" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-19" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-19"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Num_Parts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-20" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-20" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-20"&gt;&lt;/a&gt;      &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UBS_Vector&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-21" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-21" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-21"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-22" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-22" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-22"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;while&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-23" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-23" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-23"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Index&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-24" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-24" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-24"&gt;&lt;/a&gt;         &lt;span class="kr"&gt;exit&lt;/span&gt; &lt;span class="kr"&gt;when&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-25" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-25" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-25"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Append&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Unbounded_Slice&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-26" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-26" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-26"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;-- The pattern can be longer than one character.&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-27" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-27" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-27"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-28" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-28" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-28"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-29" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-29" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-29"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Num_Parts&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Num_Parts&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-30" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-30" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-30"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Append&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Unbounded_Slice&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-31" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-31" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-31"&gt;&lt;/a&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-32" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-32" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-32"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-33" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-33" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-33"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-34" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-34" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-34"&gt;&lt;/a&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-35" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-35" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-35"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;Print_UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-36" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-36" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-36"&gt;&lt;/a&gt;                               &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;Unbounded_String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-37" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-37" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-37"&gt;&lt;/a&gt;                               &lt;span class="nv"&gt;V&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;UBS_Vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-38" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-38" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-38"&gt;&lt;/a&gt;      &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-39" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-39" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-39"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-40" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-40" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-40"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Put_Line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s"&gt;": """&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;to_string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s"&gt;""""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-41" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-41" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-41"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;First_Index&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Last_Index&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-42" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-42" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-42"&gt;&lt;/a&gt;         &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-43" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-43" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-43"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"    Part "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;": """&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-44" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-44" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-44"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Put_Line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-45" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-45" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-45"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-46" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-46" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-46"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;Print_UBS_Vector&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-47" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-47" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-47"&gt;&lt;/a&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-48" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-48" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-48"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unbounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!|I am fine!|How are you?"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-49" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-49" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-49"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-50" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-50" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-50"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unbounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="c1"&gt;--  Empty string.&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-51" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-51" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-51"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-52" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-52" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-52"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unbounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="c1"&gt;--  Just one  of pattern.&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-53" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-53" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-53"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-54" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-54" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-54"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unbounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;"||"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="c1"&gt;--  Just two of pattern.&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-55" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-55" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-55"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-56" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-56" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-56"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unbounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="c1"&gt;--  Just one part.&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-57" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-57" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-57"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-58" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-58" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-58"&gt;&lt;/a&gt;   &lt;span class="c1"&gt;-- The delimiter doesn't have to be one character.&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-59" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-59" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-59"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unbounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;"foo&amp;lt;=&amp;gt;bar"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-60" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-60" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-60"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;=&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-61" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-61" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-61"&gt;&lt;/a&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-62" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-62" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-62"&gt;&lt;/a&gt;&lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-63" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-63" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-63"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-64" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-64" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-64"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-65" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-65" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-65"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-66" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-66" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-66"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-67" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-67" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-67"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-68" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-68" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-68"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_43c52450cfb94e9bb401ebcc4216e711-69" name="rest_code_43c52450cfb94e9bb401ebcc4216e711-69" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_43c52450cfb94e9bb401ebcc4216e711-69"&gt;&lt;/a&gt;&lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;split_unbounded&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's the output:&lt;/p&gt;
&lt;pre class="literal-block"&gt;S1: "Hello, World!|I am fine!|How are you?"
    Part 1: "Hello, World!"
    Part 2: "I am fine!"
    Part 3: "How are you?"
S2: ""
    Part 1: ""
S3: "|"
    Part 1: ""
    Part 2: ""
S4: "||"
    Part 1: ""
    Part 2: ""
    Part 3: ""
S5: "one"
    Part 1: "one"
S6: "foo&amp;lt;=&amp;gt;bar"
    Part 1: "foo"
    Part 2: "bar"
&lt;/pre&gt;
&lt;!-- Local Variables:
time-stamp-format: "%Y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "\\*Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
End: --&gt;</summary>
    <category term="ada" label="ada"/>
    <category term="programming" label="programming"/>
    <category term="splitting-strings" label="splitting strings"/>
    <category term="splitting-strings-in-ada" label="splitting strings in ada"/>
  </entry>
</feed>
