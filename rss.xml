<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lacking Natural Simplicity</title><link>https://tkurtbond.github.io/</link><description>Random musings on books, code, and tabletop games.</description><atom:link href="https://tkurtbond.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:tkurtbond@gmail.com"&gt;T. Kurt Bond&lt;/a&gt; </copyright><lastBuildDate>Sun, 05 Jul 2020 00:49:13 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Steve Jackson's Goal with GURPS</title><link>https://tkurtbond.github.io/posts/2020/07/04/steve-jacksons-goal-with-gurps/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;From an article originally from &lt;cite&gt;Space Gamer&lt;/cite&gt; #76, republished on
&lt;a class="reference external" href="https://medium.com/@SJGames/the-35th-anniversary-of-man-to-man-423d83995ee1"&gt;Medium&lt;/a&gt; for the 35th Anniversary of Man to Man, the GURPS combat
system:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;What am I trying to accomplish with MTM and GURPS? In a nutshell,
I’m trying to establish a game system simple enough for beginners,
detailed enough for experts, flexible enough for everybody — and
infinitely variable to fit the infinite worlds of fact and
fiction. I’m hoping to establish a new tournament standard.&lt;/p&gt;
&lt;p&gt;And so far, I’m happy with it. Pick it up, and let me know what
you think.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Yeah, I think he pretty much nailed it.&lt;/p&gt;&lt;/div&gt;</description><category>gurps</category><category>man to man</category><category>rpg</category><category>steve jackson</category><guid>https://tkurtbond.github.io/posts/2020/07/04/steve-jacksons-goal-with-gurps/</guid><pubDate>Sun, 05 Jul 2020 00:45:17 GMT</pubDate></item><item><title>Arrow Macros in Emacs Lisp</title><link>https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;Are you familiar with arrow macros?  (They have nothing to do with
&lt;a class="reference external" href="https://en.wikibooks.org/wiki/Haskell/Understanding_arrows"&gt;arrows in Haskell&lt;/a&gt;.) They started out in &lt;a class="reference external" href="https://clojure.org/"&gt;Clojure&lt;/a&gt;, I think, and have
been ported to &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_Lisp"&gt;Common Lisp&lt;/a&gt; and probably other Lisps, though I didn't
find one for &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt;.  I think the &lt;a class="reference external" href="https://github.com/Harleqin/arrows"&gt;arrows&lt;/a&gt; package is the most up
to date in &lt;a class="reference external" href="https://www.quicklisp.org/"&gt;Quicklisp&lt;/a&gt; for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_Lisp"&gt;Common Lisp&lt;/a&gt;, but I found the &lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;
package first so that's the one I converted to &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; today.&lt;/p&gt;
&lt;p&gt;There were two slightly tricky parts to the port&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;I needed to use lexical binding for the source file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;'s test suite used fractions, but &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; doesn't
have them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyway, I think they're very useful.  If you have a value and
you want it to be processed by several functions in a chain you
can use an arrow macro instead of using lots of nested function
calls. For instance,&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a name="rest_code_fafb00456527441db47a005cc800aae0-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.+"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.-"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-\\."&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;is annoying and hard to read on one line.  If you split it into multiple lines&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-2"&gt;&lt;/a&gt; &lt;span class="s"&gt;"-+$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-3"&gt;&lt;/a&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-4"&gt;&lt;/a&gt;  &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-5"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-6"&gt;&lt;/a&gt;   &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-7"&gt;&lt;/a&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-8"&gt;&lt;/a&gt;    &lt;span class="s"&gt;"\\.+"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-9"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-10"&gt;&lt;/a&gt;     &lt;span class="s"&gt;"\\.-"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-11"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-12"&gt;&lt;/a&gt;      &lt;span class="s"&gt;"-\\."&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-13"&gt;&lt;/a&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-14"&gt;&lt;/a&gt;       &lt;span class="s"&gt;"-+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-15"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-16"&gt;&lt;/a&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;that's also pretty horrible.  To read it you have to skip to the end,
figure out that function call, then skip back to the next function
call, and so forth, until you get back to the last function call,
reading it from inside out.  It looks much better if you use the
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; arrow macro, which substitutes the value you are passing along
as the last argument to the functions you are calling:&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a name="rest_code_9a019eca84c44c72a257aa3b71165e34-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;
&lt;a name="rest_code_9a019eca84c44c72a257aa3b71165e34-2"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9a019eca84c44c72a257aa3b71165e34-3"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9a019eca84c44c72a257aa3b71165e34-4"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-\\."&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9a019eca84c44c72a257aa3b71165e34-5"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.-"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9a019eca84c44c72a257aa3b71165e34-6"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.+"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9a019eca84c44c72a257aa3b71165e34-7"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9a019eca84c44c72a257aa3b71165e34-8"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I also think it is more understandable than the highly nested calls,
since you can follow along in from start to finish, rather than from
inside out: you've got the value, you pass it to the first function,
then to the second, and so forth.&lt;/p&gt;
&lt;p&gt;There are also macros to insert the value at the front of the argument
list (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt;&lt;/code&gt;) and to insert the value where a &lt;code class="docutils literal"&gt;&amp;lt;&amp;gt;&lt;/code&gt; symbol is found
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I wrote some &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; code with the last expression above today, and
I think it makes a good example of why they are useful.&lt;/p&gt;
&lt;p&gt;Here's the use case that inspired me to port them to &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs
Lisp&lt;/a&gt;.  When I save things from the internet I often want to
create a directory to save them in based on the filename or
some text on a web page or something, but usually there are
spaces or special characters in that text, so I have to
sanitize the text to make it a safe and simple filename.  So I
need to replace all special characters with dashes.  But I
don't want dashes repeated multiple times, just a single dash,
and I don't want dashes followed or preceded by periods, only
the period.&lt;/p&gt;
&lt;p&gt;Here' s some code to do that:&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;tkb-sanitize-for-filename&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-2"&gt;&lt;/a&gt;  &lt;span class="s"&gt;"Clean up characters in STRING that aren't good for&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-3"&gt;&lt;/a&gt;&lt;span class="s"&gt;filenames."&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-4"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-5"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-6"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-7"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-\\."&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-8"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.-"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-9"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.+"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-10"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-11"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;tkb-sanitize-kill-for-filename&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-14"&gt;&lt;/a&gt;  &lt;span class="s"&gt;"Clean up characters that aren't good for filenames in the&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-15"&gt;&lt;/a&gt;&lt;span class="s"&gt;top of the kill&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-16"&gt;&lt;/a&gt;&lt;span class="s"&gt;ring and put the result on the top of the kill ring."&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-17"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;;; gets the kill or the system clipboard if it is new.&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-18"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interactive&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-kill&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-19"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;new-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;tkb-sanitize-for-filename&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-20"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt; &lt;span class="s"&gt;"Old string: %s\nNew String: %s"&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;new-string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-21"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kill-new&lt;/span&gt; &lt;span class="nv"&gt;new-string&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-23"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c k S"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'tkb-sanitize-kill-for-filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Note that the function &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;tkb-sanitize-kill-for-filename&lt;/span&gt;&lt;/code&gt; that I use
interactively gets uses &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(current-kill&lt;/span&gt; 0 t)&lt;/code&gt; because it either
returns the top of the kill ring, or if the system clipboard is newer
it puts that on top of the kill ring and returns it.  (The docstring
of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;current-kill&lt;/span&gt;&lt;/code&gt; makes that a little difficult to figure out.)&lt;/p&gt;
&lt;p&gt;So if I have the name of a product as
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;"***Flashy####Product%%%%Name!!!!"&lt;/span&gt;&lt;/code&gt; I copy that to the clipboard
with &lt;code class="key docutils literal"&gt;&lt;span class="pre"&gt;⌘-C&lt;/span&gt;&lt;/code&gt;, switch to emacs, do &lt;code class="key docutils literal"&gt;&lt;span class="pre"&gt;C-c&lt;/span&gt; k S&lt;/code&gt;, switch back to
whatever program is saving the file, and use the generated,
sanitized name &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Flashy-Product-Name&lt;/span&gt;&lt;/code&gt; with &lt;code class="key docutils literal"&gt;&lt;span class="pre"&gt;⌘-V&lt;/span&gt;&lt;/code&gt;.  Nifty!&lt;/p&gt;
&lt;p&gt;(And if you've ever wondered what the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Unicode"&gt;Unicode&lt;/a&gt; character for the Mac
keyboard &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Command_key"&gt;Command key&lt;/a&gt; (⌘) is, it is the PLACE OF INTEREST SIGN, and you
can enter it by C-x 8 RETURN PLACE OF INTEREST SIGN.  The symbol they
use for for the key labeled alt and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Option_key"&gt;option&lt;/a&gt; (⌥) is the Unicode OPTION
KEY, and the symbol they use for the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Shift_key"&gt;Shift Key&lt;/a&gt; (⇧) is UPWARDS WHITE ARROW.
I'm surprised they don't have a special symbol for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Control_key"&gt;Control&lt;/a&gt;, but it
looks like they just use the plain ASCII ^, known in Unicode as
CIRCUMFLEX ACCENT.)&lt;/p&gt;
&lt;p&gt;Anyway, &lt;a class="reference external" href="https://tkurtbond.github.io/arrows-for-emacs.zip"&gt;here&lt;/a&gt;'s a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Info-ZIP"&gt;ZIP&lt;/a&gt; file with the Emacs Lisp source for the arrow
macros so you can use them if you've been convinced of their
usefulness by this post.  It also has some minimal documentation in
the &lt;span class="file"&gt;README.md&lt;/span&gt; that came from the &lt;span class="file"&gt;README.md&lt;/span&gt; from
&lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;, which seems to repeat the information from the
docstrings for the macros.&lt;/p&gt;&lt;/div&gt;</description><category>arrow macros</category><category>clojure</category><category>common lisp</category><category>emacs</category><category>emacs lisp</category><category>unicode</category><guid>https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/</guid><pubDate>Fri, 03 Jul 2020 18:11:16 GMT</pubDate></item><item><title>Getting .MOBI files on my Kindle Paperwhite</title><link>https://tkurtbond.github.io/posts/2020/07/01/getting-mobi-files-on-my-kindle-paperwhite/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;I created a &lt;span class="file"&gt;.epub&lt;/span&gt; file using &lt;a class="reference external" href="https://pandoc.org/epub"&gt;pandoc&lt;/a&gt;.  Then I converted the
&lt;span class="file"&gt;.epub&lt;/span&gt; to &lt;span class="file"&gt;.mobi&lt;/span&gt; via the &lt;a class="reference external" href="https://calibre-ebook.com/"&gt;Calibre epub
software&lt;/a&gt;. &lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2020/07/01/getting-mobi-files-on-my-kindle-paperwhite/#alternative" id="id1"&gt;1&lt;/a&gt; Then I tried copying the &lt;span class="file"&gt;.mobi&lt;/span&gt; to
the &lt;span class="file"&gt;Documents&lt;/span&gt; folder on the Kindle via USB (which several
places online say is the way to do it) but that didn’t show up when I
looked (and searched) my library.&lt;/p&gt;
&lt;p&gt;So I had to mail it to my Kindle.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Go on Amazon,&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;select “Account &amp;amp; Lists &amp;gt; Your Content and Devices &amp;gt; Preferences tab (at the top of the
page, under the normal black Amazon menu/search area) &amp;gt; Personal
Document Settings”.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then copy the email from your “Send-To-Kindle
E-Mail Settings” and create an e-mail to it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check that the “Approved
Personal Document E-mail List” contains your e-mail address, or add a
new one.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Then attach the &lt;span class="file"&gt;.mobi&lt;/span&gt; file to the e-mail and send it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After a little while you’ll get a “Verify your Kindle document” from Amazon
with a link to click to verify it.  Click it.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;After a little while you can go
back to the “Content” tab and search your content for the title, and
it should be there.  You can also change the “Show” combo box at the
top of the page to “Docs” instead of “Books” and it should be listed
there, too.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Weeeee!&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="alternative"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2020/07/01/getting-mobi-files-on-my-kindle-paperwhite/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;I could have used &lt;a class="reference external" href="https://www.amazon.com/gp/feature.html?ie=UTF8&amp;amp;docId=1000765211"&gt;KindleGen&lt;/a&gt;, a command line tool from Amazon,
instead.  You can download it yourself from that page for Windows,
macOS, and Linux.  If you use a macOS computer you can use &lt;a class="reference external" href="https://brew.sh/"&gt;Homebrew&lt;/a&gt; to
install it:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_f0c21f55a76041e188f8e6b03c796ff5-1"&gt;&lt;/a&gt;brew install kindlegen
&lt;/pre&gt;&lt;p&gt;I haven't actually used KindleGen, though.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;</description><category>amazon</category><category>calibre epub</category><category>epub</category><category>kindle</category><category>mobi</category><guid>https://tkurtbond.github.io/posts/2020/07/01/getting-mobi-files-on-my-kindle-paperwhite/</guid><pubDate>Thu, 02 Jul 2020 01:08:20 GMT</pubDate></item><item><title>GURPS: Generic, Universal, RolePlaying, System</title><link>https://tkurtbond.github.io/posts/2020/06/29/gurps-generic-universal-roleplaying-system/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;cite&gt;GURPS&lt;/cite&gt; (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/GURPS"&gt;G1&lt;/a&gt;, &lt;a class="reference external" href="http://www.sjgames.com/gurps/"&gt;G2&lt;/a&gt;) from &lt;a class="reference external" href="http://www.sjgames.com/"&gt;Steve Jackson Games&lt;/a&gt; is a &lt;strong&gt;Generic Universal
RolePlaying System&lt;/strong&gt;. The meaning of the separate words, paraphrased
from the introductions of the &lt;cite&gt;GURPS&lt;/cite&gt;, 3rd Edition, and &lt;cite&gt;GURPS&lt;/cite&gt; 4th
Edition, breaks down the meaning as follows:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Generic&lt;/strong&gt; — Scaling from quick, fast-moving games with simple
rules to games with lots of detail.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;Universal&lt;/strong&gt; — a set of rules that's comprehensive enough to let
you use with any background/setting and potentially to combine characters
from different backgrounds/settings and have them be compatible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;RolePlaying&lt;/strong&gt; — designed to encourage true roleplaying&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;System&lt;/strong&gt; — designed as a unified whole rather than starting out as
a set of simple rules and modified in an ad-hoc manner.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Wikipedia article &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Generic_role-playing_game_system"&gt;Generic role-playing game system&lt;/a&gt;'s idea of
a generic &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Role-playing_game_system"&gt;RPG&lt;/a&gt; seems to combine the &lt;cite&gt;GURPS&lt;/cite&gt; notions of “Generic” and
“Universal”.  Or maybe it means by “Generic” what &lt;cite&gt;GURPS&lt;/cite&gt; means by
“Universal”.&lt;/p&gt;&lt;/div&gt;</description><category>definitions</category><category>gurps</category><category>rpg</category><guid>https://tkurtbond.github.io/posts/2020/06/29/gurps-generic-universal-roleplaying-system/</guid><pubDate>Tue, 30 Jun 2020 00:58:58 GMT</pubDate></item><item><title>Distributing ASDF systems with ABCL, sorta</title><link>https://tkurtbond.github.io/posts/2020/06/29/distributing-asdf-systems-with-abcl-sorta/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;The Reddit thread &lt;a class="reference external" href="https://www.reddit.com/r/lisp/comments/2u7m4k/how_do_you_compile_a_runnable_deployable_jar_with/"&gt;How do you compile a runnable, deployable JAR with
ABCL?&lt;/a&gt; doesn't offer a solution, unfortunately. &lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2020/06/29/distributing-asdf-systems-with-abcl-sorta/#id4" id="id1"&gt;1&lt;/a&gt; But it leads to
an &lt;a class="reference external" href="https://abcl.org/"&gt;Armed Bear Common Lisp (ABCL)&lt;/a&gt; TRAC ticket (&lt;a class="reference external" href="https://abcl.org/trac/ticket/383"&gt;T1&lt;/a&gt;) which leads to
another (&lt;a class="reference external" href="https://abcl.org/trac/ticket/442"&gt;T2&lt;/a&gt;) which leads some documentation on package ABCL for
distribution (&lt;a class="reference external" href="https://github.com/armedbear/abcl/blob/master/doc/packaging-abcl.org"&gt;D1&lt;/a&gt;) which talks about how the &lt;a class="reference external" href="https://github.com/armedbear/abcl/blob/master/doc/packaging-abcl.org#abcl-aio"&gt;abcl-aio.jar&lt;/a&gt; target is
used to package &lt;span class="file"&gt;abcl.jar&lt;/span&gt; and &lt;span class="file"&gt;abcl-contrib.jar&lt;/span&gt; for
distribution, then describes a way it might be done in the section
&lt;a class="reference external" href="https://github.com/armedbear/abcl/blob/master/doc/packaging-abcl.org#current-hack"&gt;Current Hack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Basically, it says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Current hack&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ideally, we would like allow the AIO mechanism to include
additional ASDF systems in the single jar artifact.&lt;/p&gt;
&lt;p&gt;Currently one can hack this together by:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Manually extracting the abcl-aio.jar artifact to a file-system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Placing the necessary ASDF systems in the resulting “contrib”
directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Recreating the single archive from the file-system
contents.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id4"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2020/06/29/distributing-asdf-systems-with-abcl-sorta/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Though it does talking about distributing an ABCL application
as a servlet and WAR file.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;</description><category>abcl</category><category>asdf</category><category>common lisp</category><guid>https://tkurtbond.github.io/posts/2020/06/29/distributing-asdf-systems-with-abcl-sorta/</guid><pubDate>Mon, 29 Jun 2020 20:30:21 GMT</pubDate></item><item><title>Smalltalk History</title><link>https://tkurtbond.github.io/posts/2020/06/05/smalltalk-history/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;I ran across a couple of interesting articles about Smalltalk History,
which I'm linking here for posterity: &lt;a class="reference external" href="https://gbracha.blogspot.com/2020/05/bits-of-history-words-of-advice.html"&gt;Bits of History, Words of
Advice&lt;/a&gt;
and &lt;a class="reference external" href="http://www.wirfs-brock.com/allen/posts/914"&gt;The Rise and Fall of Commercial Smalltalk&lt;/a&gt;.&lt;/p&gt;</description><category>smalltalk</category><guid>https://tkurtbond.github.io/posts/2020/06/05/smalltalk-history/</guid><pubDate>Fri, 05 Jun 2020 19:11:27 GMT</pubDate></item><item><title>GURPS vs. D&amp;D vs. Dungeon Fantasy RPG</title><link>https://tkurtbond.github.io/posts/2020/06/03/gurps-vs-dd-vs-dungeon-fantasy-rpg/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;After I played &lt;cite&gt;D&amp;amp;D&lt;/cite&gt; for a while at the beginning of my RPG career I
found out that I was interested in other games.  &lt;cite&gt;T&amp;amp;T&lt;/cite&gt;, then
&lt;cite&gt;DragonQuest&lt;/cite&gt;, &lt;cite&gt;RuneQuest&lt;/cite&gt;, &lt;cite&gt;GURPS&lt;/cite&gt;, and &lt;cite&gt;Elric!&lt;/cite&gt; and many more since
then.  Eventually one of the things I figured out was that I was
looking for the different flavors that different RPG systems give the
games you play with them.  &lt;cite&gt;D&amp;amp;D&lt;/cite&gt; has a very specific flavor.  &lt;cite&gt;Elric!&lt;/cite&gt;
has a very specific but different flavor.  Some of that flavor comes
from the systems and some of that flavor comes from the setting.  But
the &lt;cite&gt;D&amp;amp;D&lt;/cite&gt; systems flavor seems to overpower the setting flavor.  (You
could say that the “implied setting elements” from the &lt;cite&gt;D&amp;amp;D&lt;/cite&gt; core
rules have heavily flavor any &lt;cite&gt;D&amp;amp;D&lt;/cite&gt; setting.)&lt;/p&gt;
&lt;p&gt;The &lt;cite&gt;Dungeon Fantasy RPG&lt;/cite&gt; is &lt;cite&gt;GURPS&lt;/cite&gt; specialized for powerful
characters plundering dungeons, and because of that it adopts some
(but not all) of the cliches from &lt;cite&gt;D&amp;amp;D&lt;/cite&gt; (druids, monks, clerics, etc),
and puts its own spin on them.  But one of the things I liked about
&lt;cite&gt;GURPS&lt;/cite&gt; was that it &lt;em&gt;didn't&lt;/em&gt; have the same set of cliches as &lt;cite&gt;D&amp;amp;D&lt;/cite&gt;.
Oh well.&lt;/p&gt;
&lt;p&gt;Despite looking for the different flavors that systems imbue, I still
like generic RPGs like &lt;cite&gt;GURPS&lt;/cite&gt; and &lt;cite&gt;Savage Worlds&lt;/cite&gt; and &lt;cite&gt;Basic
Roleplaying&lt;/cite&gt;.  I like the flavor that those systems give, and I like
seeing how that interacts with the flavor of the setting.&lt;/p&gt;&lt;/div&gt;</description><category>dnd</category><category>dungeon fantasy rpg</category><category>gurps</category><category>rpg</category><guid>https://tkurtbond.github.io/posts/2020/06/03/gurps-vs-dd-vs-dungeon-fantasy-rpg/</guid><pubDate>Wed, 03 Jun 2020 17:40:27 GMT</pubDate></item><item><title>Bat in the Attic overview of Harnmaster</title><link>https://tkurtbond.github.io/posts/2020/06/02/bat-in-the-attic-overview-of-harnmaster/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;The &lt;a class="reference external" href="http://batintheattic.blogspot.com"&gt;Bat in the Attic blog&lt;/a&gt;  has a nice &lt;a class="reference external" href="http://batintheattic.blogspot.com/2020/04/a-walk-through-harnmaster-introduction.html"&gt;overview&lt;/a&gt; of &lt;a class="reference external" href="http://columbiagames.com/cgi-bin/query/harn/cfg/single.cfg?product_id=4001-PDF"&gt;Harnmaster&lt;/a&gt;.&lt;/p&gt;</description><category>bat in the attic</category><category>harnmaster</category><category>rpg</category><guid>https://tkurtbond.github.io/posts/2020/06/02/bat-in-the-attic-overview-of-harnmaster/</guid><pubDate>Wed, 03 Jun 2020 00:02:23 GMT</pubDate></item><item><title>Reactions to S. John Ross's Medieval Demographics Made Easy</title><link>https://tkurtbond.github.io/posts/2020/05/04/reactions-to-s-john-rosss-medieval-demographics-made-easy/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;S. John Ross's article &lt;cite&gt;Medieval Demographics Made Easy&lt;/cite&gt; (which can
be found &lt;a class="reference external" href="https://gamingballistic.com/wp-content/uploads/2018/11/Medieval-Demographics-Made-Easy-1.pdf"&gt;here&lt;/a&gt;) has been used by many gamers to add some
verisimilitude to their games.  There have been some useful
criticisms, however.  Here are a couple:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://medium.com/@lymanstone"&gt;Lyman Stone&lt;/a&gt;'s &lt;a class="reference external" href="https://medium.com/migration-issues/notes-on-medieval-population-geography-fd062449364f"&gt;Notes on Medieval Population Geography&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://www.blogger.com/profile/15326042326261485786"&gt;Ravenwing&lt;/a&gt;'s &lt;a class="reference external" href="http://ravenswing59.blogspot.com/2013/10/medieval-demographics-done-right.html"&gt;Medieval Demographics Done RIGHT: Stuff You Can
Us...&lt;/a&gt; and &lt;a class="reference external" href="http://ravenswing59.blogspot.com/2013/10/medieval-demographics-done-right-pt-ii.html"&gt;Medieval Demographics Done RIGHT (Pt II)&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>medieval demographics</category><category>s. john ross</category><guid>https://tkurtbond.github.io/posts/2020/05/04/reactions-to-s-john-rosss-medieval-demographics-made-easy/</guid><pubDate>Mon, 04 May 2020 14:26:19 GMT</pubDate></item><item><title>Customizing pandoc ms output with a Lua filter</title><link>https://tkurtbond.github.io/posts/2020/05/03/customizing-pandoc-ms-output-with-a-lua-filter/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;This article started as a &lt;a class="reference external" href="https://groups.google.com/d/msg/pandoc-discuss/UJgyLbxTNxo/MZDVFts-BAAJ"&gt;message&lt;/a&gt; I sent to the the &lt;a class="reference external" href="https://groups.google.com/forum/#!forum/pandoc-discuss"&gt;pandoc-discuss&lt;/a&gt;
Google Group.  This version has more links and has been slightly
reworded.&lt;/p&gt;
&lt;p&gt;I work with &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;ReStructuredText&lt;/a&gt; documents a lot and often use &lt;a class="reference external" href="https://pandoc.org/"&gt;pandoc&lt;/a&gt; to
format them, especially to PDF by way of &lt;span class="app"&gt;pandoc&lt;/span&gt;'s &lt;code class="docutils literal"&gt;ms&lt;/code&gt;
output format, which uses &lt;span class="app"&gt;groff&lt;/span&gt; with the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-ms&lt;/span&gt;&lt;/code&gt; macros to produce the
PDF output.  Using &lt;code class="docutils literal"&gt;ms&lt;/code&gt; output is fast, &lt;span class="app"&gt;groff&lt;/span&gt; is usually available
on the operating systems I use, and if you &lt;em&gt;do&lt;/em&gt; have to install &lt;span class="app"&gt;groff&lt;/span&gt;
it is easy to do and much, much smaller than any &lt;span class="app"&gt;TeX&lt;/span&gt; distributions.&lt;/p&gt;
&lt;p&gt;However, it would be a nice to be able to customize the &lt;code class="docutils literal"&gt;ms&lt;/code&gt; output
more for specific input, like if you are using technical writing and
are pining for something like the various inline roles of &lt;a class="reference external" href="https://tdg.docbook.org/tdg/5.1/ch02.html#s.inline"&gt;DocBook&lt;/a&gt;, or
wanted poems to be typeset more stylishly that the &lt;code class="docutils literal"&gt;ms&lt;/code&gt; output does.&lt;/p&gt;
&lt;p&gt;You should probably be a little familiar with the &lt;a class="reference external" href="https://pandoc.org/MANUAL.html"&gt;Pandoc User
Manual&lt;/a&gt; and have the documentation for &lt;a class="reference external" href="https://pandoc.org/lua-filters.html"&gt;Lua Filter&lt;/a&gt;'s available for
reference while reading this article.  And having a reading
familiarity with &lt;a class="reference external" href="https://www.gnu.org/software/groff/"&gt;groff&lt;/a&gt; and its &lt;a class="reference external" href="https://www.gnu.org/software/groff/manual/"&gt;manual&lt;/a&gt; and specifically the &lt;a class="reference external" href="https://www.gnu.org/software/groff/manual/html_node/ms.html#ms"&gt;-ms
macros&lt;/a&gt; will be useful too.  And maybe &lt;a class="reference external" href="https://www.lua.org/"&gt;Lua&lt;/a&gt; as well.&lt;/p&gt;
&lt;p&gt;Starting with an &lt;a class="reference external" href="https://dave.autonoma.ca/blog/2020/04/28/typesetting-markdown-part-8/"&gt;article&lt;/a&gt; from Dave Jarvis that had an example &lt;a class="reference external" href="https://pandoc.org/lua-filters.html"&gt;Lua
filter&lt;/a&gt; for customizing the &lt;span class="app"&gt;ConTeXt&lt;/span&gt; output and a little help
from the pandoc-discuss mailing list I came up with this example &lt;a class="reference external" href="https://pandoc.org/lua-filters.html"&gt;Lua
Filter&lt;/a&gt; that formats program names and poems specially.&lt;/p&gt;
&lt;p&gt;This filter wraps spans with a class, such as from interpreted text
roles defined in the source ReST (like &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;:program:`pandoc`&lt;/span&gt;&lt;/code&gt;) in calls
to user defined &lt;span class="app"&gt;groff&lt;/span&gt; strings &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;\*[start&amp;lt;class&amp;gt;]&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;\*[stop&amp;lt;class&amp;gt;]&lt;/span&gt;&lt;/code&gt;.  (I've specified the string definitions for
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;\*[startprogram]&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;\*[stopprogram]&lt;/span&gt;&lt;/code&gt; in the source ReST as a
raw block for &lt;code class="docutils literal"&gt;ms&lt;/code&gt; output but they could be in a customized &lt;code class="docutils literal"&gt;ms&lt;/code&gt;
pandoc template, too.)  These strings can include &lt;span class="app"&gt;groff&lt;/span&gt; escapes to
change the font and the glyph color and then change back to the
previous font and glyph color.  In this example I made PDF output for
the interpreted text role &lt;code class="docutils literal"&gt;program&lt;/code&gt; come out in a constant width
font and in red.&lt;/p&gt;
&lt;p&gt;It also wraps divs with classes with calls to user defined &lt;span class="app"&gt;groff&lt;/span&gt;
macros &lt;code class="docutils literal"&gt;.start&amp;lt;class&amp;gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;.stop&amp;lt;class&amp;gt;&lt;/code&gt; (also included in the
source ReST in the raw block for ms output).&lt;/p&gt;
&lt;p&gt;For divs with the poem class, it converts any contained LineBlock
elements into a list of Plain elements containing its contents,
avoiding the ms output for the LineBlock starting with &lt;code class="docutils literal"&gt;.LP&lt;/code&gt;, which
would cancel the &lt;code class="docutils literal"&gt;.DS&lt;/code&gt; (display start) macro I want to use in the
.startpoem macro definition.  The &lt;code class="docutils literal"&gt;.LP&lt;/code&gt; would also reset the font family
in use to the default, another reason to avoid it. &lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2020/05/03/customizing-pandoc-ms-output-with-a-lua-filter/#lp" id="id1"&gt;1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The filter also converts the empty element that occurs in the line block
as a result of a blank line in the line block input into a RawBlock
that creates a blank line in the ms output, to show the division into
stanzas of the poem.&lt;/p&gt;
&lt;p&gt;Interestingly, the first Str elements in the each line in the content
of the line block preserved the leading spaces from the input as
Unicode NO-BREAK SPACE characters, preserving indentation of lines in
the line block.  Unfortunately, the width of those spaces alone is not
enough create a visually distinct indentation, so this filter changes
those Str elements into a RawInline that outputs a &lt;span class="app"&gt;groff&lt;/span&gt; horizfontal
movement whose width is based on the number of leading NO-BREAK SPACE
characters, and follow this with a new Str element that has the
leading NO-BREAK SPACE characters removed.&lt;/p&gt;
&lt;p&gt;Here is the Lua filter, &lt;span class="file"&gt;classify-rst-ms.lua&lt;/span&gt;:&lt;/p&gt;
&lt;pre class="code lua"&gt;&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;onig&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"rex_onig"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;-- Need a regex package that understands UTF8.&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;-- text in LineBreak preserves leading spaces as Unicode NO-BREAK SPACE&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-3"&gt;&lt;/a&gt;&lt;span class="n"&gt;leading_nobreakspace_rx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;onig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"^(&lt;/span&gt;&lt;span class="se"&gt;\u{a0}&lt;/span&gt;&lt;span class="s2"&gt;+)(.*)$"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"UTF8"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-5"&gt;&lt;/a&gt;&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;Div&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-6"&gt;&lt;/a&gt;  &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;annotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;find_if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;matches&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-7"&gt;&lt;/a&gt;  &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;numPara&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-8"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;annotation&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-9"&gt;&lt;/a&gt;     &lt;span class="n"&gt;annotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;annotation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;"[^%w]*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-10"&gt;&lt;/a&gt;     &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;annotation&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;"poem"&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-11"&gt;&lt;/a&gt;        &lt;span class="n"&gt;element&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pandoc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk_block&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-12"&gt;&lt;/a&gt;           &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-13"&gt;&lt;/a&gt;              &lt;span class="c1"&gt;-- Replace LineBlock element with a list of Plain elements&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-14"&gt;&lt;/a&gt;              &lt;span class="c1"&gt;-- containing the LineBlock's subelements.&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-15"&gt;&lt;/a&gt;              &lt;span class="n"&gt;LineBlock&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-16"&gt;&lt;/a&gt;                 &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-17"&gt;&lt;/a&gt;                 &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subel&lt;/span&gt; &lt;span class="kr"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;ipairs&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;el&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;content&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-18"&gt;&lt;/a&gt;                    &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt;&lt;span class="n"&gt;subel&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-19"&gt;&lt;/a&gt;                       &lt;span class="c1"&gt;-- If subel is an empty table, output a raw empty line&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-20"&gt;&lt;/a&gt;                       &lt;span class="nb"&gt;table.insert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pandoc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RawBlock&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ms"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-21"&gt;&lt;/a&gt;                    &lt;span class="kr"&gt;else&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-22"&gt;&lt;/a&gt;                       &lt;span class="c1"&gt;-- Check for leading NO-BREAK SPACE charaters&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-23"&gt;&lt;/a&gt;                       &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;m2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;onig&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subel&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-24"&gt;&lt;/a&gt;                                                  &lt;span class="n"&gt;leading_nobreakspace_rx&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-25"&gt;&lt;/a&gt;                       &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;m1&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-26"&gt;&lt;/a&gt;                          &lt;span class="c1"&gt;-- Replace the NO-BREAK SPACE characters with a raw&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-27"&gt;&lt;/a&gt;                          &lt;span class="c1"&gt;-- groff horizontal movement, because the&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-28"&gt;&lt;/a&gt;                          &lt;span class="c1"&gt;-- NO-BREAK SPACE characters are too narrow.&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-29"&gt;&lt;/a&gt;                          &lt;span class="nb"&gt;table.insert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subel&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pandoc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RawInline&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ms"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;string.format&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;h'%dn'"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;utf8.len&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-30"&gt;&lt;/a&gt;                          &lt;span class="c1"&gt;-- Modify what was used to be the first item to just&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-31"&gt;&lt;/a&gt;                          &lt;span class="c1"&gt;-- include the trailing characters of the match.&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-32"&gt;&lt;/a&gt;                          &lt;span class="n"&gt;subel&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pandoc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Str&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;m2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-33"&gt;&lt;/a&gt;                          &lt;span class="nb"&gt;table.insert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pandoc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Plain&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subel&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-34"&gt;&lt;/a&gt;                       &lt;span class="kr"&gt;else&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-35"&gt;&lt;/a&gt;                          &lt;span class="c1"&gt;-- Just put the subel in Plain element.&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-36"&gt;&lt;/a&gt;                          &lt;span class="nb"&gt;table.insert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pandoc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Plain&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subel&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-37"&gt;&lt;/a&gt;                       &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-38"&gt;&lt;/a&gt;                    &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-39"&gt;&lt;/a&gt;                 &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-40"&gt;&lt;/a&gt;                 &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-41"&gt;&lt;/a&gt;        &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="p"&gt;})&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-42"&gt;&lt;/a&gt;     &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-43"&gt;&lt;/a&gt;     &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-44"&gt;&lt;/a&gt;        &lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;".start"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;annotation&lt;/span&gt; &lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-45"&gt;&lt;/a&gt;        &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-46"&gt;&lt;/a&gt;        &lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;".stop"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;annotation&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-47"&gt;&lt;/a&gt;     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-48"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-49"&gt;&lt;/a&gt;&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-50"&gt;&lt;/a&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-51"&gt;&lt;/a&gt;&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;Span&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-52"&gt;&lt;/a&gt;  &lt;span class="kd"&gt;local&lt;/span&gt; &lt;span class="n"&gt;annotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;classes&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;find_if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-53"&gt;&lt;/a&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-54"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;if&lt;/span&gt; &lt;span class="n"&gt;annotation&lt;/span&gt; &lt;span class="kr"&gt;then&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-55"&gt;&lt;/a&gt;     &lt;span class="n"&gt;annotation&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;annotation&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;gsub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"[^%w]*"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-56"&gt;&lt;/a&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-57"&gt;&lt;/a&gt;     &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-58"&gt;&lt;/a&gt;        &lt;span class="n"&gt;ms_inline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;*[start"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;annotation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-59"&gt;&lt;/a&gt;        &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-60"&gt;&lt;/a&gt;        &lt;span class="n"&gt;ms_inline&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s2"&gt;*[stop"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;annotation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;"]"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-61"&gt;&lt;/a&gt;     &lt;span class="p"&gt;}&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-62"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;end&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-63"&gt;&lt;/a&gt;&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-64"&gt;&lt;/a&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-65"&gt;&lt;/a&gt;&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-66"&gt;&lt;/a&gt; &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;match&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;"^%a+"&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-67"&gt;&lt;/a&gt;&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-68"&gt;&lt;/a&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-69"&gt;&lt;/a&gt;&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;macro&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;annotation&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-70"&gt;&lt;/a&gt; &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pandoc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RawBlock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s2"&gt;"ms"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;macro&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="n"&gt;annotation&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-71"&gt;&lt;/a&gt;&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-72"&gt;&lt;/a&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-73"&gt;&lt;/a&gt;&lt;span class="kr"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;ms_inline&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;macro&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;annotation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-74"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pandoc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;RawInline&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"ms"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;macro&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="n"&gt;annotation&lt;/span&gt; &lt;span class="o"&gt;..&lt;/span&gt; &lt;span class="n"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_31295897b33f4327b2d21fb894708242-75"&gt;&lt;/a&gt;&lt;span class="kr"&gt;end&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Here is the ReST source of the document, &lt;span class="file"&gt;poem-plus.rst&lt;/span&gt;:&lt;/p&gt;
&lt;pre class="code ReST"&gt;&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-1"&gt;&lt;/a&gt;Lua Filters For Massaging &lt;span class="s"&gt;``ms``&lt;/span&gt; Output
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-2"&gt;&lt;/a&gt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; ms
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-6"&gt;&lt;/a&gt;   .ds startprogram \\f[CW]\\m[red]
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-7"&gt;&lt;/a&gt;   .ds stopprogram \\m[]\\fP
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-8"&gt;&lt;/a&gt;   .de startpoem
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-9"&gt;&lt;/a&gt;   .ds OLDFAM \\*[FAM]
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-10"&gt;&lt;/a&gt;   .ds FAM BM
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-11"&gt;&lt;/a&gt;   .DS I 3
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-12"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   ..&lt;/span&gt;
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-13"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   .de stoppoem&lt;/span&gt;
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-14"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   .DE&lt;/span&gt;
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-15"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   .ds FAM \\*[OLDFAM]&lt;/span&gt;
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-16"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   ..&lt;/span&gt;
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-17"&gt;&lt;/a&gt;
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-18"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;role&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; program
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-20"&gt;&lt;/a&gt;This is a sentence.  This sentence talks about &lt;span class="na"&gt;:program:&lt;/span&gt;&lt;span class="nv"&gt;`pandoc`&lt;/span&gt;.
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-21"&gt;&lt;/a&gt;This is
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-22"&gt;&lt;/a&gt;another sentence.
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-24"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;class&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; poem
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-26"&gt;&lt;/a&gt;   &lt;span class="o"&gt;|&lt;/span&gt; Some say the world will end in fire,
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-27"&gt;&lt;/a&gt;   &lt;span class="o"&gt;|&lt;/span&gt;    Some say in ice.
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-28"&gt;&lt;/a&gt;   &lt;span class="o"&gt;|&lt;/span&gt; From what I've tasted of desire
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-29"&gt;&lt;/a&gt;   &lt;span class="o"&gt;|&lt;/span&gt;    I hold with those who favor fire.
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-30"&gt;&lt;/a&gt;   &lt;span class="o"&gt;|&lt;/span&gt; But if it had to perish twice,
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-31"&gt;&lt;/a&gt;   &lt;span class="o"&gt;|&lt;/span&gt;    I think I know enough of hate
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-32"&gt;&lt;/a&gt;   &lt;span class="o"&gt;|&lt;/span&gt;    To say that for destruction ice
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-33"&gt;&lt;/a&gt;   &lt;span class="o"&gt;|&lt;/span&gt;    Is also great,
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-34"&gt;&lt;/a&gt;   &lt;span class="o"&gt;|&lt;/span&gt; And would suffice.
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-35"&gt;&lt;/a&gt;   |
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-36"&gt;&lt;/a&gt;   &lt;span class="o"&gt;|&lt;/span&gt; And another line,
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-37"&gt;&lt;/a&gt;   &lt;span class="o"&gt;|&lt;/span&gt;    And an indented line.
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-38"&gt;&lt;/a&gt;
&lt;a name="rest_code_03ac9c05162b4d3f9a410a1d1e98b589-39"&gt;&lt;/a&gt;This is a final sentence.
&lt;/pre&gt;&lt;p&gt;And here is the ms output:&lt;/p&gt;
&lt;pre class="code groff"&gt;&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-1"&gt;&lt;/a&gt;.&lt;span class="k"&gt;SH&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-2"&gt;&lt;/a&gt;Lua Filters For Massaging &lt;span class="se"&gt;\f[CB]ms\f[B]&lt;/span&gt; Output
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-3"&gt;&lt;/a&gt;.&lt;span class="k"&gt;pdfhref&lt;/span&gt; &lt;span class="s"&gt;O&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="s2"&gt;"Lua Filters For Massaging ms Output"&lt;/span&gt;
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-4"&gt;&lt;/a&gt;.&lt;span class="k"&gt;pdfhref&lt;/span&gt; &lt;span class="s"&gt;M&lt;/span&gt; &lt;span class="s2"&gt;"lua-filters-for-massaging-ms-output"&lt;/span&gt;
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-5"&gt;&lt;/a&gt;.&lt;span class="k"&gt;ds&lt;/span&gt; &lt;span class="s"&gt;startprogram&lt;/span&gt; &lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;f[CW]\\m[red]&lt;/span&gt;
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-6"&gt;&lt;/a&gt;.&lt;span class="k"&gt;ds&lt;/span&gt; &lt;span class="s"&gt;stopprogram&lt;/span&gt; &lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;m[]\\fP&lt;/span&gt;
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-7"&gt;&lt;/a&gt;.&lt;span class="k"&gt;de&lt;/span&gt; &lt;span class="s"&gt;startpoem&lt;/span&gt;
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-8"&gt;&lt;/a&gt;.&lt;span class="k"&gt;ds&lt;/span&gt; &lt;span class="s"&gt;OLDFAM&lt;/span&gt; &lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;*[FAM]&lt;/span&gt;
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-9"&gt;&lt;/a&gt;.&lt;span class="k"&gt;ds&lt;/span&gt; &lt;span class="s"&gt;FAM&lt;/span&gt; &lt;span class="s"&gt;BM&lt;/span&gt;
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-10"&gt;&lt;/a&gt;.&lt;span class="k"&gt;DS&lt;/span&gt; &lt;span class="s"&gt;I&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s"&gt;.&lt;/span&gt;
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-12"&gt;&lt;/a&gt;.&lt;span class="k"&gt;de&lt;/span&gt; &lt;span class="s"&gt;stoppoem&lt;/span&gt;
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-13"&gt;&lt;/a&gt;.&lt;span class="k"&gt;DE&lt;/span&gt;
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-14"&gt;&lt;/a&gt;.&lt;span class="k"&gt;ds&lt;/span&gt; &lt;span class="s"&gt;FAM&lt;/span&gt; &lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;*[OLDFAM]&lt;/span&gt;
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-15"&gt;&lt;/a&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s"&gt;.&lt;/span&gt;
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-16"&gt;&lt;/a&gt;.&lt;span class="k"&gt;LP&lt;/span&gt;
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-17"&gt;&lt;/a&gt;This is a sentence.
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-18"&gt;&lt;/a&gt;This sentence talks about &lt;span class="se"&gt;\*[startprogram]pandoc\*[stopprogram]&lt;/span&gt;.
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-19"&gt;&lt;/a&gt;This is
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-20"&gt;&lt;/a&gt;another sentence.
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-21"&gt;&lt;/a&gt;.&lt;span class="k"&gt;startpoem&lt;/span&gt;
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-22"&gt;&lt;/a&gt;Some say the world will end in fire,
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-23"&gt;&lt;/a&gt;&lt;span class="se"&gt;\h&lt;/span&gt;'3n'Some say in ice.
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-24"&gt;&lt;/a&gt;From what I&lt;span class="se"&gt;\[&lt;/span&gt;aq]ve tasted of desire
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-25"&gt;&lt;/a&gt;&lt;span class="se"&gt;\h&lt;/span&gt;'3n'I hold with those who favor fire.
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-26"&gt;&lt;/a&gt;But if it had to perish twice,
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-27"&gt;&lt;/a&gt;&lt;span class="se"&gt;\h&lt;/span&gt;'3n'I think I know enough of hate
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-28"&gt;&lt;/a&gt;&lt;span class="se"&gt;\h&lt;/span&gt;'3n'To say that for destruction ice
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-29"&gt;&lt;/a&gt;&lt;span class="se"&gt;\h&lt;/span&gt;'3n'Is also great,
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-30"&gt;&lt;/a&gt;And would suffice.
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-32"&gt;&lt;/a&gt;And another line,
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-33"&gt;&lt;/a&gt;&lt;span class="se"&gt;\h&lt;/span&gt;'3n'And an indented line.
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-34"&gt;&lt;/a&gt;.&lt;span class="k"&gt;stoppoem&lt;/span&gt;
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-35"&gt;&lt;/a&gt;.&lt;span class="k"&gt;LP&lt;/span&gt;
&lt;a name="rest_code_12fe29264f5b4d30b6ae8367eddf28a6-36"&gt;&lt;/a&gt;This is a final sentence.
&lt;/pre&gt;&lt;p&gt;The command to produce the ms output is:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_34bd7a25758d42d99debc31b3496de33-1"&gt;&lt;/a&gt;pandoc -f rst -t ms --lua-filter classify-rst-ms.lua --wrap=preserve poem-plus.rst
&lt;/pre&gt;&lt;p&gt;and the command to produce a PDF is:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_dcb535390b8740668f02bdbf59c119a0-1"&gt;&lt;/a&gt;pandoc -f rst -t ms --lua-filter classify-rst-ms.lua --wrap&lt;span class="o"&gt;=&lt;/span&gt;preserve poem-plus.rst --output&lt;span class="o"&gt;=&lt;/span&gt;poem-plus-rst-ms.pdf
&lt;/pre&gt;&lt;p&gt;&lt;a class="reference external" href="https://tkurtbond.github.io/poem-plus-rst-ms.pdf"&gt;Here&lt;/a&gt; is the output PDF.&lt;/p&gt;
&lt;p&gt;Being able to rewrite the tree and insert RawBlocks and RawInlines is
really powerful when it comes to customizing output for particular
output formats.&lt;/p&gt;
&lt;p&gt;I hope this example is useful for others like me just learning to use
Lua filters.&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="lp"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2020/05/03/customizing-pandoc-ms-output-with-a-lua-filter/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The &lt;code class="docutils literal"&gt;.LP&lt;/code&gt; macro in the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-ms&lt;/span&gt;&lt;/code&gt; macros resets a lot of
things back to the default when it is used, so if you want the custom
&lt;span class="app"&gt;groff&lt;/span&gt; setting from your user defined macros to continue from the
start to the end you can't allow the use of &lt;code class="docutils literal"&gt;.LP&lt;/code&gt; between the
&lt;code class="docutils literal"&gt;.start&amp;lt;class&amp;gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;.stop&amp;lt;class&amp;gt;&lt;/code&gt; macros.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;</description><category>groff ms macros</category><category>lua filters</category><category>pandoc</category><category>pandoc-discuss</category><category>pdf</category><category>restructuredtext</category><guid>https://tkurtbond.github.io/posts/2020/05/03/customizing-pandoc-ms-output-with-a-lua-filter/</guid><pubDate>Sun, 03 May 2020 05:01:53 GMT</pubDate></item></channel></rss>