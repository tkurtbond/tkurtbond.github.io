<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lacking Natural Simplicity (Posts about emacs)</title><link>https://tkurtbond.github.io/</link><description></description><atom:link href="https://tkurtbond.github.io/categories/cat_computer/emacs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:tkurtbond@gmail.com"&gt;T. Kurt Bond&lt;/a&gt; </copyright><lastBuildDate>Fri, 03 Jul 2020 19:31:01 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Arrow Macros in Emacs Lisp</title><link>https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;Are you familiar with arrow macros?  (They have nothing to do with
&lt;a class="reference external" href="https://en.wikibooks.org/wiki/Haskell/Understanding_arrows"&gt;arrows in Haskell&lt;/a&gt;.) They started out in &lt;a class="reference external" href="https://clojure.org/"&gt;Clojure&lt;/a&gt;, I think, and have
been ported to &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_Lisp"&gt;Common Lisp&lt;/a&gt; and probably other Lisps, though I didn't
find one for &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt;.  I think the &lt;a class="reference external" href="https://github.com/Harleqin/arrows"&gt;arrows&lt;/a&gt; package is the most up
to date in &lt;a class="reference external" href="https://www.quicklisp.org/"&gt;Quicklisp&lt;/a&gt; for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_Lisp"&gt;Common Lisp&lt;/a&gt;, but I found the &lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;
package first so that's the one I converted to &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; today.&lt;/p&gt;
&lt;p&gt;There were two slightly tricky parts to the port&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;I needed to use lexical binding for the source file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;'s test suite used fractions, but &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; doesn't
have them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyway, I think they're very useful.  If you have a value and
you want it to be processed by several functions in a chain you
can use an arrow macro instead of using lots of nested function
calls. For instance,&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a name="rest_code_fafb00456527441db47a005cc800aae0-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.+"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.-"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-\\."&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;is annoying and hard to read on one line.  If you split it into multiple lines&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-2"&gt;&lt;/a&gt; &lt;span class="s"&gt;"-+$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-3"&gt;&lt;/a&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-4"&gt;&lt;/a&gt;  &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-5"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-6"&gt;&lt;/a&gt;   &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-7"&gt;&lt;/a&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-8"&gt;&lt;/a&gt;    &lt;span class="s"&gt;"\\.+"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-9"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-10"&gt;&lt;/a&gt;     &lt;span class="s"&gt;"\\.-"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-11"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-12"&gt;&lt;/a&gt;      &lt;span class="s"&gt;"-\\."&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-13"&gt;&lt;/a&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-14"&gt;&lt;/a&gt;       &lt;span class="s"&gt;"-+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-15"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;
&lt;a name="rest_code_e6c2635e25834b95b990cd9414abf6b6-16"&gt;&lt;/a&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;that's also pretty horrible.  To read it you have to skip to the end,
figure out that function call, then skip back to the next function
call, and so forth, until you get back to the last function call,
reading it from inside out.  It looks much better if you use the
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; arrow macro, which substitutes the value you are passing along
as the last argument to the functions you are calling:&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a name="rest_code_9a019eca84c44c72a257aa3b71165e34-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;
&lt;a name="rest_code_9a019eca84c44c72a257aa3b71165e34-2"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9a019eca84c44c72a257aa3b71165e34-3"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9a019eca84c44c72a257aa3b71165e34-4"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-\\."&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9a019eca84c44c72a257aa3b71165e34-5"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.-"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9a019eca84c44c72a257aa3b71165e34-6"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.+"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9a019eca84c44c72a257aa3b71165e34-7"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_9a019eca84c44c72a257aa3b71165e34-8"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I also think it is more understandable than the highly nested calls,
since you can follow along in from start to finish, rather than from
inside out: you've got the value, you pass it to the first function,
then to the second, and so forth.&lt;/p&gt;
&lt;p&gt;There are also macros to insert the value at the front of the argument
list (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt;&lt;/code&gt;) and to insert the value where a &lt;code class="docutils literal"&gt;&amp;lt;&amp;gt;&lt;/code&gt; symbol is found
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I wrote some &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; code with the last expression above today, and
I think it makes a good example of why they are useful.&lt;/p&gt;
&lt;p&gt;Here's the use case that inspired me to port them to &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs
Lisp&lt;/a&gt;.  When I save things from the internet I often want to
create a directory to save them in based on the filename or
some text on a web page or something, but usually there are
spaces or special characters in that text, so I have to
sanitize the text to make it a safe and simple filename.  So I
need to replace all special characters with dashes.  But I
don't want dashes repeated multiple times, just a single dash,
and I don't want dashes followed or preceded by periods, only
the period.&lt;/p&gt;
&lt;p&gt;Here' s some code to do that:&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;tkb-sanitize-for-filename&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-2"&gt;&lt;/a&gt;  &lt;span class="s"&gt;"Clean up characters in STRING that aren't good for&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-3"&gt;&lt;/a&gt;&lt;span class="s"&gt;filenames."&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-4"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-5"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-6"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-7"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-\\."&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-8"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.-"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-9"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.+"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-10"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-11"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;tkb-sanitize-kill-for-filename&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-14"&gt;&lt;/a&gt;  &lt;span class="s"&gt;"Clean up characters that aren't good for filenames in the&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-15"&gt;&lt;/a&gt;&lt;span class="s"&gt;top of the kill&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-16"&gt;&lt;/a&gt;&lt;span class="s"&gt;ring and put the result on the top of the kill ring."&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-17"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;;; gets the kill or the system clipboard if it is new.&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-18"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interactive&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-kill&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-19"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;new-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;tkb-sanitize-for-filename&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-20"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt; &lt;span class="s"&gt;"Old string: %s\nNew String: %s"&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;new-string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-21"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kill-new&lt;/span&gt; &lt;span class="nv"&gt;new-string&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_5430c43866894d53a7f5849fbd0c8fc8-23"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c k S"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'tkb-sanitize-kill-for-filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Note that the function &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;tkb-sanitize-kill-for-filename&lt;/span&gt;&lt;/code&gt; that I use
interactively gets uses &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(current-kill&lt;/span&gt; 0 t)&lt;/code&gt; because it either
returns the top of the kill ring, or if the system clipboard is newer
it puts that on top of the kill ring and returns it.  (The docstring
of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;current-kill&lt;/span&gt;&lt;/code&gt; makes that a little difficult to figure out.)&lt;/p&gt;
&lt;p&gt;So if I have the name of a product as
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;"***Flashy####Product%%%%Name!!!!"&lt;/span&gt;&lt;/code&gt; I copy that to the clipboard
with &lt;code class="key docutils literal"&gt;&lt;span class="pre"&gt;â-C&lt;/span&gt;&lt;/code&gt;, switch to emacs, do &lt;code class="key docutils literal"&gt;&lt;span class="pre"&gt;C-c&lt;/span&gt; k S&lt;/code&gt;, switch back to
whatever program is saving the file, and use the generated,
sanitized name &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Flashy-Product-Name&lt;/span&gt;&lt;/code&gt; with &lt;code class="key docutils literal"&gt;&lt;span class="pre"&gt;â-V&lt;/span&gt;&lt;/code&gt;.  Nifty!&lt;/p&gt;
&lt;p&gt;(And if you've ever wondered what the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Unicode"&gt;Unicode&lt;/a&gt; character for the Mac
keyboard &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Command_key"&gt;Command key&lt;/a&gt; (â) is, it is the PLACE OF INTEREST SIGN, and you
can enter it by C-x 8 RETURN PLACE OF INTEREST SIGN.  The symbol they
use for for the key labeled alt and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Option_key"&gt;option&lt;/a&gt; (â¥) is the Unicode OPTION
KEY, and the symbol they use for the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Shift_key"&gt;Shift Key&lt;/a&gt; (â§) is UPWARDS WHITE ARROW.
I'm surprised they don't have a special symbol for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Control_key"&gt;Control&lt;/a&gt;, but it
looks like they just use the plain ASCII ^, known in Unicode as
CIRCUMFLEX ACCENT.)&lt;/p&gt;
&lt;p&gt;Anyway, &lt;a class="reference external" href="https://tkurtbond.github.io/arrows-for-emacs.zip"&gt;here&lt;/a&gt;'s a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Info-ZIP"&gt;ZIP&lt;/a&gt; file with the Emacs Lisp source for the arrow
macros so you can use them if you've been convinced of their
usefulness by this post.  It also has some minimal documentation in
the &lt;span class="file"&gt;README.md&lt;/span&gt; that came from the &lt;span class="file"&gt;README.md&lt;/span&gt; from
&lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;, which seems to repeat the information from the
docstrings for the macros.&lt;/p&gt;&lt;/div&gt;</description><category>arrow macros</category><category>clojure</category><category>common lisp</category><category>emacs</category><category>emacs lisp</category><category>unicode</category><guid>https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/</guid><pubDate>Fri, 03 Jul 2020 18:11:16 GMT</pubDate></item><item><title>Defining keys in the C-x 8 prefix keymap</title><link>https://tkurtbond.github.io/posts/2012/10/03/defining-keys-in-the-c-x-8-prefix-keymap/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;Yay!  I finally found it!&lt;/p&gt;
&lt;p&gt;Suppose you hate typing âC-x 8 RET GREEK SMALL LETTER LAMBDAâ to
insert a lowercase lambda character in emacs (perhaps because you have
a dull American keyboard and aren't very savvy to input methods).  You
can add a key definition to the âC-x 8 prefix keymapâ, say âglâ, so
you can type âC-x 8 g lâ and insert a lowercase lambda.&lt;/p&gt;
&lt;p&gt;Here's how you might do it for âÎ»â, âÎâ, and âÂ§â:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(load-library "iso-transl.el")
(iso-transl-define-keys '(("gl" . [?Î»])   ; greek lowercase lambda
                          ("gL" . [?Î])   ; greek uppercase lambda
                          ("ps" . [?Â§]))) ; punctuation SECTION SIGN&lt;/pre&gt;&lt;/div&gt;</description><category>emacs</category><category>emacs lisp</category><category>key translation</category><category>unicode</category><guid>https://tkurtbond.github.io/posts/2012/10/03/defining-keys-in-the-c-x-8-prefix-keymap/</guid><pubDate>Thu, 04 Oct 2012 04:54:40 GMT</pubDate></item><item><title>Multics Emacs programmed by secretaries</title><link>https://tkurtbond.github.io/posts/2012/06/15/multics-emacs-programmed-by-secretaries/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;RMS &lt;a class="reference external" href="http://www.gnu.org/gnu/rms-lisp.html"&gt;relates&lt;/a&gt; how programming Multics Emacs was so convenient that secretaries started to learn to use it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;â¦Â The language that you build your extensions on shouldn't be
thought of as a programming language in afterthought; it should be
designed as a programming language. In fact, we discovered that
the best programming language for that purpose was Lisp.&lt;/p&gt;
&lt;p&gt;It was Bernie Greenberg, who discovered that it was (5). He wrote
a version of Emacs in Multics MacLisp, and he wrote his commands
in MacLisp in a straightforward fashion. The editor itself was
written entirely in Lisp. Multics Emacs proved to be a great
success â programming new editing commands was so convenient that
even the secretaries in his office started learning how to use
it. They used a manual someone had written which showed how to
extend Emacs, but didn't say it was a programming. So the
secretaries, who believed they couldn't do programming, weren't
scared off. They read the manual, discovered they could do useful
things and they learned to program.&lt;/p&gt;
&lt;p&gt;So Bernie saw that an application â a program that does something
useful for you â which has Lisp inside it and which you could
extend by rewriting the Lisp programs, is actually a very good way
for people to learn programming. It gives them a chance to write
small programs that are useful for them, which in most arenas you
can't possibly do. They can get encouragement for their own
practical use â at the stage where it's the hardest â where they
don't believe they can program, until they get to the point where
they are programmers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- Wasn't troff also used by secretaries? --&gt;&lt;/div&gt;</description><category>emacs</category><category>lisp</category><category>programming</category><guid>https://tkurtbond.github.io/posts/2012/06/15/multics-emacs-programmed-by-secretaries/</guid><pubDate>Fri, 15 Jun 2012 14:10:09 GMT</pubDate></item><item><title>Emacs 23.1 and Wanderlust</title><link>https://tkurtbond.github.io/posts/2009/09/25/emacs-23.1-and-wanderlust/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;To get UTF-8 to work when sending drafted messages  in &lt;a class="reference external" href="http://www.gohome.org/wl/"&gt;Wanderlust&lt;/a&gt; with
Emacs 23.1 I had to apply this &lt;a class="reference external" href="http://article.gmane.org/gmane.mail.wanderlust.general.japanese/5978"&gt;patch&lt;/a&gt; to FLIM.&lt;/p&gt;
&lt;p&gt;I also checked out the wl-2_15_6-vtl branch in the wanderlust
repository and the semi-1_14-vtl branch in the semi repository.
(See &lt;a class="reference external" href="https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/"&gt;repos&lt;/a&gt; for info about the repositories.)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>wanderlust</category><guid>https://tkurtbond.github.io/posts/2009/09/25/emacs-23.1-and-wanderlust/</guid><pubDate>Fri, 25 Sep 2009 19:34:41 GMT</pubDate></item><item><title>Wanderlust, APEL, FLIM, and SEMI development</title><link>https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;Someone once said something along the lines that to those in the
Western world who don't speak Japanese there is an alternate
universe of FOSS &lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/#foss" id="id1"&gt;1&lt;/a&gt; development in Japan &lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/#china" id="id2"&gt;2&lt;/a&gt;, and every so
often things from that universe just appear in the Western FOSS
universe as mysterious foreign objects.  Ruby seems to have made a
solid connection between the universes, but many others are less
approachable.&lt;/p&gt;
&lt;p&gt;Wanderlust development and the development of the emacs packages that
it depends on (APEL, FLIM, and SEMI) feel like that to me.  Some of
them have web pages, but they're usually quite out of date.  It can be
difficult find to their CVS repositories, and even more difficult to find
the browse-able web interfaces to their CVS repositories.  Every time
I want to look at the code, I have to figure this all out again, hence
this post.&lt;/p&gt;
&lt;p&gt;There was a &lt;a class="reference external" href="http://lists.airs.net/wl-en/archive/200905/msg00099.html"&gt;post&lt;/a&gt; on the Wanderlust English-language mailing list from
Katsumi Yamaoka &amp;lt;&lt;a class="reference external" href="mailto:yamaoka@jpl.org"&gt;yamaoka@jpl.org&lt;/a&gt;&amp;gt; on Wednesday, 27 May 2009 that gave
the location of the APEL, FLIM, and SEMI cvs repositories, and
mentioned that development in the FLIM and SEMI repositories was
taking place under the flim_1_14 and semi_1_14 branches, respectively.
The post also said that the place for discussion about APEL is the
APEL mailing lists:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="mailto:apel-en@m17n.org"&gt;apel-en@m17n.org&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="mailto:apel-ja@m17n.org"&gt;apel-ja@m17n.org&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;To subscribe, send an empty e-mail to &lt;a class="reference external" href="mailto:apel-en-ctl@m17n.org"&gt;apel-en-ctl@m17n.org&lt;/a&gt; and/or
&lt;a class="reference external" href="mailto:apel-ja-ctl@m17n.org"&gt;apel-ja-ctl@m17n.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The place to discuss FLIM and SEMI is the EMACS-MIME mailing
list:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="mailto:emacs-mime-en@m17n.org"&gt;emacs-mime-en@m17n.org&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="mailto:emacs-mime-ja@m17n.org"&gt;emacs-mime-ja@m17n.org&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;To subscribe, send an e-mail containing âsubscribe YOUR NAMEâ in its
contents to &lt;a class="reference external" href="mailto:emacs-mime-en-ctl@m17n.org"&gt;emacs-mime-en-ctl@m17n.org&lt;/a&gt; and/or
&lt;a class="reference external" href="mailto:emacs-mime-ja-ctl@m17n.org"&gt;emacs-mime-ja-ctl@m17n.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, here are the CVS commands I just used to check the various
packages out:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_8cf0446a21c146678afe7d5170c48979-1"&gt;&lt;/a&gt;cvs -d :pserver:anonymous@cvs.m17n.org:/cvs/root checkout wanderlust
&lt;a name="rest_code_8cf0446a21c146678afe7d5170c48979-2"&gt;&lt;/a&gt;cvs -z9 -d :pserver:anonymous@cvs.m17n.org:/cvs/root checkout apel
&lt;a name="rest_code_8cf0446a21c146678afe7d5170c48979-3"&gt;&lt;/a&gt;cvs -z9 -d :pserver:anonymous@cvs.m17n.org:/cvs/root checkout -r flim-1_14 flim
&lt;a name="rest_code_8cf0446a21c146678afe7d5170c48979-4"&gt;&lt;/a&gt;cvs -z9 -d :pserver:anonymous@cvs.m17n.org:/cvs/root checkout -r semi-1_14 semi
&lt;/pre&gt;&lt;p&gt;Here are the browse-able CVS web interfaces:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://cvs.m17n.org/viewcvs/root/wanderlust/"&gt;http://cvs.m17n.org/viewcvs/root/wanderlust/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://cvs.m17n.org/viewcvs/root/apel/"&gt;http://cvs.m17n.org/viewcvs/root/apel/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://cvs.m17n.org/viewcvs/root/flim/"&gt;http://cvs.m17n.org/viewcvs/root/flim/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://cvs.m17n.org/viewcvs/root/semi/"&gt;http://cvs.m17n.org/viewcvs/root/semi/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="foss"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;strong&gt;F&lt;/strong&gt;ree or &lt;strong&gt;O&lt;/strong&gt;pen &lt;strong&gt;S&lt;/strong&gt;ource &lt;strong&gt;S&lt;/strong&gt;oftware.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="china"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;I wonder if there is a Chinese alternate universe of FOSS,
too?&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;</description><category>apel</category><category>e-mail</category><category>flim</category><category>semi</category><category>wanderlust</category><guid>https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/</guid><pubDate>Wed, 02 Sep 2009 14:01:26 GMT</pubDate></item><item><title>Emacs and Cygwin python</title><link>https://tkurtbond.github.io/posts/2008/12/15/emacs-and-cygwin-python/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;If you happen to be using &lt;a class="reference external" href="http://www.gnu.org/software/emacs/windows/ntemacs.html"&gt;Windows Emacs&lt;/a&gt; and &lt;a class="reference external" href="http://www.cygwin.com/"&gt;Cygwin&lt;/a&gt; &lt;a class="reference external" href="http://www.python.org/"&gt;Python&lt;/a&gt; there's
an annoying interaction where âM-x run-pythonâ hangs.  The easiest way
to fix it is to mount the directory where you have your emacs
installation into the Cygwin file name structure.  For instance, I
have my emacs installation in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;C:\emacs\emacs-22.2&lt;/span&gt;&lt;/code&gt;, and in a
cygwin shell I did &lt;code class="docutils literal"&gt;mount &lt;span class="pre"&gt;-b&lt;/span&gt; &lt;span class="pre"&gt;âC:\emacs'&lt;/span&gt; /emacs&lt;/code&gt;, and now running the
Cygwin python works.&lt;/p&gt;
&lt;p&gt;The emacs function &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;run-python&lt;/span&gt;&lt;/code&gt; adds the emacs &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;data-directory&lt;/span&gt;&lt;/code&gt; to
the &lt;code class="docutils literal"&gt;PYTHONPATH&lt;/code&gt; in the emacs &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;process-environment&lt;/span&gt;&lt;/code&gt; before running
python; unfortunately, since this is the MS Windows emacs, its
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;data-directory&lt;/span&gt;&lt;/code&gt; starts with a drive letter and a colon.  When the
Cygwin python initializes &lt;code class="docutils literal"&gt;sys.path&lt;/code&gt; it splits &lt;code class="docutils literal"&gt;PYTHONPATH&lt;/code&gt; at the
colons, which means &lt;code class="docutils literal"&gt;sys.path&lt;/code&gt; ends up with the drive letter as one
component (usually interpreted as a relative path) and everything
after the colon as another component.  It that's a valid Cygwin
pathname for the Emacs data directory (which is what the above mount
command did), things work (accidentally).&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>python</category><guid>https://tkurtbond.github.io/posts/2008/12/15/emacs-and-cygwin-python/</guid><pubDate>Mon, 15 Dec 2008 22:07:43 GMT</pubDate></item><item><title>Mousing in Emacs under Screen</title><link>https://tkurtbond.github.io/posts/2008/12/11/mousing-in-emacs-under-screen/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;It &lt;a class="reference external" href="http://savannah.gnu.org/bugs/?14930"&gt;turns out&lt;/a&gt; that if you execute the command &lt;cite&gt;xterm-mouse-mode&lt;/cite&gt; (or
evaluate &lt;cite&gt;(xterm-mouse-mode 1)&lt;/cite&gt; in your initialization file) when
running &lt;a class="reference external" href="http://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; under &lt;a class="reference external" href="http://www.gnu.org/software/screen/"&gt;Screen&lt;/a&gt; it allows ânon-modified single clicksâ to
work.  Normal mouse functionality is still available by holding the
Shift key while clicking.  I use the &lt;a class="reference external" href="http://www.chiark.greenend.org.uk/~sgtatham/putty/"&gt;PuTTY&lt;/a&gt; ssh client for remote
access to various servers, and this works well Emacs in Screen under
PuTTY, too.&lt;/p&gt;</description><category>computer</category><category>emacs</category><category>screen</category><category>tools</category><guid>https://tkurtbond.github.io/posts/2008/12/11/mousing-in-emacs-under-screen/</guid><pubDate>Thu, 11 Dec 2008 17:46:02 GMT</pubDate></item><item><title>linum.el</title><link>https://tkurtbond.github.io/posts/2008/08/16/linumel/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;I found a very useful &lt;a class="reference external" href="http://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; minor mode today: &lt;a class="reference external" href="http://stud4.tuwien.ac.at/~e0225855/linum/linum.html"&gt;linum.el&lt;/a&gt;, which puts line
numbers at the beginning of all the lines in a buffer.&lt;/p&gt;</description><category>emacs</category><guid>https://tkurtbond.github.io/posts/2008/08/16/linumel/</guid><pubDate>Sat, 16 Aug 2008 08:33:26 GMT</pubDate></item><item><title>Fun with Emacs: eval-after-load*</title><link>https://tkurtbond.github.io/posts/2008/08/15/fun-with-emacs-eval-after-load/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;Ok, suppose you want to evaluate a particular bit of code
after emacs loads a particular emacs-lisp file, but you want to pass
values of local variables into that code.  The function
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;eval-after-load&lt;/span&gt;&lt;/code&gt; makes you quote the expression and doesn't
allow passing values into the expression.  How about this?&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a name="rest_code_a3645f40dc6840f084024a5145e5a66e-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;require&lt;/span&gt; &lt;span class="ss"&gt;'cl&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_a3645f40dc6840f084024a5145e5a66e-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;defmacro*&lt;/span&gt; &lt;span class="nv"&gt;eval-after-load*&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt; &lt;span class="nv"&gt;varlist&lt;/span&gt; &lt;span class="kp"&gt;&amp;amp;rest&lt;/span&gt; &lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_a3645f40dc6840f084024a5145e5a66e-3"&gt;&lt;/a&gt;  &lt;span class="s"&gt;"Like &lt;/span&gt;&lt;span class="ss"&gt;`eval-after-load'&lt;/span&gt;&lt;span class="s"&gt;, but bind variables according to VARLIST in&lt;/span&gt;
&lt;a name="rest_code_a3645f40dc6840f084024a5145e5a66e-4"&gt;&lt;/a&gt;&lt;span class="s"&gt;the current environment of the &lt;/span&gt;&lt;span class="ss"&gt;`eval-after-load'&lt;/span&gt;&lt;span class="s"&gt; expression, not the&lt;/span&gt;
&lt;a name="rest_code_a3645f40dc6840f084024a5145e5a66e-5"&gt;&lt;/a&gt;&lt;span class="s"&gt;environment when BODY is evaluated.  This allows easy passing of values&lt;/span&gt;
&lt;a name="rest_code_a3645f40dc6840f084024a5145e5a66e-6"&gt;&lt;/a&gt;&lt;span class="s"&gt;into BODY.&lt;/span&gt;
&lt;a name="rest_code_a3645f40dc6840f084024a5145e5a66e-7"&gt;&lt;/a&gt;&lt;span class="s"&gt;Each element of VARLIST is a symbol (which is bound to the current value&lt;/span&gt;
&lt;a name="rest_code_a3645f40dc6840f084024a5145e5a66e-8"&gt;&lt;/a&gt;&lt;span class="s"&gt;of that symbol) or a list (SYMBOL VALUEFORM) (which binds SYMBOL to the&lt;/span&gt;
&lt;a name="rest_code_a3645f40dc6840f084024a5145e5a66e-9"&gt;&lt;/a&gt;&lt;span class="s"&gt;value of VALUEFORM in the environment of the &lt;/span&gt;&lt;span class="ss"&gt;`eval-after-load'&lt;/span&gt;&lt;span class="s"&gt; expression."&lt;/span&gt;
&lt;a name="rest_code_a3645f40dc6840f084024a5145e5a66e-10"&gt;&lt;/a&gt;  &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;eval-after-load&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;file&lt;/span&gt;
&lt;a name="rest_code_a3645f40dc6840f084024a5145e5a66e-11"&gt;&lt;/a&gt;     &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;loop&lt;/span&gt; &lt;span class="nv"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;varlist&lt;/span&gt;
&lt;a name="rest_code_a3645f40dc6840f084024a5145e5a66e-12"&gt;&lt;/a&gt;                  &lt;span class="nv"&gt;collect&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;symbolp&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_a3645f40dc6840f084024a5145e5a66e-13"&gt;&lt;/a&gt;                              &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;v&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;eval&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_a3645f40dc6840f084024a5145e5a66e-14"&gt;&lt;/a&gt;                            &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;car&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;eval&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;cadr&lt;/span&gt; &lt;span class="nv"&gt;v&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;a name="rest_code_a3645f40dc6840f084024a5145e5a66e-15"&gt;&lt;/a&gt;                  &lt;span class="nv"&gt;into&lt;/span&gt; &lt;span class="nv"&gt;new-varlist&lt;/span&gt;
&lt;a name="rest_code_a3645f40dc6840f084024a5145e5a66e-16"&gt;&lt;/a&gt;                  &lt;span class="nv"&gt;finally&lt;/span&gt; &lt;span class="nb"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;new-varlist&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;,@&lt;/span&gt;&lt;span class="nv"&gt;body&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_a3645f40dc6840f084024a5145e5a66e-17"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;put&lt;/span&gt; &lt;span class="ss"&gt;'eval-after-load*&lt;/span&gt; &lt;span class="ss"&gt;'lisp-indent-function&lt;/span&gt;
&lt;a name="rest_code_a3645f40dc6840f084024a5145e5a66e-18"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;1+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get&lt;/span&gt; &lt;span class="ss"&gt;'eval-after-load&lt;/span&gt; &lt;span class="ss"&gt;'lisp-indent-function&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Here's a contrived example which demonstrates when things happen.&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a name="rest_code_770c751f4594489883f3a859aa85b0ad-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;make-temp-file&lt;/span&gt; &lt;span class="s"&gt;"tkb-madness"&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="s"&gt;".el"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_770c751f4594489883f3a859aa85b0ad-2"&gt;&lt;/a&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_770c751f4594489883f3a859aa85b0ad-3"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;unwind-protect&lt;/span&gt;
&lt;a name="rest_code_770c751f4594489883f3a859aa85b0ad-4"&gt;&lt;/a&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;progn&lt;/span&gt;
&lt;a name="rest_code_770c751f4594489883f3a859aa85b0ad-5"&gt;&lt;/a&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;save-excursion&lt;/span&gt;
&lt;a name="rest_code_770c751f4594489883f3a859aa85b0ad-6"&gt;&lt;/a&gt;          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;buf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;find-file&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_770c751f4594489883f3a859aa85b0ad-7"&gt;&lt;/a&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;insert&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"(y-or-n-p \"In the file '%s'! \")"&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_770c751f4594489883f3a859aa85b0ad-8"&gt;&lt;/a&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;save-buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_770c751f4594489883f3a859aa85b0ad-9"&gt;&lt;/a&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kill-buffer&lt;/span&gt; &lt;span class="nv"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_770c751f4594489883f3a859aa85b0ad-10"&gt;&lt;/a&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;y-or-n-p&lt;/span&gt; &lt;span class="s"&gt;"This happens before the eval-after-load*"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_770c751f4594489883f3a859aa85b0ad-11"&gt;&lt;/a&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;eval-after-load*&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;
&lt;a name="rest_code_770c751f4594489883f3a859aa85b0ad-12"&gt;&lt;/a&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt;
&lt;a name="rest_code_770c751f4594489883f3a859aa85b0ad-13"&gt;&lt;/a&gt;             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;y&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;y-or-n-p&lt;/span&gt; &lt;span class="s"&gt;"This happens when the eval-after-load* is executed?"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_770c751f4594489883f3a859aa85b0ad-14"&gt;&lt;/a&gt;             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;z&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_770c751f4594489883f3a859aa85b0ad-15"&gt;&lt;/a&gt;          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;y-or-n-p&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"x: %d y: %S z: %d"&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt; &lt;span class="nv"&gt;z&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_770c751f4594489883f3a859aa85b0ad-16"&gt;&lt;/a&gt;          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;y-or-n-p&lt;/span&gt; &lt;span class="s"&gt;"This happends during the delayed expressions"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_770c751f4594489883f3a859aa85b0ad-17"&gt;&lt;/a&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;y-or-n-p&lt;/span&gt; &lt;span class="s"&gt;"This happens after the eval-after-load* expression"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_770c751f4594489883f3a859aa85b0ad-18"&gt;&lt;/a&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;load&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_770c751f4594489883f3a859aa85b0ad-19"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-exists-p&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;delete-file&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;You should see something like:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_db49ca6a811043e896daebc1d5a8c80b-1"&gt;&lt;/a&gt;Wrote /tmp/tkb-madness88647vuE.el
&lt;a name="rest_code_db49ca6a811043e896daebc1d5a8c80b-2"&gt;&lt;/a&gt;This happens before the eval-after-load*(y or n)
&lt;a name="rest_code_db49ca6a811043e896daebc1d5a8c80b-3"&gt;&lt;/a&gt;This happens when the eval-after-load* is executed?(y or n)
&lt;a name="rest_code_db49ca6a811043e896daebc1d5a8c80b-4"&gt;&lt;/a&gt;This happens after the eval-after-load* expression(y or n)
&lt;a name="rest_code_db49ca6a811043e896daebc1d5a8c80b-5"&gt;&lt;/a&gt;Loading /tmp/tkb-madness88647vuE.el (source)...
&lt;a name="rest_code_db49ca6a811043e896daebc1d5a8c80b-6"&gt;&lt;/a&gt;In the file '/tmp/tkb-madness88647vuE.el'! (y or n)
&lt;a name="rest_code_db49ca6a811043e896daebc1d5a8c80b-7"&gt;&lt;/a&gt;x: 1 y: t z: 2(y or n)
&lt;a name="rest_code_db49ca6a811043e896daebc1d5a8c80b-8"&gt;&lt;/a&gt;This happends during the delayed expressions(y or n)
&lt;a name="rest_code_db49ca6a811043e896daebc1d5a8c80b-9"&gt;&lt;/a&gt;Loading /tmp/tkb-madness88647vuE.el (source)...done
&lt;/pre&gt;&lt;p&gt;(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;y-or-n-p&lt;/span&gt;&lt;/code&gt; is used instead of &lt;code class="docutils literal"&gt;message&lt;/code&gt; so you see each message when it
happens.)&lt;/p&gt;
&lt;p&gt;Does the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;eval-after-load*&lt;/span&gt;&lt;/code&gt; macro make sense?&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://tkurtbond.github.io/posts/2008/08/15/fun-with-emacs-eval-after-load/</guid><pubDate>Fri, 15 Aug 2008 23:54:39 GMT</pubDate></item><item><title>Fun With Emacs: Unicode and #'describe-char</title><link>https://tkurtbond.github.io/posts/2008/08/15/fun-with-emacs-unicode-and-describe-char/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;Ever use the emacs command &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;describe-char&lt;/span&gt;&lt;/code&gt;?  It's even more fun with
proper unicode lookup data!&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;; First, we'll bind it to a key.&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="s"&gt;"\C-cD"&lt;/span&gt; &lt;span class="nf"&gt;#'&lt;/span&gt;&lt;span class="nv"&gt;describe-char&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;; Now we'll download it if necessary.&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;udf-url&lt;/span&gt; &lt;span class="s"&gt;"http://www.unicode.org/Public/UNIDATA/UnicodeData.txt"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-6"&gt;&lt;/a&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;udf-dest&lt;/span&gt; &lt;span class="s"&gt;"~/tmp/UnicodeData.txt"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-7"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;file-readable-p&lt;/span&gt; &lt;span class="nv"&gt;udf-dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-8"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;;; Let describe-char know it exists.&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-9"&gt;&lt;/a&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;describe-char-unicodedata-file&lt;/span&gt; &lt;span class="nv"&gt;udf-dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-10"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;;; It doesn't exist, and we need to download it!&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-11"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;when&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;y-or-n-p&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"You need to download %s ! Do it? "&lt;/span&gt; &lt;span class="nv"&gt;udf-url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-12"&gt;&lt;/a&gt;      &lt;span class="c1"&gt;;; Really weird: wget -O 'file' complains that file doesn't exist.&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-13"&gt;&lt;/a&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;cmd&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"cd ~/tmp/ &amp;amp;&amp;amp; wget -O %s --progress=dot '%s'"&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-14"&gt;&lt;/a&gt;                          &lt;span class="nv"&gt;udf-dest&lt;/span&gt; &lt;span class="nv"&gt;udf-url&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-15"&gt;&lt;/a&gt;             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;buf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-buffer-create&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;" *wget '%s'*"&lt;/span&gt; &lt;span class="nv"&gt;udf-url&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-16"&gt;&lt;/a&gt;             &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;proc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;start-process-shell-command&lt;/span&gt; &lt;span class="s"&gt;"wget-unicode-Data"&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-17"&gt;&lt;/a&gt;                                                &lt;span class="nv"&gt;buf&lt;/span&gt; &lt;span class="nv"&gt;cmd&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-18"&gt;&lt;/a&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;display-buffer&lt;/span&gt; &lt;span class="nv"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-19"&gt;&lt;/a&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;set-process-sentinel&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-20"&gt;&lt;/a&gt;         &lt;span class="nv"&gt;proc&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-21"&gt;&lt;/a&gt;         &lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;lambda&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;proc&lt;/span&gt; &lt;span class="nv"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-22"&gt;&lt;/a&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unless&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string-match&lt;/span&gt; &lt;span class="s"&gt;"^finished"&lt;/span&gt; &lt;span class="nv"&gt;event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-23"&gt;&lt;/a&gt;              &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ne"&gt;error&lt;/span&gt; &lt;span class="s"&gt;"unexpected status '%s' getting '%s'"&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;udf-url&lt;/span&gt; &lt;span class="nv"&gt;event&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-24"&gt;&lt;/a&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;describe-char-unicodedata-file&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;udf-dest&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-25"&gt;&lt;/a&gt;            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt; &lt;span class="s"&gt;"Try describe-char now! â£â¥â¸â§âââ½â®ââ§âââ¢â¹âºâ â¥â¦â£â¨â»â"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-26"&gt;&lt;/a&gt;        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt; &lt;span class="s"&gt;"Downloading... check describe-char later"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_38fd8bf255c4468faf4334c3e504c32e-27"&gt;&lt;/a&gt;        &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Once this is run and it tells you to try &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;describe-char&lt;/span&gt;&lt;/code&gt; you can
position your cursor over one of the Unicode characters in the message
(âC-h eâ to display the â&lt;em&gt;Messages&lt;/em&gt;â buffer) and press âC-cDâ and look
for the âName:â line.  You'll see something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;      character: â» (299515, #o1110773, #x491fb, U+267B)
        charset: mule-unicode-2500-33ff (Unicode characters of the range U+2500..U+33FF.)
     code point: #x23 #x7B
         syntax: w    which means: word
    buffer code: #x9C #xF2 #xA3 #xFB
      file code: #xE2 #x99 #xBB (encoded by coding system mule-utf-8)
        display: terminal code #xE2 #x99 #xBB
   Unicode data:
           Name: BLACK UNIVERSAL RECYCLING SYMBOL
       Category: other symbol
Combining class: Spacing
  Bidi category: Other Neutrals&lt;/pre&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://tkurtbond.github.io/posts/2008/08/15/fun-with-emacs-unicode-and-describe-char/</guid><pubDate>Fri, 15 Aug 2008 17:07:21 GMT</pubDate></item></channel></rss>