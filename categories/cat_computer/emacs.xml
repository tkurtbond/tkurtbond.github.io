<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lacking Natural Simplicity (Posts about emacs)</title><link>https://tkurtbond.github.io/</link><description></description><atom:link href="https://tkurtbond.github.io/categories/cat_computer/emacs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:tkurtbond@gmail.com"&gt;T. Kurt Bond&lt;/a&gt; </copyright><lastBuildDate>Sun, 10 Jul 2022 22:45:46 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Recording the books I read with org-mode and org-capture</title><link>https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;I used to record the books that I read on this &lt;a class="reference external" href="https://tkurtbond.github.io/categories/recent-reading/"&gt;blog&lt;/a&gt;, but that took
too much &lt;a class="reference external" href="https://tkurtbond.github.io/posts/2010/07/21/reading-but-not-recording/"&gt;effort&lt;/a&gt;.  However, if I don't record the books I read, I
sometimes can't remember whether I read a particular book or not,
especially with Kindle Unlimited books.  (Was it the seventh book of
the series that I read last, or the eighth?)&lt;/p&gt;
&lt;p&gt;I record the books that I read in &lt;a class="reference external" href="https://www.gnu.org/software/emacs/"&gt;emacs&lt;/a&gt; using &lt;a class="reference external" href="https://orgmode.org/"&gt;org-mode&lt;/a&gt; and —
since today — &lt;a class="reference external" href="ttps://orgmode.org/manual/Capture.html"&gt;org-capture&lt;/a&gt;.  Here's what the org file looks like:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_66ac0f63afe44285b46748e9bf712b98-1" name="rest_code_66ac0f63afe44285b46748e9bf712b98-1" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_66ac0f63afe44285b46748e9bf712b98-1"&gt;&lt;/a&gt;* 2022
&lt;a id="rest_code_66ac0f63afe44285b46748e9bf712b98-2" name="rest_code_66ac0f63afe44285b46748e9bf712b98-2" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_66ac0f63afe44285b46748e9bf712b98-2"&gt;&lt;/a&gt;** Read
&lt;a id="rest_code_66ac0f63afe44285b46748e9bf712b98-3" name="rest_code_66ac0f63afe44285b46748e9bf712b98-3" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_66ac0f63afe44285b46748e9bf712b98-3"&gt;&lt;/a&gt;*** : Title of Book I Haven't Finished Reading -- https://www.amazon.com/amazon-book-link-if-it-exists
&lt;a id="rest_code_66ac0f63afe44285b46748e9bf712b98-4" name="rest_code_66ac0f63afe44285b46748e9bf712b98-4" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_66ac0f63afe44285b46748e9bf712b98-4"&gt;&lt;/a&gt;...
&lt;a id="rest_code_66ac0f63afe44285b46748e9bf712b98-5" name="rest_code_66ac0f63afe44285b46748e9bf712b98-5" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_66ac0f63afe44285b46748e9bf712b98-5"&gt;&lt;/a&gt;*** 2022-05-21: Title of Book I **Have** Finished Reading -- https://www.amazon.com/amazon-book-link-if-it-exists
&lt;a id="rest_code_66ac0f63afe44285b46748e9bf712b98-6" name="rest_code_66ac0f63afe44285b46748e9bf712b98-6" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_66ac0f63afe44285b46748e9bf712b98-6"&gt;&lt;/a&gt;...
&lt;a id="rest_code_66ac0f63afe44285b46748e9bf712b98-7" name="rest_code_66ac0f63afe44285b46748e9bf712b98-7" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_66ac0f63afe44285b46748e9bf712b98-7"&gt;&lt;/a&gt;** Did not finish
&lt;a id="rest_code_66ac0f63afe44285b46748e9bf712b98-8" name="rest_code_66ac0f63afe44285b46748e9bf712b98-8" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_66ac0f63afe44285b46748e9bf712b98-8"&gt;&lt;/a&gt;*** : Title of Book I Won't Finish Reading -- https://www.amazon.com/amazon-book-link-if-it-exists
&lt;a id="rest_code_66ac0f63afe44285b46748e9bf712b98-9" name="rest_code_66ac0f63afe44285b46748e9bf712b98-9" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_66ac0f63afe44285b46748e9bf712b98-9"&gt;&lt;/a&gt;...
&lt;a id="rest_code_66ac0f63afe44285b46748e9bf712b98-10" name="rest_code_66ac0f63afe44285b46748e9bf712b98-10" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_66ac0f63afe44285b46748e9bf712b98-10"&gt;&lt;/a&gt;* 2021
&lt;a id="rest_code_66ac0f63afe44285b46748e9bf712b98-11" name="rest_code_66ac0f63afe44285b46748e9bf712b98-11" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_66ac0f63afe44285b46748e9bf712b98-11"&gt;&lt;/a&gt;* Previously read, sometime
&lt;a id="rest_code_66ac0f63afe44285b46748e9bf712b98-12" name="rest_code_66ac0f63afe44285b46748e9bf712b98-12" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_66ac0f63afe44285b46748e9bf712b98-12"&gt;&lt;/a&gt;** Title of Book I Finished Reading at some indeterminate date in the past -- https://www.amazon.com/amazon-book-link-if-it-exists
&lt;a id="rest_code_66ac0f63afe44285b46748e9bf712b98-13" name="rest_code_66ac0f63afe44285b46748e9bf712b98-13" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_66ac0f63afe44285b46748e9bf712b98-13"&gt;&lt;/a&gt;...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I keep the org file in a &lt;span class="app"&gt;git&lt;/span&gt; repository hosted online so I can
edit it on whatever computer is close at hand, or on my cell phone.
(Having a &lt;span class="app"&gt;git&lt;/span&gt; client with a simple editor on my phone is
wonderful!)&lt;/p&gt;
&lt;p&gt;When I start reading a book I create a new entry by selecting the
title and author of the book on its Amazon page, use the Chrome
extension Create Link to create a plain text link, which I then insert
into the org file at the right heading level and with a &lt;code class="docutils literal"&gt;:␢&lt;/code&gt; (a
colon followed by a blank space) after the asterisks of the heading
and before the link.  When I'm done with reading the book I put the
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO 8601&lt;/a&gt; date (&lt;em&gt;YYYY-MM-DD&lt;/em&gt;) before the colon.&lt;/p&gt;
&lt;p&gt;I wrote a script today to count how many books I've read so far this
year:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_fadc059b17a14c4eb339e89189508d59-1" name="rest_code_fadc059b17a14c4eb339e89189508d59-1" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_fadc059b17a14c4eb339e89189508d59-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#! /usr/bin/env bash&lt;/span&gt;
&lt;a id="rest_code_fadc059b17a14c4eb339e89189508d59-2" name="rest_code_fadc059b17a14c4eb339e89189508d59-2" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_fadc059b17a14c4eb339e89189508d59-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_fadc059b17a14c4eb339e89189508d59-3" name="rest_code_fadc059b17a14c4eb339e89189508d59-3" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_fadc059b17a14c4eb339e89189508d59-3"&gt;&lt;/a&gt;&lt;span class="nv"&gt;YEAR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date &lt;span class="s1"&gt;'+%Y'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;a id="rest_code_fadc059b17a14c4eb339e89189508d59-4" name="rest_code_fadc059b17a14c4eb339e89189508d59-4" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_fadc059b17a14c4eb339e89189508d59-4"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LAST_YEAR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;YEAR &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;
&lt;a id="rest_code_fadc059b17a14c4eb339e89189508d59-5" name="rest_code_fadc059b17a14c4eb339e89189508d59-5" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_fadc059b17a14c4eb339e89189508d59-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_fadc059b17a14c4eb339e89189508d59-6" name="rest_code_fadc059b17a14c4eb339e89189508d59-6" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_fadc059b17a14c4eb339e89189508d59-6"&gt;&lt;/a&gt;sed -E -n &lt;span class="s2"&gt;"/^\* &lt;/span&gt;&lt;span class="nv"&gt;$YEAR&lt;/span&gt;&lt;span class="s2"&gt;/,/^(\*\* Did not finish|\* &lt;/span&gt;&lt;span class="nv"&gt;$LAST_YEAR&lt;/span&gt;&lt;span class="s2"&gt;)/p"&lt;/span&gt; &lt;span class="nv"&gt;$READ_FILE&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_fadc059b17a14c4eb339e89189508d59-7" name="rest_code_fadc059b17a14c4eb339e89189508d59-7" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_fadc059b17a14c4eb339e89189508d59-7"&gt;&lt;/a&gt;    sed -e &lt;span class="s2"&gt;"/^* &lt;/span&gt;&lt;span class="nv"&gt;$YEAR&lt;/span&gt;&lt;span class="s2"&gt;/d"&lt;/span&gt; -e &lt;span class="s2"&gt;"/^** Read/d"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_fadc059b17a14c4eb339e89189508d59-8" name="rest_code_fadc059b17a14c4eb339e89189508d59-8" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_fadc059b17a14c4eb339e89189508d59-8"&gt;&lt;/a&gt;        -e &lt;span class="s2"&gt;"/^(\*\* Did not finish|\* &lt;/span&gt;&lt;span class="nv"&gt;$LAST_YEAR&lt;/span&gt;&lt;span class="s2"&gt;)/d"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_fadc059b17a14c4eb339e89189508d59-9" name="rest_code_fadc059b17a14c4eb339e89189508d59-9" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_fadc059b17a14c4eb339e89189508d59-9"&gt;&lt;/a&gt;    sed -E -n &lt;span class="s2"&gt;"/^\*\*\*[ \t]+[0-9]/p"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_fadc059b17a14c4eb339e89189508d59-10" name="rest_code_fadc059b17a14c4eb339e89189508d59-10" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_fadc059b17a14c4eb339e89189508d59-10"&gt;&lt;/a&gt;    wc -l
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gets all the lines for this year, or just up to the ones that I did not finish, if there are any yet, then gets read of the leading&lt;/p&gt;
&lt;p&gt;This works pretty well.&lt;/p&gt;
&lt;p&gt;And so far I've read 227 books this year.&lt;/p&gt;
&lt;p&gt;And then I got to thinking: I could probably use &lt;a class="reference external" href="ttps://orgmode.org/manual/Capture.html"&gt;org-capture&lt;/a&gt; to
automate finding the file, finding the right place to insert the
information, and then copying the link from the clipboard and
inserting it along with the heading formation!&lt;/p&gt;
&lt;p&gt;Here's the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;org-capture-templates&lt;/span&gt;&lt;/code&gt; value I use for this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_05df6c7e4dde4d48a31ab641e68833d9-1" name="rest_code_05df6c7e4dde4d48a31ab641e68833d9-1" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_05df6c7e4dde4d48a31ab641e68833d9-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;org-capture-templates&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_05df6c7e4dde4d48a31ab641e68833d9-2" name="rest_code_05df6c7e4dde4d48a31ab641e68833d9-2" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_05df6c7e4dde4d48a31ab641e68833d9-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Add book about to read"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;entry&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_05df6c7e4dde4d48a31ab641e68833d9-3" name="rest_code_05df6c7e4dde4d48a31ab641e68833d9-3" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_05df6c7e4dde4d48a31ab641e68833d9-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;file+olp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;expand-file-name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"~/Repos/tkb-org/Books/read.org"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_05df6c7e4dde4d48a31ab641e68833d9-4" name="rest_code_05df6c7e4dde4d48a31ab641e68833d9-4" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_05df6c7e4dde4d48a31ab641e68833d9-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format-time-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"%Y"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Read"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_05df6c7e4dde4d48a31ab641e68833d9-5" name="rest_code_05df6c7e4dde4d48a31ab641e68833d9-5" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_05df6c7e4dde4d48a31ab641e68833d9-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="s"&gt;"*** : %c"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;:prepend&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You'll want to read &lt;a class="reference external" href="https://orgmode.org/manual/Capture-templates.html"&gt;Capture templates&lt;/a&gt; to understand how this works.&lt;/p&gt;
&lt;p&gt;Of course, then I thought: what if my &lt;span class="app"&gt;emacs&lt;/span&gt; session lasts from
one year into the other, and I then add a new book?  It will have the
wrong year!&lt;/p&gt;
&lt;p&gt;And then I immediately thought of &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html"&gt;Advising Emacs Lisp Functions&lt;/a&gt;!
(I feel old — it was the &lt;code class="docutils literal"&gt;defadvice&lt;/code&gt; function when I started using
it.)&lt;/p&gt;
&lt;p&gt;So I added the following code:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_d3bcb107ec5044dab763678c641c4251-1" name="rest_code_d3bcb107ec5044dab763678c641c4251-1" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_d3bcb107ec5044dab763678c641c4251-1"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defvar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tkb-org-year&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format-time-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"%Y"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d3bcb107ec5044dab763678c641c4251-2" name="rest_code_d3bcb107ec5044dab763678c641c4251-2" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_d3bcb107ec5044dab763678c641c4251-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"The year the current emacs session was started, for use with org-capture."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d3bcb107ec5044dab763678c641c4251-3" name="rest_code_d3bcb107ec5044dab763678c641c4251-3" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_d3bcb107ec5044dab763678c641c4251-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tkb-org-capture-advice-update-year&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;&amp;amp;optional&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d3bcb107ec5044dab763678c641c4251-4" name="rest_code_d3bcb107ec5044dab763678c641c4251-4" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_d3bcb107ec5044dab763678c641c4251-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"Update ‘tkb-org-year’ and update the entry for adding a book in&lt;/span&gt;
&lt;a id="rest_code_d3bcb107ec5044dab763678c641c4251-5" name="rest_code_d3bcb107ec5044dab763678c641c4251-5" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_d3bcb107ec5044dab763678c641c4251-5"&gt;&lt;/a&gt;&lt;span class="s"&gt;‘org-capture-templates’ to use the new value."&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d3bcb107ec5044dab763678c641c4251-6" name="rest_code_d3bcb107ec5044dab763678c641c4251-6" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_d3bcb107ec5044dab763678c641c4251-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;new-year&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format-time-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"%Y"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d3bcb107ec5044dab763678c641c4251-7" name="rest_code_d3bcb107ec5044dab763678c641c4251-7" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_d3bcb107ec5044dab763678c641c4251-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unless&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string-equal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tkb-org-year&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;new-year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d3bcb107ec5044dab763678c641c4251-8" name="rest_code_d3bcb107ec5044dab763678c641c4251-8" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_d3bcb107ec5044dab763678c641c4251-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;setf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tkb-org-year&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;new-year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d3bcb107ec5044dab763678c641c4251-9" name="rest_code_d3bcb107ec5044dab763678c641c4251-9" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_d3bcb107ec5044dab763678c641c4251-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;setf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;assoc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;org-capture-templates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d3bcb107ec5044dab763678c641c4251-10" name="rest_code_d3bcb107ec5044dab763678c641c4251-10" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_d3bcb107ec5044dab763678c641c4251-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;assoc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'file+olp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;nth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;it&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d3bcb107ec5044dab763678c641c4251-11" name="rest_code_d3bcb107ec5044dab763678c641c4251-11" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_d3bcb107ec5044dab763678c641c4251-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="nv"&gt;tkb-org-year&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d3bcb107ec5044dab763678c641c4251-12" name="rest_code_d3bcb107ec5044dab763678c641c4251-12" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_d3bcb107ec5044dab763678c641c4251-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;advice-add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'org-capture&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;:before&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;#'&lt;/span&gt;&lt;span class="nv"&gt;tkb-org-capture-advice-update-year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I tested this by manually setting &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;tkb-org-year&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal"&gt;"2021"&lt;/code&gt; and
capturing a new book.  It worked fine!&lt;/p&gt;</description><category>advice-add</category><category>defadvice</category><category>emacs</category><category>emacs advice</category><category>org-capture</category><category>org-mode</category><category>reading</category><guid>https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/</guid><pubDate>Sat, 21 May 2022 11:17:18 GMT</pubDate></item><item><title>define-word results using wordnik stopped working</title><link>https://tkurtbond.github.io/posts/2021/09/13/define-word-results-using-wordnik-stopped-working/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;I use &lt;a class="reference external" href="https://github.com/abo-abo/define-word"&gt;define-word&lt;/a&gt;, a package from melpa (&lt;a class="reference external" href="https://melpa.org/#/define-word"&gt;DWM&lt;/a&gt;), that looks up the
definition of a word online.  It uses &lt;a class="reference external" href="http://wordnik.com/"&gt;wordnik.com&lt;/a&gt; by default.
Recently it stopped returning definitions.&lt;/p&gt;
&lt;p&gt;I did a little digging, and it turns out that it works when
you visit the url with Chrome, but not if you just try to download it
with curl, or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;url-retrieve&lt;/span&gt;&lt;/code&gt; in Emacs. Adding a
“&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;User-Agent:&lt;/span&gt; Mozilla/5.0 (Macintosh; Intel Mac OS X 11_5_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36&lt;/code&gt;”
with curl’s -H option made it work.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_6640bc9d5a494b0ba32557ed6f06eb39-1" name="rest_code_6640bc9d5a494b0ba32557ed6f06eb39-1" href="https://tkurtbond.github.io/posts/2021/09/13/define-word-results-using-wordnik-stopped-working/#rest_code_6640bc9d5a494b0ba32557ed6f06eb39-1"&gt;&lt;/a&gt;curl -i -H &lt;span class="s1"&gt;'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 11_5_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36'&lt;/span&gt; http://wordnik.com/words/importunate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So I added a &lt;code class="docutils literal"&gt;let&lt;/code&gt; in my advice for &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;define-word&lt;/span&gt;&lt;/code&gt; that binds
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;url-request-extra-headers&lt;/span&gt;&lt;/code&gt; to an alist with &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;"User-Agent"&lt;/span&gt;&lt;/code&gt; as the
key and &lt;code class="docutils literal"&gt;"Mozilla/5.0 (Macintosh; Intel Mac OS X 11_5_2)
AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63
Safari/537.36"&lt;/code&gt; as the value, and it works again.&lt;/p&gt;
&lt;p&gt;My solution looks something like this (simplified from my actual advice,
which does other things too):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_66e3ba5329344b3c865489ccd6fcc74b-1" name="rest_code_66e3ba5329344b3c865489ccd6fcc74b-1" href="https://tkurtbond.github.io/posts/2021/09/13/define-word-results-using-wordnik-stopped-working/#rest_code_66e3ba5329344b3c865489ccd6fcc74b-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defadvice&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;define-word&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;around&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;your-around-define-word&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_66e3ba5329344b3c865489ccd6fcc74b-2" name="rest_code_66e3ba5329344b3c865489ccd6fcc74b-2" href="https://tkurtbond.github.io/posts/2021/09/13/define-word-results-using-wordnik-stopped-working/#rest_code_66e3ba5329344b3c865489ccd6fcc74b-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"Dynamically bind tkb-define-word-word to the word passed in."&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_66e3ba5329344b3c865489ccd6fcc74b-3" name="rest_code_66e3ba5329344b3c865489ccd6fcc74b-3" href="https://tkurtbond.github.io/posts/2021/09/13/define-word-results-using-wordnik-stopped-working/#rest_code_66e3ba5329344b3c865489ccd6fcc74b-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;url-request-extra-headers&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_66e3ba5329344b3c865489ccd6fcc74b-4" name="rest_code_66e3ba5329344b3c865489ccd6fcc74b-4" href="https://tkurtbond.github.io/posts/2021/09/13/define-word-results-using-wordnik-stopped-working/#rest_code_66e3ba5329344b3c865489ccd6fcc74b-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"User-Agent"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Mozilla/5.0 (Macintosh; Intel Mac OS X 11_5_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36"&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_66e3ba5329344b3c865489ccd6fcc74b-5" name="rest_code_66e3ba5329344b3c865489ccd6fcc74b-5" href="https://tkurtbond.github.io/posts/2021/09/13/define-word-results-using-wordnik-stopped-working/#rest_code_66e3ba5329344b3c865489ccd6fcc74b-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;ad-do-it&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I opened an &lt;a class="reference external" href="https://github.com/abo-abo/define-word/issues/31"&gt;issue&lt;/a&gt; on github, suggesting it might be a good idea to
add a simpler way to add a &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;User-Agent:&lt;/span&gt;&lt;/code&gt; header around
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;define-word--to-string&lt;/span&gt;&lt;/code&gt;’s call to &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;url-retrieve-synchronously&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;</description><category>define-word</category><category>emacs</category><category>wordnik</category><guid>https://tkurtbond.github.io/posts/2021/09/13/define-word-results-using-wordnik-stopped-working/</guid><pubDate>Mon, 13 Sep 2021 19:48:30 GMT</pubDate></item><item><title>Gitub repo for Arrow Macros for Emacs</title><link>https://tkurtbond.github.io/posts/2021/09/07/gitub-repo-for-arrow-macros-for-emacs/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;I've added a &lt;a class="reference external" href="https://github.com/tkurtbond/arrow-macros-for-emacs"&gt;Github repository&lt;/a&gt; for my port of &lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;CL-Arrows&lt;/a&gt; to
Emacs Lisp (&lt;a class="reference external" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/"&gt;original post&lt;/a&gt;), at the insistence of CPB.&lt;/p&gt;</description><category>arrow macros</category><category>clojure</category><category>common lisp</category><category>emacs</category><category>emacs lisp</category><guid>https://tkurtbond.github.io/posts/2021/09/07/gitub-repo-for-arrow-macros-for-emacs/</guid><pubDate>Tue, 07 Sep 2021 16:07:48 GMT</pubDate></item><item><title>defadvice lets you improve existing functions!</title><link>https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;I used &lt;code class="docutils literal"&gt;defadvice&lt;/code&gt; in emacs lisp and it made the world so much
better!&lt;/p&gt;
&lt;p&gt;Specifically, I use the function &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;smart-unicode-hyphen&lt;/span&gt;&lt;/code&gt; from
&lt;span class="file"&gt;xmlunicode.el&lt;/span&gt; &lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#tkb-smart-unicode-mode" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; when entering text
that is to be typeset.  The first time you hit hyphen it inserts a
hyphen.  The second time you hit hyphen it changes it to an em dash.
The third time you hit hyphen it changes it to an en dash.  If you hit
it again it changes it back to a hyphen.  Unfortunately, I’ve never
found a monospaced font that has em dashes and en dashes that are
distinguishable from hyphens visually.  (Not to mention the minus
character, which is also important to enter correctly for
typesetting.)  So it is hard to tell what character you have just
inserted, especially since you have to remember which comes after
which in the sequence.&lt;/p&gt;
&lt;aside class="footnote brackets" id="tkb-smart-unicode-mode" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Specifically, I have a very small minor mode that makes hyphens,
double and single quotes, and periods smart, so they insert the
proper Unicode characters in the right situations.&lt;/p&gt;
&lt;/aside&gt;
&lt;p&gt;But I have a function tkb-describe-character that looks up the
character under the cursor (or before, if you specified a prefix
interactively or a value when called non-interactively) that looks up
the character in the variable unicode-character-list (which is defined
in &lt;span class="file"&gt;unichars.el&lt;/span&gt;) and contains the character values and unicode
names for the characters.&lt;/p&gt;
&lt;p&gt;So, I wrote a &lt;code class="docutils literal"&gt;defadvice&lt;/code&gt; function that runs
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(tkb-describe-character&lt;/span&gt; t)&lt;/code&gt; after &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;smart-unicode-hyphen&lt;/span&gt;&lt;/code&gt; runs, so
it looks at the character just before it and describes it, so I know
what it is!&lt;/p&gt;
&lt;p&gt;It works wonderfully!&lt;/p&gt;
&lt;p&gt;That's the thing about &lt;code class="docutils literal"&gt;defadvice&lt;/code&gt;: it lets you customize functions
to better adapt them to how you need to work.  Another way emacs lets
you customize it to better suit your needs.&lt;/p&gt;
&lt;p&gt;I got my copies of &lt;span class="file"&gt;xmlunicode.el&lt;/span&gt; (copyright 2003 by Norman
Walsh) and &lt;span class="file"&gt;unichars.el&lt;/span&gt; (unattributed) off the Internet long
ago.  It looks like you can get &lt;span class="file"&gt;xmlunicode.el&lt;/span&gt; from his
&lt;a class="reference external" href="https://github.com/ndw/xmlunicode"&gt;xmlunicode&lt;/a&gt; github repository, and it looks like the replacement for
&lt;span class="file"&gt;unichars.el&lt;/span&gt; is &lt;span class="file"&gt;xmlunicode-character-list.el&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Here's my code:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-1" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-1" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;; look at https://github.com/ndw/xmlunicode for xmlunicode.el and a way&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-2" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-2" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;; to make something like unichars.el.  xmlunicode.el provides the&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-3" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-3" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;; "smart-unicode-*" functions.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-4" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-4" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;load-library&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"xmlunicode"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-5" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-5" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;load-library&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"unichars"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-6" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-6" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-6"&gt;&lt;/a&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-7" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-7" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tkb-describe-character&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;before&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-8" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-8" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"Describe the character after point (before if a prefix was specified)&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-9" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-9" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-9"&gt;&lt;/a&gt;&lt;span class="s"&gt;if it is a unicode character."&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-10" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-10" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interactive&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"P"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-11" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-11" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;before&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;char-before&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;char-after&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-12" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-12" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;assoc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;encode-char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'ucs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;unicode-character-list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-13" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-13" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;info&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cons&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"#x%X"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;car&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;info&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-14" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-14" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"%S"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-15" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-15" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-15"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;tkb-keys&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"C-c k d"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;#'&lt;/span&gt;&lt;span class="nv"&gt;tkb-describe-character&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-16" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-16" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-16"&gt;&lt;/a&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-17" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-17" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-17"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;define-minor-mode&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tkb-smart-unicode-mode&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-18" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-18" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-18"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"Toggle smart unicode punctuation"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;" ♻⚔☣☥☸◉⅙✽☮"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="c1"&gt;; "✘▧▧⚅☑☢☹☺♠♥♦♣♨"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-19" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-19" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-19"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"\""&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;unicode-smart-double-quote&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-20" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-20" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-20"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"'"&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;unicode-smart-single-quote&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-21" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-21" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-21"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;unicode-smart-hyphen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-22" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-22" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-22"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;unicode-smart-period&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-23" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-23" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-23"&gt;&lt;/a&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-24" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-24" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-24"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defadvice&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;unicode-smart-hyphen&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;after&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tkb-after-unicode-smart-hyphen&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;last&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-25" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-25" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-25"&gt;&lt;/a&gt;&lt;span class="w"&gt;                                       &lt;/span&gt;&lt;span class="nv"&gt;activate&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d475f423fc2d4ee797d3d5792d4210bb-26" name="rest_code_d475f423fc2d4ee797d3d5792d4210bb-26" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#rest_code_d475f423fc2d4ee797d3d5792d4210bb-26"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;tkb-describe-character&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's a &lt;a class="reference external" href="https://gist.github.com/tkurtbond/3dad54a2141422f39033533e72f53110"&gt;gist&lt;/a&gt;, and the &lt;a class="reference external" href="https://gist.githubusercontent.com/tkurtbond/3dad54a2141422f39033533e72f53110/raw/f1dc635d64fae89d1202142583df39544a87d7b8/tkb-smart-unicode-mode.el"&gt;raw&lt;/a&gt; gist if you want to download it directly.&lt;/p&gt;</description><guid>https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/</guid><pubDate>Mon, 12 Jul 2021 02:28:21 GMT</pubDate></item><item><title>Arrow Macros in Emacs Lisp</title><link>https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;Are you familiar with arrow macros?  (They have nothing to do with
&lt;a class="reference external" href="https://en.wikibooks.org/wiki/Haskell/Understanding_arrows"&gt;arrows in Haskell&lt;/a&gt;.) They started out in &lt;a class="reference external" href="https://clojure.org/"&gt;Clojure&lt;/a&gt;, I think, and have
been ported to &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_Lisp"&gt;Common Lisp&lt;/a&gt; and probably other Lisps, though I didn't
find one for &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt;.  I think the &lt;a class="reference external" href="https://github.com/Harleqin/arrows"&gt;arrows&lt;/a&gt; package is the most up
to date in &lt;a class="reference external" href="https://www.quicklisp.org/"&gt;Quicklisp&lt;/a&gt; for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_Lisp"&gt;Common Lisp&lt;/a&gt;, but I found the &lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;
package first so that's the one I converted to &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; today.&lt;/p&gt;
&lt;p&gt;There were two slightly tricky parts to the port&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;I needed to use lexical binding for the source file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;'s test suite used fractions, but &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; doesn't
have them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyway, I think they're very useful.  If you have a value and
you want it to be processed by several functions in a chain you
can use an arrow macro instead of using lots of nested function
calls. For instance,&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_8283c3dd4a144f798dde1bc2f14e551a-1" name="rest_code_8283c3dd4a144f798dde1bc2f14e551a-1" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_8283c3dd4a144f798dde1bc2f14e551a-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"^-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"^-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-\\."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is annoying and hard to read on one line.  If you split it into multiple lines&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-1" name="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-1" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-2" name="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-2" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-2"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-3" name="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-3" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-3"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-4" name="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-4" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"^-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-5" name="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-5" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-6" name="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-6" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;"^-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-7" name="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-7" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-8" name="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-8" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"\\.+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-9" name="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-9" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-10" name="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-10" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="s"&gt;"\\.-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-11" name="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-11" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-12" name="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-12" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s"&gt;"-\\."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-13" name="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-13" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-14" name="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-14" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="s"&gt;"-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-15" name="rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-15" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_2cc9bb38a5f34850aa8a49b6be4d077d-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;that's also pretty horrible.  To read it you have to skip to the end,
figure out that function call, then skip back to the next function
call, and so forth, until you get back to the last function call,
reading it from inside out.  It looks much better if you use the
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; arrow macro, which substitutes the value you are passing along
as the last argument to the functions you are calling:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_d30786ed79d34524af260b428171cf16-1" name="rest_code_d30786ed79d34524af260b428171cf16-1" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_d30786ed79d34524af260b428171cf16-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d30786ed79d34524af260b428171cf16-2" name="rest_code_d30786ed79d34524af260b428171cf16-2" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_d30786ed79d34524af260b428171cf16-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d30786ed79d34524af260b428171cf16-3" name="rest_code_d30786ed79d34524af260b428171cf16-3" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_d30786ed79d34524af260b428171cf16-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d30786ed79d34524af260b428171cf16-4" name="rest_code_d30786ed79d34524af260b428171cf16-4" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_d30786ed79d34524af260b428171cf16-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-\\."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d30786ed79d34524af260b428171cf16-5" name="rest_code_d30786ed79d34524af260b428171cf16-5" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_d30786ed79d34524af260b428171cf16-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d30786ed79d34524af260b428171cf16-6" name="rest_code_d30786ed79d34524af260b428171cf16-6" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_d30786ed79d34524af260b428171cf16-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d30786ed79d34524af260b428171cf16-7" name="rest_code_d30786ed79d34524af260b428171cf16-7" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_d30786ed79d34524af260b428171cf16-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"^-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d30786ed79d34524af260b428171cf16-8" name="rest_code_d30786ed79d34524af260b428171cf16-8" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_d30786ed79d34524af260b428171cf16-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I also think it is more understandable than the highly nested calls,
since you can follow along in from start to finish, rather than from
inside out: you've got the value, you pass it to the first function,
then to the second, and so forth.&lt;/p&gt;
&lt;p&gt;There are also macros to insert the value at the front of the argument
list (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt;&lt;/code&gt;) and to insert the value where a &lt;code class="docutils literal"&gt;&amp;lt;&amp;gt;&lt;/code&gt; symbol is found
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I wrote some &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; code with the last expression above today, and
I think it makes a good example of why they are useful.&lt;/p&gt;
&lt;p&gt;Here's the use case that inspired me to port them to &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs
Lisp&lt;/a&gt;.  When I save things from the internet I often want to
create a directory to save them in based on the filename or
some text on a web page or something, but usually there are
spaces or special characters in that text, so I have to
sanitize the text to make it a safe and simple filename.  So I
need to replace all special characters with dashes.  But I
don't want dashes repeated multiple times, just a single dash,
and I don't want dashes followed or preceded by periods, only
the period.&lt;/p&gt;
&lt;p&gt;Here' s some code to do that:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_126902a6335d413bba990fed20673313-1" name="rest_code_126902a6335d413bba990fed20673313-1" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tkb-sanitize-for-filename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-2" name="rest_code_126902a6335d413bba990fed20673313-2" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"Clean up characters in STRING that aren't good for&lt;/span&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-3" name="rest_code_126902a6335d413bba990fed20673313-3" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-3"&gt;&lt;/a&gt;&lt;span class="s"&gt;filenames."&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-4" name="rest_code_126902a6335d413bba990fed20673313-4" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-5" name="rest_code_126902a6335d413bba990fed20673313-5" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-6" name="rest_code_126902a6335d413bba990fed20673313-6" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-7" name="rest_code_126902a6335d413bba990fed20673313-7" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-\\."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-8" name="rest_code_126902a6335d413bba990fed20673313-8" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-9" name="rest_code_126902a6335d413bba990fed20673313-9" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-10" name="rest_code_126902a6335d413bba990fed20673313-10" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"^-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-11" name="rest_code_126902a6335d413bba990fed20673313-11" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-12" name="rest_code_126902a6335d413bba990fed20673313-12" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-13" name="rest_code_126902a6335d413bba990fed20673313-13" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tkb-sanitize-kill-for-filename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-14" name="rest_code_126902a6335d413bba990fed20673313-14" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"Clean up characters that aren't good for filenames in the&lt;/span&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-15" name="rest_code_126902a6335d413bba990fed20673313-15" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-15"&gt;&lt;/a&gt;&lt;span class="s"&gt;top of the kill&lt;/span&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-16" name="rest_code_126902a6335d413bba990fed20673313-16" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-16"&gt;&lt;/a&gt;&lt;span class="s"&gt;ring and put the result on the top of the kill ring."&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-17" name="rest_code_126902a6335d413bba990fed20673313-17" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;;; gets the kill or the system clipboard if it is new.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-18" name="rest_code_126902a6335d413bba990fed20673313-18" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-18"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interactive&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-kill&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-19" name="rest_code_126902a6335d413bba990fed20673313-19" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-19"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;new-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;tkb-sanitize-for-filename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-20" name="rest_code_126902a6335d413bba990fed20673313-20" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-20"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Old string: %s\nNew String: %s"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;new-string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-21" name="rest_code_126902a6335d413bba990fed20673313-21" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-21"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kill-new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;new-string&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-22" name="rest_code_126902a6335d413bba990fed20673313-22" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-22"&gt;&lt;/a&gt;
&lt;a id="rest_code_126902a6335d413bba990fed20673313-23" name="rest_code_126902a6335d413bba990fed20673313-23" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_126902a6335d413bba990fed20673313-23"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"C-c k S"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'tkb-sanitize-kill-for-filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the function &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;tkb-sanitize-kill-for-filename&lt;/span&gt;&lt;/code&gt; that I use
interactively gets uses &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(current-kill&lt;/span&gt; 0 t)&lt;/code&gt; because it either
returns the top of the kill ring, or if the system clipboard is newer
it puts that on top of the kill ring and returns it.  (The docstring
of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;current-kill&lt;/span&gt;&lt;/code&gt; makes that a little difficult to figure out.)&lt;/p&gt;
&lt;p&gt;So if I have the name of a product as
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;"***Flashy####Product%%%%Name!!!!"&lt;/span&gt;&lt;/code&gt; I copy that to the clipboard
with &lt;span class="key"&gt;⌘-C&lt;/span&gt;, switch to emacs, do &lt;span class="key"&gt;C-c k S&lt;/span&gt;, switch back to
whatever program is saving the file, and use the generated,
sanitized name &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Flashy-Product-Name&lt;/span&gt;&lt;/code&gt; with &lt;span class="key"&gt;⌘-V&lt;/span&gt;.  Nifty!&lt;/p&gt;
&lt;p&gt;(And if you've ever wondered what the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Unicode"&gt;Unicode&lt;/a&gt; character for the Mac
keyboard &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Command_key"&gt;Command key&lt;/a&gt; (⌘) is, it is the PLACE OF INTEREST SIGN, and
you can enter it in &lt;span class="app"&gt;Emacs&lt;/span&gt; by &lt;span class="key"&gt;C-x 8 RETURN PLACE OF
INTEREST SIGN⏎&lt;/span&gt;.  The symbol they use for for the key labeled alt and
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Option_key"&gt;option&lt;/a&gt; (⌥) is the Unicode OPTION KEY, and the symbol they use for
the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Shift_key"&gt;Shift Key&lt;/a&gt; (⇧) is UPWARDS WHITE ARROW.  I'm surprised they
don't have a special symbol for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Control_key"&gt;Control&lt;/a&gt;, but it looks like they just
use the plain ASCII ^, known in Unicode as CIRCUMFLEX ACCENT.)&lt;/p&gt;
&lt;p&gt;Anyway, &lt;a class="reference external" href="https://tkurtbond.github.io/arrows-for-emacs.zip"&gt;here&lt;/a&gt;'s a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Info-ZIP"&gt;ZIP&lt;/a&gt; file with the Emacs Lisp source for the arrow
macros so you can use them if you've been convinced of their
usefulness by this post.  It also has some minimal documentation in
the &lt;span class="file"&gt;README.md&lt;/span&gt; that came from the &lt;span class="file"&gt;README.md&lt;/span&gt; from
&lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;, which seems to repeat the information from the
docstrings for the macros.&lt;/p&gt;
&lt;section id="section-1"&gt;
&lt;h2&gt;2021-09-07&lt;/h2&gt;
&lt;p&gt;Now in a &lt;a class="reference external" href="https://github.com/tkurtbond/arrow-macros-for-emacs"&gt;Gitub repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Last edited: 2021-09-07 13:25:09 EDT&lt;/em&gt;&lt;/p&gt;
&lt;!-- Local Variables:
time-stamp-format: "%Y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "\\*Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
time-stamp-line-limit: -20
End: --&gt;
&lt;/section&gt;</description><category>arrow macros</category><category>clojure</category><category>common lisp</category><category>emacs</category><category>emacs lisp</category><category>unicode</category><guid>https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/</guid><pubDate>Fri, 03 Jul 2020 18:11:16 GMT</pubDate></item><item><title>Defining keys in the C-x 8 prefix keymap</title><link>https://tkurtbond.github.io/posts/2012/10/03/defining-keys-in-the-c-x-8-prefix-keymap/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;Yay!  I finally found it!&lt;/p&gt;
&lt;p&gt;Suppose you hate typing “C-x 8 RET GREEK SMALL LETTER LAMBDA” to
insert a lowercase lambda character in emacs (perhaps because you have
a dull American keyboard and aren't very savvy to input methods).  You
can add a key definition to the “C-x 8 prefix keymap”, say “gl”, so
you can type “C-x 8 g l” and insert a lowercase lambda.&lt;/p&gt;
&lt;p&gt;Here's how you might do it for “λ”, “Λ”, and “§”:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(load-library "iso-transl.el")
(iso-transl-define-keys '(("gl" . [?λ])   ; greek lowercase lambda
                          ("gL" . [?Λ])   ; greek uppercase lambda
                          ("ps" . [?§]))) ; punctuation SECTION SIGN&lt;/pre&gt;</description><category>emacs</category><category>emacs lisp</category><category>key translation</category><category>unicode</category><guid>https://tkurtbond.github.io/posts/2012/10/03/defining-keys-in-the-c-x-8-prefix-keymap/</guid><pubDate>Thu, 04 Oct 2012 04:54:40 GMT</pubDate></item><item><title>Multics Emacs programmed by secretaries</title><link>https://tkurtbond.github.io/posts/2012/06/15/multics-emacs-programmed-by-secretaries/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;RMS &lt;a class="reference external" href="http://www.gnu.org/gnu/rms-lisp.html"&gt;relates&lt;/a&gt; how programming Multics Emacs was so convenient that secretaries started to learn to use it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;… The language that you build your extensions on shouldn't be
thought of as a programming language in afterthought; it should be
designed as a programming language. In fact, we discovered that
the best programming language for that purpose was Lisp.&lt;/p&gt;
&lt;p&gt;It was Bernie Greenberg, who discovered that it was (5). He wrote
a version of Emacs in Multics MacLisp, and he wrote his commands
in MacLisp in a straightforward fashion. The editor itself was
written entirely in Lisp. Multics Emacs proved to be a great
success — programming new editing commands was so convenient that
even the secretaries in his office started learning how to use
it. They used a manual someone had written which showed how to
extend Emacs, but didn't say it was a programming. So the
secretaries, who believed they couldn't do programming, weren't
scared off. They read the manual, discovered they could do useful
things and they learned to program.&lt;/p&gt;
&lt;p&gt;So Bernie saw that an application — a program that does something
useful for you — which has Lisp inside it and which you could
extend by rewriting the Lisp programs, is actually a very good way
for people to learn programming. It gives them a chance to write
small programs that are useful for them, which in most arenas you
can't possibly do. They can get encouragement for their own
practical use — at the stage where it's the hardest — where they
don't believe they can program, until they get to the point where
they are programmers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- Wasn't troff also used by secretaries? --&gt;</description><category>emacs</category><category>lisp</category><category>programming</category><guid>https://tkurtbond.github.io/posts/2012/06/15/multics-emacs-programmed-by-secretaries/</guid><pubDate>Fri, 15 Jun 2012 14:10:09 GMT</pubDate></item><item><title>Emacs 23.1 and Wanderlust</title><link>https://tkurtbond.github.io/posts/2009/09/25/emacs-23.1-and-wanderlust/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;To get UTF-8 to work when sending drafted messages  in &lt;a class="reference external" href="http://www.gohome.org/wl/"&gt;Wanderlust&lt;/a&gt; with
Emacs 23.1 I had to apply this &lt;a class="reference external" href="http://article.gmane.org/gmane.mail.wanderlust.general.japanese/5978"&gt;patch&lt;/a&gt; to FLIM.&lt;/p&gt;
&lt;p&gt;I also checked out the wl-2_15_6-vtl branch in the wanderlust
repository and the semi-1_14-vtl branch in the semi repository.
(See &lt;a class="reference external" href="https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/"&gt;repos&lt;/a&gt; for info about the repositories.)&lt;/p&gt;</description><category>emacs</category><category>wanderlust</category><guid>https://tkurtbond.github.io/posts/2009/09/25/emacs-23.1-and-wanderlust/</guid><pubDate>Fri, 25 Sep 2009 19:34:41 GMT</pubDate></item><item><title>Wanderlust, APEL, FLIM, and SEMI development</title><link>https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;Someone once said something along the lines that to those in the
Western world who don't speak Japanese there is an alternate
universe of FOSS &lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/#foss" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; development in Japan &lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/#china" id="footnote-reference-2" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;2&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;, and every so
often things from that universe just appear in the Western FOSS
universe as mysterious foreign objects.  Ruby seems to have made a
solid connection between the universes, but many others are less
approachable.&lt;/p&gt;
&lt;p&gt;Wanderlust development and the development of the emacs packages that
it depends on (APEL, FLIM, and SEMI) feel like that to me.  Some of
them have web pages, but they're usually quite out of date.  It can be
difficult find to their CVS repositories, and even more difficult to find
the browse-able web interfaces to their CVS repositories.  Every time
I want to look at the code, I have to figure this all out again, hence
this post.&lt;/p&gt;
&lt;p&gt;There was a &lt;a class="reference external" href="http://lists.airs.net/wl-en/archive/200905/msg00099.html"&gt;post&lt;/a&gt; on the Wanderlust English-language mailing list from
Katsumi Yamaoka &amp;lt;&lt;a class="reference external" href="mailto:yamaoka@jpl.org"&gt;yamaoka@jpl.org&lt;/a&gt;&amp;gt; on Wednesday, 27 May 2009 that gave
the location of the APEL, FLIM, and SEMI cvs repositories, and
mentioned that development in the FLIM and SEMI repositories was
taking place under the flim_1_14 and semi_1_14 branches, respectively.
The post also said that the place for discussion about APEL is the
APEL mailing lists:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="mailto:apel-en@m17n.org"&gt;apel-en@m17n.org&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="mailto:apel-ja@m17n.org"&gt;apel-ja@m17n.org&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;To subscribe, send an empty e-mail to &lt;a class="reference external" href="mailto:apel-en-ctl@m17n.org"&gt;apel-en-ctl@m17n.org&lt;/a&gt; and/or
&lt;a class="reference external" href="mailto:apel-ja-ctl@m17n.org"&gt;apel-ja-ctl@m17n.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The place to discuss FLIM and SEMI is the EMACS-MIME mailing
list:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="mailto:emacs-mime-en@m17n.org"&gt;emacs-mime-en@m17n.org&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="mailto:emacs-mime-ja@m17n.org"&gt;emacs-mime-ja@m17n.org&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;To subscribe, send an e-mail containing “subscribe YOUR NAME” in its
contents to &lt;a class="reference external" href="mailto:emacs-mime-en-ctl@m17n.org"&gt;emacs-mime-en-ctl@m17n.org&lt;/a&gt; and/or
&lt;a class="reference external" href="mailto:emacs-mime-ja-ctl@m17n.org"&gt;emacs-mime-ja-ctl@m17n.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, here are the CVS commands I just used to check the various
packages out:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_5ebd0ec6789a4cd49eb950415908821b-1" name="rest_code_5ebd0ec6789a4cd49eb950415908821b-1" href="https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/#rest_code_5ebd0ec6789a4cd49eb950415908821b-1"&gt;&lt;/a&gt;cvs -d :pserver:anonymous@cvs.m17n.org:/cvs/root checkout wanderlust
&lt;a id="rest_code_5ebd0ec6789a4cd49eb950415908821b-2" name="rest_code_5ebd0ec6789a4cd49eb950415908821b-2" href="https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/#rest_code_5ebd0ec6789a4cd49eb950415908821b-2"&gt;&lt;/a&gt;cvs -z9 -d :pserver:anonymous@cvs.m17n.org:/cvs/root checkout apel
&lt;a id="rest_code_5ebd0ec6789a4cd49eb950415908821b-3" name="rest_code_5ebd0ec6789a4cd49eb950415908821b-3" href="https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/#rest_code_5ebd0ec6789a4cd49eb950415908821b-3"&gt;&lt;/a&gt;cvs -z9 -d :pserver:anonymous@cvs.m17n.org:/cvs/root checkout -r flim-1_14 flim
&lt;a id="rest_code_5ebd0ec6789a4cd49eb950415908821b-4" name="rest_code_5ebd0ec6789a4cd49eb950415908821b-4" href="https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/#rest_code_5ebd0ec6789a4cd49eb950415908821b-4"&gt;&lt;/a&gt;cvs -z9 -d :pserver:anonymous@cvs.m17n.org:/cvs/root checkout -r semi-1_14 semi
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here are the browse-able CVS web interfaces:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://cvs.m17n.org/viewcvs/root/wanderlust/"&gt;http://cvs.m17n.org/viewcvs/root/wanderlust/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://cvs.m17n.org/viewcvs/root/apel/"&gt;http://cvs.m17n.org/viewcvs/root/apel/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://cvs.m17n.org/viewcvs/root/flim/"&gt;http://cvs.m17n.org/viewcvs/root/flim/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://cvs.m17n.org/viewcvs/root/semi/"&gt;http://cvs.m17n.org/viewcvs/root/semi/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;aside class="footnote brackets" id="foss" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;&lt;strong&gt;F&lt;/strong&gt;ree or &lt;strong&gt;O&lt;/strong&gt;pen &lt;strong&gt;S&lt;/strong&gt;ource &lt;strong&gt;S&lt;/strong&gt;oftware.&lt;/p&gt;
&lt;/aside&gt;
&lt;aside class="footnote brackets" id="china" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/#footnote-reference-2"&gt;2&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;I wonder if there is a Chinese alternate universe of FOSS,
too?&lt;/p&gt;
&lt;/aside&gt;</description><category>apel</category><category>e-mail</category><category>flim</category><category>semi</category><category>wanderlust</category><guid>https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/</guid><pubDate>Wed, 02 Sep 2009 14:01:26 GMT</pubDate></item><item><title>Emacs and Cygwin python</title><link>https://tkurtbond.github.io/posts/2008/12/15/emacs-and-cygwin-python/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;If you happen to be using &lt;a class="reference external" href="http://www.gnu.org/software/emacs/windows/ntemacs.html"&gt;Windows Emacs&lt;/a&gt; and &lt;a class="reference external" href="http://www.cygwin.com/"&gt;Cygwin&lt;/a&gt; &lt;a class="reference external" href="http://www.python.org/"&gt;Python&lt;/a&gt; there's
an annoying interaction where “M-x run-python” hangs.  The easiest way
to fix it is to mount the directory where you have your emacs
installation into the Cygwin file name structure.  For instance, I
have my emacs installation in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;C:\emacs\emacs-22.2&lt;/span&gt;&lt;/code&gt;, and in a
cygwin shell I did &lt;code class="docutils literal"&gt;mount &lt;span class="pre"&gt;-b&lt;/span&gt; &lt;span class="pre"&gt;‘C:\emacs'&lt;/span&gt; /emacs&lt;/code&gt;, and now running the
Cygwin python works.&lt;/p&gt;
&lt;p&gt;The emacs function &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;run-python&lt;/span&gt;&lt;/code&gt; adds the emacs &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;data-directory&lt;/span&gt;&lt;/code&gt; to
the &lt;code class="docutils literal"&gt;PYTHONPATH&lt;/code&gt; in the emacs &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;process-environment&lt;/span&gt;&lt;/code&gt; before running
python; unfortunately, since this is the MS Windows emacs, its
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;data-directory&lt;/span&gt;&lt;/code&gt; starts with a drive letter and a colon.  When the
Cygwin python initializes &lt;code class="docutils literal"&gt;sys.path&lt;/code&gt; it splits &lt;code class="docutils literal"&gt;PYTHONPATH&lt;/code&gt; at the
colons, which means &lt;code class="docutils literal"&gt;sys.path&lt;/code&gt; ends up with the drive letter as one
component (usually interpreted as a relative path) and everything
after the colon as another component.  It that's a valid Cygwin
pathname for the Emacs data directory (which is what the above mount
command did), things work (accidentally).&lt;/p&gt;</description><category>emacs</category><category>python</category><guid>https://tkurtbond.github.io/posts/2008/12/15/emacs-and-cygwin-python/</guid><pubDate>Mon, 15 Dec 2008 22:07:43 GMT</pubDate></item></channel></rss>