<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lacking Natural Simplicity (Posts about emacs)</title><link>https://tkurtbond.github.io/</link><description></description><atom:link href="https://tkurtbond.github.io/categories/cat_computer/emacs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:tkurtbond@gmail.com"&gt;T. Kurt Bond&lt;/a&gt; </copyright><lastBuildDate>Sat, 04 Apr 2020 16:46:28 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Defining keys in the C-x 8 prefix keymap</title><link>https://tkurtbond.github.io/posts/2012/10/03/defining-keys-in-the-c-x-8-prefix-keymap/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;Yay!  I finally found it!&lt;/p&gt;
&lt;p&gt;Suppose you hate typing “C-x 8 RET GREEK SMALL LETTER LAMBDA” to
insert a lowercase lambda character in emacs (perhaps because you have
a dull American keyboard and aren't very savvy to input methods).  You
can add a key definition to the “C-x 8 prefix keymap”, say “gl”, so
you can type “C-x 8 g l” and insert a lowercase lambda.&lt;/p&gt;
&lt;p&gt;Here's how you might do it for “λ”, “Λ”, and “§”:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(load-library "iso-transl.el")
(iso-transl-define-keys '(("gl" . [?λ])   ; greek lowercase lambda
                          ("gL" . [?Λ])   ; greek uppercase lambda
                          ("ps" . [?§]))) ; punctuation SECTION SIGN&lt;/pre&gt;&lt;/div&gt;</description><category>emacs</category><category>emacs lisp</category><category>key translation</category><category>unicode</category><guid>https://tkurtbond.github.io/posts/2012/10/03/defining-keys-in-the-c-x-8-prefix-keymap/</guid><pubDate>Thu, 04 Oct 2012 04:54:40 GMT</pubDate></item><item><title>Multics Emacs programmed by secretaries</title><link>https://tkurtbond.github.io/posts/2012/06/15/multics-emacs-programmed-by-secretaries/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;RMS &lt;a class="reference external" href="http://www.gnu.org/gnu/rms-lisp.html"&gt;relates&lt;/a&gt; how programming Multics Emacs was so convenient that secretaries started to learn to use it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;… The language that you build your extensions on shouldn't be
thought of as a programming language in afterthought; it should be
designed as a programming language. In fact, we discovered that
the best programming language for that purpose was Lisp.&lt;/p&gt;
&lt;p&gt;It was Bernie Greenberg, who discovered that it was (5). He wrote
a version of Emacs in Multics MacLisp, and he wrote his commands
in MacLisp in a straightforward fashion. The editor itself was
written entirely in Lisp. Multics Emacs proved to be a great
success — programming new editing commands was so convenient that
even the secretaries in his office started learning how to use
it. They used a manual someone had written which showed how to
extend Emacs, but didn't say it was a programming. So the
secretaries, who believed they couldn't do programming, weren't
scared off. They read the manual, discovered they could do useful
things and they learned to program.&lt;/p&gt;
&lt;p&gt;So Bernie saw that an application — a program that does something
useful for you — which has Lisp inside it and which you could
extend by rewriting the Lisp programs, is actually a very good way
for people to learn programming. It gives them a chance to write
small programs that are useful for them, which in most arenas you
can't possibly do. They can get encouragement for their own
practical use — at the stage where it's the hardest — where they
don't believe they can program, until they get to the point where
they are programmers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- Wasn't troff also used by secretaries? --&gt;&lt;/div&gt;</description><category>emacs</category><category>lisp</category><category>programming</category><guid>https://tkurtbond.github.io/posts/2012/06/15/multics-emacs-programmed-by-secretaries/</guid><pubDate>Fri, 15 Jun 2012 14:10:09 GMT</pubDate></item><item><title>Emacs 23.1 and Wanderlust</title><link>https://tkurtbond.github.io/posts/2009/09/25/emacs-23.1-and-wanderlust/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;To get UTF-8 to work when sending drafted messages  in &lt;a class="reference external" href="http://www.gohome.org/wl/"&gt;Wanderlust&lt;/a&gt; with
Emacs 23.1 I had to apply this &lt;a class="reference external" href="http://article.gmane.org/gmane.mail.wanderlust.general.japanese/5978"&gt;patch&lt;/a&gt; to FLIM.&lt;/p&gt;
&lt;p&gt;I also checked out the wl-2_15_6-vtl branch in the wanderlust
repository and the semi-1_14-vtl branch in the semi repository.
(See &lt;a class="reference external" href="https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/"&gt;repos&lt;/a&gt; for info about the repositories.)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>wanderlust</category><guid>https://tkurtbond.github.io/posts/2009/09/25/emacs-23.1-and-wanderlust/</guid><pubDate>Fri, 25 Sep 2009 19:34:41 GMT</pubDate></item><item><title>Wanderlust, APEL, FLIM, and SEMI development</title><link>https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;Someone once said something along the lines that to those in the
Western world who don't speak Japanese there is an alternate
universe of FOSS &lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/#foss" id="id1"&gt;1&lt;/a&gt; development in Japan &lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/#china" id="id2"&gt;2&lt;/a&gt;, and every so
often things from that universe just appear in the Western FOSS
universe as mysterious foreign objects.  Ruby seems to have made a
solid connection between the universes, but many others are less
approachable.&lt;/p&gt;
&lt;p&gt;Wanderlust development and the development of the emacs packages that
it depends on (APEL, FLIM, and SEMI) feel like that to me.  Some of
them have web pages, but they're usually quite out of date.  It can be
difficult to their CVS repositories, and even more difficult to find
the browse-able web interfaces to their CVS repositories.  Every time
I want to look at the code, I have to figure this all out again, hence
this post.&lt;/p&gt;
&lt;p&gt;There was a &lt;a class="reference external" href="http://lists.airs.net/wl-en/archive/200905/msg00099.html"&gt;post&lt;/a&gt; on the Wanderlust English-language mailing list from
Katsumi Yamaoka &amp;lt;&lt;a class="reference external" href="mailto:yamaoka@jpl.org"&gt;yamaoka@jpl.org&lt;/a&gt;&amp;gt; on Wednesday, 27 May 2009 that gave
the location of the APEL, FLIM, and SEMI cvs repositories, and
mentioned that development in the FLIM and SEMI repositories was
taking place under the flim_1_14 and semi_1_14 branches, respectively.
The post also said that the place for discussion about APEL is the
APEL mailing lists:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="mailto:apel-en@m17n.org"&gt;apel-en@m17n.org&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="mailto:apel-ja@m17n.org"&gt;apel-ja@m17n.org&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;To subscribe, send an empty e-mail to &lt;a class="reference external" href="mailto:apel-en-ctl@m17n.org"&gt;apel-en-ctl@m17n.org&lt;/a&gt; and/or
&lt;a class="reference external" href="mailto:apel-ja-ctl@m17n.org"&gt;apel-ja-ctl@m17n.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The place to discuss FLIM and SEMI is the EMACS-MIME mailing
list:&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class="line-block"&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="mailto:emacs-mime-en@m17n.org"&gt;emacs-mime-en@m17n.org&lt;/a&gt;&lt;/div&gt;
&lt;div class="line"&gt;&lt;a class="reference external" href="mailto:emacs-mime-ja@m17n.org"&gt;emacs-mime-ja@m17n.org&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;To subscribe, send an e-mail containing “subscribe YOUR NAME” in its
contents to &lt;a class="reference external" href="mailto:emacs-mime-en-ctl@m17n.org"&gt;emacs-mime-en-ctl@m17n.org&lt;/a&gt; and/or
&lt;a class="reference external" href="mailto:emacs-mime-ja-ctl@m17n.org"&gt;emacs-mime-ja-ctl@m17n.org&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So, here are the CVS commands I just used to check the various
packages out:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;cvs -d :pserver:anonymous@cvs.m17n.org:/cvs/root checkout wanderlust
cvs -z9 -d :pserver:anonymous@cvs.m17n.org:/cvs/root checkout apel
cvs -z9 -d :pserver:anonymous@cvs.m17n.org:/cvs/root checkout -r flim-1_14 flim
cvs -z9 -d :pserver:anonymous@cvs.m17n.org:/cvs/root checkout -r semi-1_14 semi&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here are the browse-able CVS web interfaces:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://cvs.m17n.org/viewcvs/root/wanderlust/"&gt;http://cvs.m17n.org/viewcvs/root/wanderlust/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://cvs.m17n.org/viewcvs/root/apel/"&gt;http://cvs.m17n.org/viewcvs/root/apel/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://cvs.m17n.org/viewcvs/root/flim/"&gt;http://cvs.m17n.org/viewcvs/root/flim/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://cvs.m17n.org/viewcvs/root/semi/"&gt;http://cvs.m17n.org/viewcvs/root/semi/&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="foss"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;&lt;strong&gt;F&lt;/strong&gt;ree or &lt;strong&gt;O&lt;/strong&gt;pen &lt;strong&gt;S&lt;/strong&gt;ource &lt;strong&gt;S&lt;/strong&gt;oftware.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="china"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;I wonder if there is a Chinese alternate universe of FOSS,
too?&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;</description><category>apel</category><category>e-mail</category><category>flim</category><category>semi</category><category>wanderlust</category><guid>https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/</guid><pubDate>Wed, 02 Sep 2009 14:01:26 GMT</pubDate></item><item><title>Emacs and Cygwin python</title><link>https://tkurtbond.github.io/posts/2008/12/15/emacs-and-cygwin-python/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;If you happen to be using &lt;a class="reference external" href="http://www.gnu.org/software/emacs/windows/ntemacs.html"&gt;Windows Emacs&lt;/a&gt; and &lt;a class="reference external" href="http://www.cygwin.com/"&gt;Cygwin&lt;/a&gt; &lt;a class="reference external" href="http://www.python.org/"&gt;Python&lt;/a&gt; there's
an annoying interaction where “M-x run-python” hangs.  The easiest way
to fix it is to mount the directory where you have your emacs
installation into the Cygwin file name structure.  For instance, I
have my emacs installation in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;C:\emacs\emacs-22.2&lt;/span&gt;&lt;/code&gt;, and in a
cygwin shell I did &lt;code class="docutils literal"&gt;mount &lt;span class="pre"&gt;-b&lt;/span&gt; &lt;span class="pre"&gt;‘C:\emacs'&lt;/span&gt; /emacs&lt;/code&gt;, and now running the
Cygwin python works.&lt;/p&gt;
&lt;p&gt;The emacs function &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;run-python&lt;/span&gt;&lt;/code&gt; adds the emacs &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;data-directory&lt;/span&gt;&lt;/code&gt; to
the &lt;code class="docutils literal"&gt;PYTHONPATH&lt;/code&gt; in the emacs &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;process-environment&lt;/span&gt;&lt;/code&gt; before running
python; unfortunately, since this is the MS Windows emacs, its
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;data-directory&lt;/span&gt;&lt;/code&gt; starts with a drive letter and a colon.  When the
Cygwin python initializes &lt;code class="docutils literal"&gt;sys.path&lt;/code&gt; it splits &lt;code class="docutils literal"&gt;PYTHONPATH&lt;/code&gt; at the
colons, which means &lt;code class="docutils literal"&gt;sys.path&lt;/code&gt; ends up with the drive letter as one
component (usually interpreted as a relative path) and everything
after the colon as another component.  It that's a valid Cygwin
pathname for the Emacs data directory (which is what the above mount
command did), things work (accidentally).&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>python</category><guid>https://tkurtbond.github.io/posts/2008/12/15/emacs-and-cygwin-python/</guid><pubDate>Mon, 15 Dec 2008 22:07:43 GMT</pubDate></item><item><title>Mousing in Emacs under Screen</title><link>https://tkurtbond.github.io/posts/2008/12/11/mousing-in-emacs-under-screen/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;It &lt;a class="reference external" href="http://savannah.gnu.org/bugs/?14930"&gt;turns out&lt;/a&gt; that if you execute the command &lt;cite&gt;xterm-mouse-mode&lt;/cite&gt; (or
evaluate &lt;cite&gt;(xterm-mouse-mode 1)&lt;/cite&gt; in your initialization file) when
running &lt;a class="reference external" href="http://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; under &lt;a class="reference external" href="http://www.gnu.org/software/screen/"&gt;Screen&lt;/a&gt; it allows “non-modified single clicks” to
work.  Normal mouse functionality is still available by holding the
Shift key while clicking.  I use the &lt;a class="reference external" href="http://www.chiark.greenend.org.uk/~sgtatham/putty/"&gt;PuTTY&lt;/a&gt; ssh client for remote
access to various servers, and this works well Emacs in Screen under
PuTTY, too.&lt;/p&gt;</description><category>computer</category><category>emacs</category><category>screen</category><category>tools</category><guid>https://tkurtbond.github.io/posts/2008/12/11/mousing-in-emacs-under-screen/</guid><pubDate>Thu, 11 Dec 2008 17:46:02 GMT</pubDate></item><item><title>linum.el</title><link>https://tkurtbond.github.io/posts/2008/08/16/linumel/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;I found a very useful &lt;a class="reference external" href="http://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; minor mode today: &lt;a class="reference external" href="http://stud4.tuwien.ac.at/~e0225855/linum/linum.html"&gt;linum.el&lt;/a&gt;, which puts line
numbers at the beginning of all the lines in a buffer.&lt;/p&gt;</description><category>emacs</category><guid>https://tkurtbond.github.io/posts/2008/08/16/linumel/</guid><pubDate>Sat, 16 Aug 2008 08:33:26 GMT</pubDate></item><item><title>Fun with Emacs: eval-after-load*</title><link>https://tkurtbond.github.io/posts/2008/08/15/fun-with-emacs-eval-after-load/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;Ok, suppose you want to evaluate a particular bit of code
after emacs loads a particular emacs-lisp file, but you want to pass
values of local variables into that code.  The function
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;eval-after-load&lt;/span&gt;&lt;/code&gt; makes you quote the expression and doesn't
allow passing values into the expression.  How about this?&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;(require 'cl)
(defmacro* eval-after-load* (file varlist &amp;amp;rest body)
  "Like `eval-after-load', but bind variables according to VARLIST in
the current environment of the `eval-after-load' expression, not the
environment when BODY is evaluated.  This allows easy passing of values
into BODY.
Each element of VARLIST is a symbol (which is bound to the current value
of that symbol) or a list (SYMBOL VALUEFORM) (which binds SYMBOL to the
value of VALUEFORM in the environment of the `eval-after-load' expression."
  `(eval-after-load ,file
     '(let ,(loop for v in varlist
                  collect (if (symbolp v)
                              `(,v ,(eval v))
                            `(,(car v) ,(eval (cadr v))))
                  into new-varlist
                  finally return new-varlist) ,@body)))
(put 'eval-after-load* 'lisp-indent-function
     (1+ (get 'eval-after-load 'lisp-indent-function)))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here's a contrived example which demonstrates when things happen.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;(let ((f (make-temp-file "tkb-madness" nil ".el"))
      (x 1))
  (unwind-protect
      (progn
        (save-excursion
          (let ((buf (find-file f)))
            (insert (format "(y-or-n-p \"In the file '%s'! \")" f))
            (save-buffer)
            (kill-buffer buf)))
        (y-or-n-p "This happens before the eval-after-load*")
        (eval-after-load* f
            (x
             (y (y-or-n-p "This happens when the eval-after-load* is executed?"))
             (z 2))
          (y-or-n-p (format "x: %d y: %S z: %d" x y z))
          (y-or-n-p "This happends during the delayed expressions"))
        (y-or-n-p "This happens after the eval-after-load* expression")
        (load f))
    (when (file-exists-p f) (delete-file f))))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should see something like:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;Wrote /tmp/tkb-madness88647vuE.el
This happens before the eval-after-load*(y or n)
This happens when the eval-after-load* is executed?(y or n)
This happens after the eval-after-load* expression(y or n)
Loading /tmp/tkb-madness88647vuE.el (source)...
In the file '/tmp/tkb-madness88647vuE.el'! (y or n)
x: 1 y: t z: 2(y or n)
This happends during the delayed expressions(y or n)
Loading /tmp/tkb-madness88647vuE.el (source)...done&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;y-or-n-p&lt;/span&gt;&lt;/code&gt; is used instead of &lt;code class="docutils literal"&gt;message&lt;/code&gt; so you see each message when it
happens.)&lt;/p&gt;
&lt;p&gt;Does the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;eval-after-load*&lt;/span&gt;&lt;/code&gt; macro make sense?&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://tkurtbond.github.io/posts/2008/08/15/fun-with-emacs-eval-after-load/</guid><pubDate>Fri, 15 Aug 2008 23:54:39 GMT</pubDate></item><item><title>Fun With Emacs: Unicode and #'describe-char</title><link>https://tkurtbond.github.io/posts/2008/08/15/fun-with-emacs-unicode-and-describe-char/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;Ever use the emacs command &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;describe-char&lt;/span&gt;&lt;/code&gt;?  It's even more fun with
proper unicode lookup data!&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;;; First, we'll bind it to a key.
(global-set-key "\C-cD" #'describe-char)

;; Now we'll download it if necessary.
(let ((udf-url "http://www.unicode.org/Public/UNIDATA/UnicodeData.txt")
      (udf-dest "~/tmp/UnicodeData.txt"))
  (if (file-readable-p udf-dest)
      ;; Let describe-char know it exists.
      (setq describe-char-unicodedata-file udf-dest)
    ;; It doesn't exist, and we need to download it!
    (when (y-or-n-p (format "You need to download %s ! Do it? " udf-url))
      ;; Really weird: wget -O 'file' complains that file doesn't exist.
      (let* ((cmd (format "cd ~/tmp/ &amp;amp;&amp;amp; wget -O %s --progress=dot '%s'"
                          udf-dest udf-url))
             (buf (get-buffer-create (format " *wget '%s'*" udf-url)))
             (proc (start-process-shell-command "wget-unicode-Data"
                                                buf cmd)))
        (display-buffer buf)
        (set-process-sentinel
         proc
         `(lambda (proc event)
            (unless (string-match "^finished" event)
              (error "unexpected status '%s' getting '%s'" ,udf-url event))
            (setq describe-char-unicodedata-file ,udf-dest)
            (message "Try describe-char now! ☣☥☸▧◉✘✽☮⅙▧⚅☑☢☹☺♠♥♦♣♨♻⚔")))
        (message "Downloading... check describe-char later")
        nil))))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once this is run and it tells you to try &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;describe-char&lt;/span&gt;&lt;/code&gt; you can
position your cursor over one of the Unicode characters in the message
(“C-h e” to display the “&lt;em&gt;Messages&lt;/em&gt;” buffer) and press “C-cD” and look
for the “Name:” line.  You'll see something like this:&lt;/p&gt;
&lt;pre class="literal-block"&gt;      character: ♻ (299515, #o1110773, #x491fb, U+267B)
        charset: mule-unicode-2500-33ff (Unicode characters of the range U+2500..U+33FF.)
     code point: #x23 #x7B
         syntax: w    which means: word
    buffer code: #x9C #xF2 #xA3 #xFB
      file code: #xE2 #x99 #xBB (encoded by coding system mule-utf-8)
        display: terminal code #xE2 #x99 #xBB
   Unicode data:
           Name: BLACK UNIVERSAL RECYCLING SYMBOL
       Category: other symbol
Combining class: Spacing
  Bidi category: Other Neutrals&lt;/pre&gt;&lt;/div&gt;</description><category>emacs</category><guid>https://tkurtbond.github.io/posts/2008/08/15/fun-with-emacs-unicode-and-describe-char/</guid><pubDate>Fri, 15 Aug 2008 17:07:21 GMT</pubDate></item></channel></rss>