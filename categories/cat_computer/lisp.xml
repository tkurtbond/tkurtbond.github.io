<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lacking Natural Simplicity (Posts about lisp)</title><link>https://tkurtbond.github.io/</link><description></description><atom:link href="https://tkurtbond.github.io/categories/cat_computer/lisp.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:tkurtbond@gmail.com"&gt;T. Kurt Bond&lt;/a&gt; </copyright><lastBuildDate>Wed, 06 Nov 2019 04:05:37 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Chicken 4.1.0 on Cygwin</title><link>https://tkurtbond.github.io/posts/2009/09/03/chicken-410-on-cygwin/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;Weird: after compiling and installing &lt;a class="reference external" href="http://www.call-with-current-continuation.org/"&gt;chicken&lt;/a&gt; with:&lt;/p&gt;
&lt;!-- class: code --&gt;
&lt;pre class="literal-block"&gt;make PLATFORM=cygwin PREFIX=/sw/versions/cygwin/chicken/4.1.0
make PLATFORM=cygwin PREFIX=/sw/versions/cygwin/chicken/4.1.0 install&lt;/pre&gt;
&lt;p&gt;I had to copy &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;/sw/versions/cygwin/chicken/4.1.0/lib/*.a&lt;/span&gt;&lt;/code&gt; to
&lt;code class="docutils literal"&gt;/sw/versions/cygwin/checkin/4.1.0/bin&lt;/code&gt; before it could link things
properly.  (I first noticed this while doing a
&lt;code class="inlinecode docutils literal"&gt;$ &lt;span class="pre"&gt;chicken-install&lt;/span&gt; ncurses&lt;/code&gt;.)&lt;/p&gt;&lt;/div&gt;</description><category>chicken</category><category>cygwin</category><category>scheme</category><guid>https://tkurtbond.github.io/posts/2009/09/03/chicken-410-on-cygwin/</guid><pubDate>Thu, 03 Sep 2009 20:24:59 GMT</pubDate></item><item><title>Fun with Lisp: notf and cdrf</title><link>https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;I actually use these in Emacs Lisp, for which you'd need a
&lt;code class="inlinecode docutils literal"&gt;(require 'cl))&lt;/code&gt;, but the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;define-modify-macro&lt;/span&gt;&lt;/code&gt; is
originally from Common Lisp.&lt;/p&gt;
&lt;p&gt;These are trivial, but useful.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;(define-modify-macro notf (&amp;amp;rest args) not)
(setq x nil)
(notf x)
x ;;=&amp;gt; t
(notf x)
x ;;=&amp;gt; nil
(setq x ‘(a (b (c t))))
(notf (car (cdr (cadadr x))))
x ;;=&amp;gt; (a (b (c nil)))
(notf (car (cdr (cadadr x))))
x ;;=&amp;gt; (a (b (c t)))
(setq x [1 2 3 t 5])
(notf (aref x 3))
x ;;=&amp;gt; [1 2 3 nil 5]
(notf (aref x 3))
x ;;=&amp;gt; [1 2 3 t 5]

(define-modify-macro cdrf (&amp;amp;rest args) cdr)
(setq x ‘(:a :b :c :d 1 2 3))
(defun frob (keyword) ‘nothing-now)
(while (member (car x) ‘(:a :b :c :d))
  (frob (car x))
  (cdrf x))
x ;;=&amp;gt; (1 2 3)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>common lisp</category><category>emacs lisp</category><guid>https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/</guid><pubDate>Fri, 15 Aug 2008 23:59:36 GMT</pubDate></item></channel></rss>