<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="https://tkurtbond.github.io/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>Lacking Natural Simplicity (Posts about vms)</title>
  <id>https://tkurtbond.github.io/categories/cat_computer/os/vms.atom</id>
  <updated>2022-02-05T21:26:15Z</updated>
  <author>
    <name>T. Kurt Bond</name>
  </author>
  <link rel="self" type="application/atom+xml" href="https://tkurtbond.github.io/categories/cat_computer/os/vms.atom"/>
  <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/categories/cat_computer/os/vms/"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>Redimensioning formal parameter arrays in OpenVMS BASIC, Revisited</title>
    <id>https://tkurtbond.github.io/posts/2022/02/05/redimensioning-formal-parameter-arrays-in-openvms-basic-revisited/</id>
    <updated>2022-02-05T16:08:22-05:00</updated>
    <published>2022-02-05T16:08:22-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2022/02/05/redimensioning-formal-parameter-arrays-in-openvms-basic-revisited/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;I was working on a program on a VAX today, and needed to redimension
dynamically allocated arrays that are passed to an external function.
I've done this in the past (an &lt;a class="reference external" href="https://groups.google.com/g/comp.os.vms/c/mVWznNVN17U/m/HE3L4N4nIJAJ"&gt;old USENET post&lt;/a&gt;, and the &lt;a class="reference external" href="https://tkurtbond.github.io/posts/2003/05/08/2003-05-08-vms-code-from-the-past/"&gt;old blog
post&lt;/a&gt; that mentions it), but this time I managed to simplify my
solution, and generalize it to work with both lower and upper bounds,
and so the same function would work with multiple VMS BASIC data
types.  Here's the &lt;a class="reference external" href="https://groups.google.com/g/comp.os.vms/c/mVWznNVN17U/m/yuOAmQtQBAAJ"&gt;new USENET post&lt;/a&gt;.  (How's that for thread
necromancy?)&lt;/p&gt;
&lt;p&gt;I'll include the code in this blog post, too, for ease of reference.
Here's &lt;span class="file"&gt;vax_redim_best.bas&lt;/span&gt;&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-1"&gt;&lt;/a&gt;program vax_redim_best
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-2"&gt;&lt;/a&gt;    option type = explicit, constant type = integer, &amp;amp;
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-3"&gt;&lt;/a&gt;        size = integer long, size = real double
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-4"&gt;&lt;/a&gt;    record rec
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-5"&gt;&lt;/a&gt;        string s = 13
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-6"&gt;&lt;/a&gt;        long   i
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-7"&gt;&lt;/a&gt;    end record rec
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-9"&gt;&lt;/a&gt;    ! Don't declare the parameters, and everything works, even passing
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-10"&gt;&lt;/a&gt;    ! different types.
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-11"&gt;&lt;/a&gt;    external sub redim
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-13"&gt;&lt;/a&gt;    declare long stat, i
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-14"&gt;&lt;/a&gt;    i = 1
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-15"&gt;&lt;/a&gt;    dim rec rec(1 to i)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-16"&gt;&lt;/a&gt;    print "lbound (rec) at start: "; lbound (rec)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-17"&gt;&lt;/a&gt;    print "ubound (rec) at start: "; ubound (rec)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-18"&gt;&lt;/a&gt;    call redim (rec(), 3, 10)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-19"&gt;&lt;/a&gt;    print "lbound (rec) after redim: "; lbound (rec)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-20"&gt;&lt;/a&gt;    print "ubound (rec) after redim: "; ubound (rec)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-22"&gt;&lt;/a&gt;    dim string s(1 to i)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-23"&gt;&lt;/a&gt;    print "lbound (s) at start: "; lbound (s)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-24"&gt;&lt;/a&gt;    print "ubound (s) at start: "; ubound (s)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-25"&gt;&lt;/a&gt;    call redim (s(), 3, 10)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-26"&gt;&lt;/a&gt;    print "lbound (s) after redim: "; lbound (s)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-27"&gt;&lt;/a&gt;    print "ubound (s) after redim: "; ubound (s)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-28"&gt;&lt;/a&gt;
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-29"&gt;&lt;/a&gt;    dim long l(1 to i)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-30"&gt;&lt;/a&gt;    print "lbound (l) at start: "; lbound (l)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-31"&gt;&lt;/a&gt;    print "ubound (l) at start: "; ubound (l)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-32"&gt;&lt;/a&gt;    call redim (l(), 3, 10)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-33"&gt;&lt;/a&gt;    print "lbound (l) after redim: "; lbound (l)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-34"&gt;&lt;/a&gt;    print "ubound (l) after redim: "; ubound (l)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-35"&gt;&lt;/a&gt;
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-36"&gt;&lt;/a&gt;
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-37"&gt;&lt;/a&gt;end program ! vax_redim_best
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-38"&gt;&lt;/a&gt;
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-39"&gt;&lt;/a&gt;function long redim (long s, long low, long high)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-40"&gt;&lt;/a&gt;    option type = explicit, constant type = integer, &amp;amp;
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-41"&gt;&lt;/a&gt;        size = integer long, size = real double
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-42"&gt;&lt;/a&gt;    external long function bas$rt_dim_bounds (long by value, long by value, long by value)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-43"&gt;&lt;/a&gt;    declare long r
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-44"&gt;&lt;/a&gt;    r = bas$rt_dim_bounds (loc (s), low, high)
&lt;a name="rest_code_16dff64c3f064122b8aba9b005e159cd-45"&gt;&lt;/a&gt;end function r ! redim
&lt;/pre&gt;&lt;p&gt;I'll just point out, which I failed to do in the &lt;a class="reference external" href="https://groups.google.com/g/comp.os.vms/c/mVWznNVN17U/m/HE3L4N4nIJAJ"&gt;old USENET post&lt;/a&gt; or
the &lt;a class="reference external" href="https://groups.google.com/g/comp.os.vms/c/mVWznNVN17U/m/yuOAmQtQBAAJ"&gt;new USENET post&lt;/a&gt;, that you have to use a &lt;strong&gt;variable&lt;/strong&gt; when using
the VMS BASIC &lt;code class="docutils literal"&gt;dim&lt;/code&gt; statement or you get a fatal runtime error.  Ooops.&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="alpha" label="alpha"/>
    <category term="basic" label="basic"/>
    <category term="hacks" label="hacks"/>
    <category term="usenet" label="usenet"/>
    <category term="vax" label="vax"/>
    <category term="vms" label="vms"/>
  </entry>
</feed>
