<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lacking Natural Simplicity (Posts about emacs lisp)</title><link>https://tkurtbond.github.io/</link><description></description><atom:link href="https://tkurtbond.github.io/categories/emacs-lisp.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2019 &lt;a href="mailto:tkurtbond@gmail.com"&gt;T. Kurt Bond&lt;/a&gt; </copyright><lastBuildDate>Wed, 06 Nov 2019 04:05:39 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Defining keys in the C-x 8 prefix keymap</title><link>https://tkurtbond.github.io/posts/2012/10/03/defining-keys-in-the-c-x-8-prefix-keymap/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;Yay!  I finally found it!&lt;/p&gt;
&lt;p&gt;Suppose you hate typing “C-x 8 RET GREEK SMALL LETTER LAMBDA” to
insert a lowercase lambda character in emacs (perhaps because you have
a dull American keyboard and aren't very savvy to input methods).  You
can add a key definition to the “C-x 8 prefix keymap”, say “gl”, so
you can type “C-x 8 g l” and insert a lowercase lambda.&lt;/p&gt;
&lt;p&gt;Here's how you might do it for “λ”, “Λ”, and “§”:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(load-library "iso-transl.el")
(iso-transl-define-keys '(("gl" . [?λ])   ; greek lowercase lambda
                          ("gL" . [?Λ])   ; greek uppercase lambda
                          ("ps" . [?§]))) ; punctuation SECTION SIGN&lt;/pre&gt;&lt;/div&gt;</description><category>emacs</category><category>emacs lisp</category><category>key translation</category><category>unicode</category><guid>https://tkurtbond.github.io/posts/2012/10/03/defining-keys-in-the-c-x-8-prefix-keymap/</guid><pubDate>Thu, 04 Oct 2012 04:54:40 GMT</pubDate></item><item><title>Fun with Lisp: notf and cdrf</title><link>https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;I actually use these in Emacs Lisp, for which you'd need a
&lt;code class="inlinecode docutils literal"&gt;(require 'cl))&lt;/code&gt;, but the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;define-modify-macro&lt;/span&gt;&lt;/code&gt; is
originally from Common Lisp.&lt;/p&gt;
&lt;p&gt;These are trivial, but useful.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;(define-modify-macro notf (&amp;amp;rest args) not)
(setq x nil)
(notf x)
x ;;=&amp;gt; t
(notf x)
x ;;=&amp;gt; nil
(setq x ‘(a (b (c t))))
(notf (car (cdr (cadadr x))))
x ;;=&amp;gt; (a (b (c nil)))
(notf (car (cdr (cadadr x))))
x ;;=&amp;gt; (a (b (c t)))
(setq x [1 2 3 t 5])
(notf (aref x 3))
x ;;=&amp;gt; [1 2 3 nil 5]
(notf (aref x 3))
x ;;=&amp;gt; [1 2 3 t 5]

(define-modify-macro cdrf (&amp;amp;rest args) cdr)
(setq x ‘(:a :b :c :d 1 2 3))
(defun frob (keyword) ‘nothing-now)
(while (member (car x) ‘(:a :b :c :d))
  (frob (car x))
  (cdrf x))
x ;;=&amp;gt; (1 2 3)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>common lisp</category><category>emacs lisp</category><guid>https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/</guid><pubDate>Fri, 15 Aug 2008 23:59:36 GMT</pubDate></item></channel></rss>