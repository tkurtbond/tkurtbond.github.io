<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lacking Natural Simplicity (Posts about emacs lisp)</title><link>https://tkurtbond.github.io/</link><description></description><atom:link href="https://tkurtbond.github.io/categories/emacs-lisp.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2021 &lt;a href="mailto:tkurtbond@gmail.com"&gt;T. Kurt Bond&lt;/a&gt; </copyright><lastBuildDate>Sat, 10 Jul 2021 07:47:19 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>How much does your giant weigh?</title><link>https://tkurtbond.github.io/posts/2020/11/12/how-much-does-your-giant-weigh/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;Some time ago I wrote an Emacs Lisp function, height-mass, to figure
out how much a giant weighs.  Recently it was suggested that I make it
a gist on github, so it is &lt;a class="reference external" href="https://gist.github.com/tkurtbond/8ec106748c60fe4e72db7f0759f11627"&gt;here&lt;/a&gt;.&lt;/p&gt;</description><category>emacs lisp</category><category>fantasy</category><category>rpg</category><guid>https://tkurtbond.github.io/posts/2020/11/12/how-much-does-your-giant-weigh/</guid><pubDate>Thu, 12 Nov 2020 15:42:10 GMT</pubDate></item><item><title>Arrow Macros in Emacs Lisp</title><link>https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;Are you familiar with arrow macros?  (They have nothing to do with
&lt;a class="reference external" href="https://en.wikibooks.org/wiki/Haskell/Understanding_arrows"&gt;arrows in Haskell&lt;/a&gt;.) They started out in &lt;a class="reference external" href="https://clojure.org/"&gt;Clojure&lt;/a&gt;, I think, and have
been ported to &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_Lisp"&gt;Common Lisp&lt;/a&gt; and probably other Lisps, though I didn't
find one for &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt;.  I think the &lt;a class="reference external" href="https://github.com/Harleqin/arrows"&gt;arrows&lt;/a&gt; package is the most up
to date in &lt;a class="reference external" href="https://www.quicklisp.org/"&gt;Quicklisp&lt;/a&gt; for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_Lisp"&gt;Common Lisp&lt;/a&gt;, but I found the &lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;
package first so that's the one I converted to &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; today.&lt;/p&gt;
&lt;p&gt;There were two slightly tricky parts to the port&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;I needed to use lexical binding for the source file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;'s test suite used fractions, but &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; doesn't
have them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyway, I think they're very useful.  If you have a value and
you want it to be processed by several functions in a chain you
can use an arrow macro instead of using lots of nested function
calls. For instance,&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_80b3ae6d464b4efcb1bd0224e46a81d2-1" name="rest_code_80b3ae6d464b4efcb1bd0224e46a81d2-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.+"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.-"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-\\."&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;is annoying and hard to read on one line.  If you split it into multiple lines&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-1" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-2" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-2"&gt;&lt;/a&gt; &lt;span class="s"&gt;"-+$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-3" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-3"&gt;&lt;/a&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-4" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-4"&gt;&lt;/a&gt;  &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-5" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-5"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-6" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-6"&gt;&lt;/a&gt;   &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-7" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-7"&gt;&lt;/a&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-8" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-8"&gt;&lt;/a&gt;    &lt;span class="s"&gt;"\\.+"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-9" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-9"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-10" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-10"&gt;&lt;/a&gt;     &lt;span class="s"&gt;"\\.-"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-11" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-11"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-12" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-12"&gt;&lt;/a&gt;      &lt;span class="s"&gt;"-\\."&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-13" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-13"&gt;&lt;/a&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-14" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-14"&gt;&lt;/a&gt;       &lt;span class="s"&gt;"-+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-15" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-15"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;that's also pretty horrible.  To read it you have to skip to the end,
figure out that function call, then skip back to the next function
call, and so forth, until you get back to the last function call,
reading it from inside out.  It looks much better if you use the
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; arrow macro, which substitutes the value you are passing along
as the last argument to the functions you are calling:&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_a109377f06fa43009a539c6a20491bab-1" name="rest_code_a109377f06fa43009a539c6a20491bab-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;
&lt;a id="rest_code_a109377f06fa43009a539c6a20491bab-2" name="rest_code_a109377f06fa43009a539c6a20491bab-2"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a109377f06fa43009a539c6a20491bab-3" name="rest_code_a109377f06fa43009a539c6a20491bab-3"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a109377f06fa43009a539c6a20491bab-4" name="rest_code_a109377f06fa43009a539c6a20491bab-4"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-\\."&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a109377f06fa43009a539c6a20491bab-5" name="rest_code_a109377f06fa43009a539c6a20491bab-5"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.-"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a109377f06fa43009a539c6a20491bab-6" name="rest_code_a109377f06fa43009a539c6a20491bab-6"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.+"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a109377f06fa43009a539c6a20491bab-7" name="rest_code_a109377f06fa43009a539c6a20491bab-7"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a109377f06fa43009a539c6a20491bab-8" name="rest_code_a109377f06fa43009a539c6a20491bab-8"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I also think it is more understandable than the highly nested calls,
since you can follow along in from start to finish, rather than from
inside out: you've got the value, you pass it to the first function,
then to the second, and so forth.&lt;/p&gt;
&lt;p&gt;There are also macros to insert the value at the front of the argument
list (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt;&lt;/code&gt;) and to insert the value where a &lt;code class="docutils literal"&gt;&amp;lt;&amp;gt;&lt;/code&gt; symbol is found
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I wrote some &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; code with the last expression above today, and
I think it makes a good example of why they are useful.&lt;/p&gt;
&lt;p&gt;Here's the use case that inspired me to port them to &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs
Lisp&lt;/a&gt;.  When I save things from the internet I often want to
create a directory to save them in based on the filename or
some text on a web page or something, but usually there are
spaces or special characters in that text, so I have to
sanitize the text to make it a safe and simple filename.  So I
need to replace all special characters with dashes.  But I
don't want dashes repeated multiple times, just a single dash,
and I don't want dashes followed or preceded by periods, only
the period.&lt;/p&gt;
&lt;p&gt;Here' s some code to do that:&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-1" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;tkb-sanitize-for-filename&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-2" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-2"&gt;&lt;/a&gt;  &lt;span class="s"&gt;"Clean up characters in STRING that aren't good for&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-3" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-3"&gt;&lt;/a&gt;&lt;span class="s"&gt;filenames."&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-4" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-4"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-5" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-5"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-6" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-6"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-7" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-7"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-\\."&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-8" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-8"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.-"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-9" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-9"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.+"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-10" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-10"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-11" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-11"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-12" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-13" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;tkb-sanitize-kill-for-filename&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-14" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-14"&gt;&lt;/a&gt;  &lt;span class="s"&gt;"Clean up characters that aren't good for filenames in the&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-15" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-15"&gt;&lt;/a&gt;&lt;span class="s"&gt;top of the kill&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-16" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-16"&gt;&lt;/a&gt;&lt;span class="s"&gt;ring and put the result on the top of the kill ring."&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-17" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-17"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;;; gets the kill or the system clipboard if it is new.&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-18" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-18"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interactive&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-kill&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-19" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-19"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;new-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;tkb-sanitize-for-filename&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-20" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-20"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt; &lt;span class="s"&gt;"Old string: %s\nNew String: %s"&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;new-string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-21" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-21"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kill-new&lt;/span&gt; &lt;span class="nv"&gt;new-string&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-22" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-22"&gt;&lt;/a&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-23" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-23"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c k S"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'tkb-sanitize-kill-for-filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Note that the function &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;tkb-sanitize-kill-for-filename&lt;/span&gt;&lt;/code&gt; that I use
interactively gets uses &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(current-kill&lt;/span&gt; 0 t)&lt;/code&gt; because it either
returns the top of the kill ring, or if the system clipboard is newer
it puts that on top of the kill ring and returns it.  (The docstring
of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;current-kill&lt;/span&gt;&lt;/code&gt; makes that a little difficult to figure out.)&lt;/p&gt;
&lt;p&gt;So if I have the name of a product as
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;"***Flashy####Product%%%%Name!!!!"&lt;/span&gt;&lt;/code&gt; I copy that to the clipboard
with &lt;code class="key docutils literal"&gt;&lt;span class="pre"&gt;â-C&lt;/span&gt;&lt;/code&gt;, switch to emacs, do &lt;code class="key docutils literal"&gt;&lt;span class="pre"&gt;C-c&lt;/span&gt; k S&lt;/code&gt;, switch back to
whatever program is saving the file, and use the generated,
sanitized name &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Flashy-Product-Name&lt;/span&gt;&lt;/code&gt; with &lt;code class="key docutils literal"&gt;&lt;span class="pre"&gt;â-V&lt;/span&gt;&lt;/code&gt;.  Nifty!&lt;/p&gt;
&lt;p&gt;(And if you've ever wondered what the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Unicode"&gt;Unicode&lt;/a&gt; character for the Mac
keyboard &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Command_key"&gt;Command key&lt;/a&gt; (â) is, it is the PLACE OF INTEREST SIGN, and you
can enter it by C-x 8 RETURN PLACE OF INTEREST SIGN.  The symbol they
use for for the key labeled alt and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Option_key"&gt;option&lt;/a&gt; (â¥) is the Unicode OPTION
KEY, and the symbol they use for the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Shift_key"&gt;Shift Key&lt;/a&gt; (â§) is UPWARDS WHITE ARROW.
I'm surprised they don't have a special symbol for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Control_key"&gt;Control&lt;/a&gt;, but it
looks like they just use the plain ASCII ^, known in Unicode as
CIRCUMFLEX ACCENT.)&lt;/p&gt;
&lt;p&gt;Anyway, &lt;a class="reference external" href="https://tkurtbond.github.io/arrows-for-emacs.zip"&gt;here&lt;/a&gt;'s a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Info-ZIP"&gt;ZIP&lt;/a&gt; file with the Emacs Lisp source for the arrow
macros so you can use them if you've been convinced of their
usefulness by this post.  It also has some minimal documentation in
the &lt;span class="file"&gt;README.md&lt;/span&gt; that came from the &lt;span class="file"&gt;README.md&lt;/span&gt; from
&lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;, which seems to repeat the information from the
docstrings for the macros.&lt;/p&gt;&lt;/div&gt;</description><category>arrow macros</category><category>clojure</category><category>common lisp</category><category>emacs</category><category>emacs lisp</category><category>unicode</category><guid>https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/</guid><pubDate>Fri, 03 Jul 2020 18:11:16 GMT</pubDate></item><item><title>Converting my emacs-lisp repository to GIT and putting it online</title><link>https://tkurtbond.github.io/posts/2019/11/10/converting-my-emacs-lisp-repository-to-git-and-putting-it-online/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;I've had a &lt;a class="reference external" href="https://www.mercurial-scm.org/"&gt;mercurial&lt;/a&gt; repository for my Emacs Lisp initialization
files since Thursday, Oct 29, 2009, but had actually used it very
little.  Recently I had occasion to untangle my initialization files
somewhat â they had over 12,000 lines of code when I started, and I've
reduced that to 6,137 lines and switched over to using &lt;a class="reference external" href="https://elpa.gnu.org/"&gt;Elpa&lt;/a&gt; packages
for as much stuff as I can.&lt;/p&gt;
&lt;p&gt;I decided I'd put it in one of the online repositories, and since I'm
already using &lt;a class="reference external" href="https://github.com/tkurtbond"&gt;github.com&lt;/a&gt; for my blog I decided to put it &lt;a class="reference external" href="https://github.com/tkurtbond/emacs-lisp"&gt;there&lt;/a&gt;.
But that meant converting it to &lt;a class="reference external" href="https://git-scm.com/"&gt;GIT&lt;/a&gt;.  I used the directions &lt;a class="reference external" href="https://git-scm.com/book/en/v2/Git-and-Other-Systems-Migrating-to-Git#_mercurial"&gt;here&lt;/a&gt;
using &lt;a class="reference external" href="https://github.com/frej/fast-export"&gt;fast-export&lt;/a&gt; which seemed to work fine.&lt;/p&gt;&lt;/div&gt;</description><category>conversion</category><category>emacs lisp</category><category>git</category><category>mercurial</category><guid>https://tkurtbond.github.io/posts/2019/11/10/converting-my-emacs-lisp-repository-to-git-and-putting-it-online/</guid><pubDate>Sun, 10 Nov 2019 19:09:17 GMT</pubDate></item><item><title>Defining keys in the C-x 8 prefix keymap</title><link>https://tkurtbond.github.io/posts/2012/10/03/defining-keys-in-the-c-x-8-prefix-keymap/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;Yay!  I finally found it!&lt;/p&gt;
&lt;p&gt;Suppose you hate typing âC-x 8 RET GREEK SMALL LETTER LAMBDAâ to
insert a lowercase lambda character in emacs (perhaps because you have
a dull American keyboard and aren't very savvy to input methods).  You
can add a key definition to the âC-x 8 prefix keymapâ, say âglâ, so
you can type âC-x 8 g lâ and insert a lowercase lambda.&lt;/p&gt;
&lt;p&gt;Here's how you might do it for âÎ»â, âÎâ, and âÂ§â:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(load-library "iso-transl.el")
(iso-transl-define-keys '(("gl" . [?Î»])   ; greek lowercase lambda
                          ("gL" . [?Î])   ; greek uppercase lambda
                          ("ps" . [?Â§]))) ; punctuation SECTION SIGN&lt;/pre&gt;&lt;/div&gt;</description><category>emacs</category><category>emacs lisp</category><category>key translation</category><category>unicode</category><guid>https://tkurtbond.github.io/posts/2012/10/03/defining-keys-in-the-c-x-8-prefix-keymap/</guid><pubDate>Thu, 04 Oct 2012 04:54:40 GMT</pubDate></item><item><title>Fun with Lisp: notf and cdrf</title><link>https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;I actually use these in Emacs Lisp, for which you'd need a
&lt;code&gt;(require 'cl))&lt;/code&gt;, but the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;define-modify-macro&lt;/span&gt;&lt;/code&gt; is
originally from Common Lisp.&lt;/p&gt;
&lt;p&gt;These are trivial, but useful.&lt;/p&gt;
&lt;pre class="code common-lisp"&gt;&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-1" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;define-modify-macro&lt;/span&gt; &lt;span class="nv"&gt;notf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&amp;amp;rest&lt;/span&gt; &lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;not&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-2" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-3" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notf&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-4" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-4"&gt;&lt;/a&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;;;=&amp;gt; t&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-5" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notf&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-6" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-6"&gt;&lt;/a&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;;;=&amp;gt; nil&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-7" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="err"&gt;â&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-8" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cdr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cadadr&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-9" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-9"&gt;&lt;/a&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;;;=&amp;gt; (a (b (c nil)))&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-10" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cdr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cadadr&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-11" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-11"&gt;&lt;/a&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;;;=&amp;gt; (a (b (c t)))&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-12" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;[1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt; &lt;span class="nv"&gt;5]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-13" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;aref&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-14" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-14"&gt;&lt;/a&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;;;=&amp;gt; [1 2 3 nil 5]&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-15" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-15"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;aref&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-16" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-16"&gt;&lt;/a&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;;;=&amp;gt; [1 2 3 t 5]&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-17" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-17"&gt;&lt;/a&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-18" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-18"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;define-modify-macro&lt;/span&gt; &lt;span class="nv"&gt;cdrf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&amp;amp;rest&lt;/span&gt; &lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;cdr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-19" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-19"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="err"&gt;â&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:a&lt;/span&gt; &lt;span class="ss"&gt;:b&lt;/span&gt; &lt;span class="ss"&gt;:c&lt;/span&gt; &lt;span class="ss"&gt;:d&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-20" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-20"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;frob&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;â&lt;/span&gt;&lt;span class="nv"&gt;nothing-now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-21" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-21"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;member&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;â&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:a&lt;/span&gt; &lt;span class="ss"&gt;:b&lt;/span&gt; &lt;span class="ss"&gt;:c&lt;/span&gt; &lt;span class="ss"&gt;:d&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-22" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-22"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;frob&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-23" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-23"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;cdrf&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_48e6197efa2a4332b6d1d113392f54ac-24" name="rest_code_48e6197efa2a4332b6d1d113392f54ac-24"&gt;&lt;/a&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;;;=&amp;gt; (1 2 3)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>common lisp</category><category>emacs lisp</category><guid>https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/</guid><pubDate>Fri, 15 Aug 2008 23:59:36 GMT</pubDate></item></channel></rss>