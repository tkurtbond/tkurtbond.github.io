<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lacking Natural Simplicity (Posts about scheme)</title><link>https://tkurtbond.github.io/</link><description></description><atom:link href="https://tkurtbond.github.io/categories/scheme.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:tkurtbond@gmail.com"&gt;T. Kurt Bond&lt;/a&gt; </copyright><lastBuildDate>Sat, 10 Jul 2021 07:47:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Using getnstr from Chicken Scheme ncurses egg</title><link>https://tkurtbond.github.io/posts/2021/06/16/using-getnstr-from-chicken-scheme-ncurses-egg/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;The &lt;a class="reference external" href="https://www.call-cc.org/"&gt;Chicken Scheme&lt;/a&gt; documentation for the &lt;a class="reference external" href="http://wiki.call-cc.org/eggref/5/ncurses"&gt;ncurses egg&lt;/a&gt; says that
you should pass a string to the &lt;code class="docutils literal"&gt;getnstr&lt;/code&gt;, function, but that doesn't
actually work.&lt;/p&gt;
&lt;p&gt;I finally found an &lt;a class="reference external" href="https://stackoverflow.com/a/45359136"&gt;example&lt;/a&gt;, and after looking at it and figuring out
what imports are now required I have a working example of using
getnstr from the chicken scheme ncurses egg!&lt;/p&gt;
&lt;pre class="code scheme"&gt;&lt;a id="rest_code_f6e1ac31995045f994e2acd3214ead4c-1" name="rest_code_f6e1ac31995045f994e2acd3214ead4c-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;import&lt;/span&gt; &lt;span class="nv"&gt;ncurses&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_f6e1ac31995045f994e2acd3214ead4c-2" name="rest_code_f6e1ac31995045f994e2acd3214ead4c-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;chicken&lt;/span&gt; &lt;span class="nv"&gt;locative&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_f6e1ac31995045f994e2acd3214ead4c-3" name="rest_code_f6e1ac31995045f994e2acd3214ead4c-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;chicken&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_f6e1ac31995045f994e2acd3214ead4c-4" name="rest_code_f6e1ac31995045f994e2acd3214ead4c-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_f6e1ac31995045f994e2acd3214ead4c-5" name="rest_code_f6e1ac31995045f994e2acd3214ead4c-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-string&lt;/span&gt; &lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_f6e1ac31995045f994e2acd3214ead4c-6" name="rest_code_f6e1ac31995045f994e2acd3214ead4c-6"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;buffer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;make-string &lt;/span&gt;&lt;span class="nv"&gt;max&lt;/span&gt; &lt;span class="sc"&gt;#\null&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a id="rest_code_f6e1ac31995045f994e2acd3214ead4c-7" name="rest_code_f6e1ac31995045f994e2acd3214ead4c-7"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;getnstr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make-locative&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_f6e1ac31995045f994e2acd3214ead4c-8" name="rest_code_f6e1ac31995045f994e2acd3214ead4c-8"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;;; Delete the #\null characters.&lt;/span&gt;
&lt;a id="rest_code_f6e1ac31995045f994e2acd3214ead4c-9" name="rest_code_f6e1ac31995045f994e2acd3214ead4c-9"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string-translate&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt; &lt;span class="sc"&gt;#\null&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a id="rest_code_f6e1ac31995045f994e2acd3214ead4c-10" name="rest_code_f6e1ac31995045f994e2acd3214ead4c-10"&gt;&lt;/a&gt;
&lt;a id="rest_code_f6e1ac31995045f994e2acd3214ead4c-11" name="rest_code_f6e1ac31995045f994e2acd3214ead4c-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;stdscr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;initscr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_f6e1ac31995045f994e2acd3214ead4c-12" name="rest_code_f6e1ac31995045f994e2acd3214ead4c-12"&gt;&lt;/a&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;str&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-string&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a id="rest_code_f6e1ac31995045f994e2acd3214ead4c-13" name="rest_code_f6e1ac31995045f994e2acd3214ead4c-13"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;addstr&lt;/span&gt; &lt;span class="nv"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_f6e1ac31995045f994e2acd3214ead4c-14" name="rest_code_f6e1ac31995045f994e2acd3214ead4c-14"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;getch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_f6e1ac31995045f994e2acd3214ead4c-15" name="rest_code_f6e1ac31995045f994e2acd3214ead4c-15"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;write &lt;/span&gt;&lt;span class="nv"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_f6e1ac31995045f994e2acd3214ead4c-16" name="rest_code_f6e1ac31995045f994e2acd3214ead4c-16"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;endwin&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Oh, and I added the example to the ncurses egg documentation: &lt;a class="reference external" href="http://wiki.call-cc.org/eggref/5/ncurses#getnstr-example"&gt;getnstr
Example&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>chicken scheme</category><category>scheme</category><guid>https://tkurtbond.github.io/posts/2021/06/16/using-getnstr-from-chicken-scheme-ncurses-egg/</guid><pubDate>Wed, 16 Jun 2021 18:57:28 GMT</pubDate></item><item><title>SRFI-159 Supersedes Alix Shinn's fmt package</title><link>https://tkurtbond.github.io/posts/2020/11/13/srfi-159-supersedes-alix-shinns-fmt-package/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a note to help me remember to use &lt;a class="reference external" href="https://srfi.schemers.org/srfi-159/srfi-159.html"&gt;SRFI-159&lt;/a&gt; instead of &lt;a class="reference external" href="-http://wiki.call-cc.org/eggref/5/fmt"&gt;fmt&lt;/a&gt;
when I can.&lt;/p&gt;
&lt;p&gt;The scheme &lt;a class="reference external" href="https://srfi.schemers.org/srfi-159/srfi-159.html"&gt;SRFI-159&lt;/a&gt; is similar to the &lt;a class="reference external" href="http://call-cc.org/"&gt;Chicken Scheme&lt;/a&gt; &lt;a class="reference external" href="-http://wiki.call-cc.org/eggref/5/fmt"&gt;fmt&lt;/a&gt; egg
and is written by Alex Shinn and references his original &lt;a class="reference external" href="http://synthcode.com/scheme/fmt/"&gt;fmt -
Combinator Formating&lt;/a&gt; code on which the egg is based but it doesn’t
seem to be implemented for Chicken Scheme.  It does explain why there
isn’t a version of fmt for &lt;a class="reference external" href="https://github.com/ashinn/chibi-scheme"&gt;Chibi Scheme&lt;/a&gt;, since Chibi Scheme
includes an &lt;a class="reference external" href="https://github.com/ashinn/chibi-scheme/tree/master/lib/srfi/159"&gt;implementation&lt;/a&gt; of SRFI-159 already.  There doesn't seem
to be a &lt;a class="reference external" href="http://snow-fort.org/"&gt;Snow&lt;/a&gt; version either.&lt;/p&gt;&lt;/div&gt;</description><category>Alex Shinn</category><category>fmt</category><category>scheme</category><category>SRFI-159</category><guid>https://tkurtbond.github.io/posts/2020/11/13/srfi-159-supersedes-alix-shinns-fmt-package/</guid><pubDate>Fri, 13 Nov 2020 19:21:48 GMT</pubDate></item><item><title>Compiling s7 scheme on macOS</title><link>https://tkurtbond.github.io/posts/2020/08/03/compiling-s7-scheme-on-macos/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;To compile &lt;a class="reference external" href="https://ccrma.stanford.edu/software/snd/snd/s7.html"&gt;s7 scheme&lt;/a&gt; with a standalone &lt;a class="reference external" href="https://tkurtbond.github.io/pages/computer-vocabulary/#REPL"&gt;REPL&lt;/a&gt;, s7's home page says to
add the empty file &lt;span class="file"&gt;mus-config.h&lt;/span&gt; to the source directory, then
(in Linux):&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_c858b17e087b4eb4b09afad8c45093c6-1" name="rest_code_c858b17e087b4eb4b09afad8c45093c6-1"&gt;&lt;/a&gt;gcc s7.c -o repl -DWITH_MAIN -I. -O2 -g -ldl -lm -Wl,-export-dynamic
&lt;/pre&gt;&lt;p&gt;It turns out that on macOS, whose &lt;span class="command"&gt;ld&lt;/span&gt; (from clang) doesn't
understand &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-export-dynamic&lt;/span&gt;&lt;/code&gt;, you have to do&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_7871f5bde09c4075907a8c4a48c33da4-1" name="rest_code_7871f5bde09c4075907a8c4a48c33da4-1"&gt;&lt;/a&gt;gcc s7.c -o repl -DWITH_MAIN -I. -O2 -g -ldl -lm -Wl,-dynamic
&lt;/pre&gt;&lt;p&gt;Then you need to do&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_f02f3634dc9048cab9d664a39ba28573-1" name="rest_code_f02f3634dc9048cab9d664a39ba28573-1"&gt;&lt;/a&gt;./repl libc.scm
&lt;/pre&gt;&lt;p&gt;which seems to generate &lt;span class="file"&gt;libc_s7.c&lt;/span&gt; and compile it into
&lt;span class="file"&gt;libc_s.so&lt;/span&gt;.   Then you can run the &lt;a class="reference external" href="https://tkurtbond.github.io/pages/computer-vocabulary/#REPL"&gt;REPL&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_0c91faebd60b45a3abe3e9f70b46571e-1" name="rest_code_0c91faebd60b45a3abe3e9f70b46571e-1"&gt;&lt;/a&gt;./repl
&lt;/pre&gt;&lt;p&gt;which, from looking at &lt;span class="file"&gt;s7.c&lt;/span&gt;, loads &lt;span class="file"&gt;repl.scm&lt;/span&gt;.
Unfortunately, I don't understand the repl commands, except for
&lt;code class="docutils literal"&gt;pwd&lt;/code&gt; and &lt;code class="docutils literal"&gt;cd&lt;/code&gt;.  Oh, and &lt;code class="docutils literal"&gt;(exit)&lt;/code&gt; exits the repl.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Last edited: 2020-08-03 16:03:57 EDT&lt;/em&gt;&lt;/p&gt;
&lt;!-- Local Variables:
time-stamp-format: "%04y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
time-stamp-line-limit: -20
End: --&gt;&lt;/div&gt;</description><category>ld</category><category>macsOS</category><category>s7</category><category>scheme</category><guid>https://tkurtbond.github.io/posts/2020/08/03/compiling-s7-scheme-on-macos/</guid><pubDate>Mon, 03 Aug 2020 18:17:15 GMT</pubDate></item><item><title>Chicken 4.1.0 on Cygwin</title><link>https://tkurtbond.github.io/posts/2009/09/03/chicken-410-on-cygwin/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;Weird: after compiling and installing &lt;a class="reference external" href="http://www.call-with-current-continuation.org/"&gt;chicken&lt;/a&gt; with:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_c77862a2dfc7491f827bce87b9805567-1" name="rest_code_c77862a2dfc7491f827bce87b9805567-1"&gt;&lt;/a&gt;make &lt;span class="nv"&gt;PLATFORM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cygwin &lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/sw/versions/cygwin/chicken/4.1.0
&lt;a id="rest_code_c77862a2dfc7491f827bce87b9805567-2" name="rest_code_c77862a2dfc7491f827bce87b9805567-2"&gt;&lt;/a&gt;make &lt;span class="nv"&gt;PLATFORM&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;cygwin &lt;span class="nv"&gt;PREFIX&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/sw/versions/cygwin/chicken/4.1.0 install
&lt;/pre&gt;&lt;p&gt;I had to copy &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;/sw/versions/cygwin/chicken/4.1.0/lib/*.a&lt;/span&gt;&lt;/code&gt; to
&lt;code class="docutils literal"&gt;/sw/versions/cygwin/chicken/4.1.0/bin&lt;/code&gt; before it could link things
properly.  (I first noticed this while doing a
&lt;code&gt;$ chicken-install ncurses&lt;/code&gt;.)&lt;/p&gt;&lt;/div&gt;</description><category>chicken</category><category>cygwin</category><category>scheme</category><guid>https://tkurtbond.github.io/posts/2009/09/03/chicken-410-on-cygwin/</guid><pubDate>Thu, 03 Sep 2009 20:24:59 GMT</pubDate></item><item><title>Chicken and MinGW</title><link>https://tkurtbond.github.io/posts/2005/12/07/2005-12-07/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;To get Chicken version 2.207 to compile with MinGW I had to change the
line in configure that read&lt;/p&gt;
&lt;pre class="literal-block"&gt;mingw_libdir=`mingw32-gcc -print-prog-name=ld | sed 's%/lib/gcc-lib/.*%/lib%'`&lt;/pre&gt;
&lt;p&gt;with&lt;/p&gt;
&lt;pre class="literal-block"&gt;mingw_libdir=`mingw32-gcc -print-prog-name=ld | sed 's%/lib/gcc/.*%/lib%'`&lt;/pre&gt;
&lt;p&gt;and copy &lt;code class="docutils literal"&gt;posixwin.c&lt;/code&gt; over &lt;code class="docutils literal"&gt;posix.c&lt;/code&gt; and &lt;code class="docutils literal"&gt;uposixwin.c&lt;/code&gt; over
&lt;code class="docutils literal"&gt;uposix.c&lt;/code&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>chicken</category><category>mingw</category><category>old blog</category><category>scheme</category><guid>https://tkurtbond.github.io/posts/2005/12/07/2005-12-07/</guid><pubDate>Wed, 07 Dec 2005 05:00:00 GMT</pubDate></item><item><title>Skeptical about Macro Hygiene?</title><link>https://tkurtbond.github.io/posts/2005/01/24/2005-01-24/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;Eli Barzilay has a couple of interesting &lt;a class="reference external" href="http://groups-beta.google.com/group/comp.lang.scheme/msg/b9328703efaa8219"&gt;USENET&lt;/a&gt; &lt;a class="reference external" href="http://groups-beta.google.com/group/comp.lang.scheme/msg/4301f80b6534a85"&gt;articles&lt;/a&gt; on his
experience changing from &lt;code class="docutils literal"&gt;defmacro&lt;/code&gt; to &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;syntax-case&lt;/span&gt;&lt;/code&gt;. Unfortunately, I
didn't understand Shriram Krishnamurthi's &lt;a class="reference external" href="http://groups-beta.google.com/group/comp.lang.scheme/msg/f7f4e2373846759c"&gt;comments on hygiene&lt;/a&gt; at
all.&lt;/p&gt;
&lt;section id="additions-on-tuesday-21-april-2009"&gt;
&lt;h2&gt;Additions on Tuesday, 21 April 2009&lt;/h2&gt;
&lt;p&gt;I thought I'd better quote what he said:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;By the way, I've been skeptical about hygiene for the past six or
seven years.  The hygiene algorithm struck me as such an obviously
good idea that I simply couldn't understand what the MIT folks meant
when they said (and I'm paraphrasing, loosely, from papers I haven't
read in a decade) that the hygiene algorithm doesn't make sense.  Only
a few years ago did I begin to unravel this, and now I almost entirely
understand it.  In short, it has taken me nearly a decade to
understand why someone did not understand something that I understood
obviously, and it's only because what I understood obviously, I now
barely understand at all.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It's really simple to understand how to implement &lt;code class="docutils literal"&gt;defmacro&lt;/code&gt;.  It's
not simple to understand how to implement &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;syntax-case&lt;/span&gt;&lt;/code&gt;.  Throw in
modules, as in &lt;a class="reference external" href="http://www.plt-scheme.org/"&gt;PLT Scheme&lt;/a&gt; (and &lt;a class="reference external" href="http://www.r6rs.org/"&gt;R6RS&lt;/a&gt;, apparently), and things are
even more difficult.  Throw in the oddity of writing &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;syntax-case&lt;/span&gt;&lt;/code&gt;/&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;syntax-rules&lt;/span&gt;&lt;/code&gt; macros with the pattern matching syntax, and you
really have to wonder.&lt;/p&gt;
&lt;p&gt;I really wish somebody would sit down and write detailed survey
article comparing all the Lisp and Scheme macro systems and
considering all the interactions with modules and pattern matching.  I
think it's really needed.  [Do I say this somewhere else, too?]&lt;/p&gt;
&lt;/section&gt;&lt;/div&gt;</description><category>hygiene</category><category>lisp</category><category>macros</category><category>old blog</category><category>scheme</category><guid>https://tkurtbond.github.io/posts/2005/01/24/2005-01-24/</guid><pubDate>Mon, 24 Jan 2005 05:00:00 GMT</pubDate></item></channel></rss>