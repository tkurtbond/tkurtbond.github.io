<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lacking Natural Simplicity (Posts about ceres)</title><link>https://tkurtbond.github.io/</link><description></description><atom:link href="https://tkurtbond.github.io/categories/ceres.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2023 &lt;a href="mailto:tkurtbond@gmail.com"&gt;T. Kurt Bond&lt;/a&gt; </copyright><lastBuildDate>Sun, 19 Feb 2023 19:01:09 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>The School of Niklaus Wirth: The Art of Simplicity</title><link>https://tkurtbond.github.io/posts/2022/07/04/the-school-of-niklaus-wirth-the-art-of-simplicity/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;I've just finished &lt;a class="reference external" href="https://www.amazon.com/School-Niklaus-Wirth-Art-Simplicity/dp/1558607234"&gt;The School of Niklaus Wirth: The Art of
Simplicity&lt;/a&gt;, by Laszlo Boszormenyi (Editor), Jurg Gutknecht
(Editor), and Gustav Pomberger (Editor).&lt;/p&gt;
&lt;p&gt;This was an excellent retrospective of Niklaus Wirth's work, covering
the many important (and sometimes neglected) innovations he and his
coworkers created.  Although it was published in 2000 it is still a
very interesting and inspiring read.&lt;/p&gt;
&lt;p&gt;Niklaus Wirth is perhaps best known for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Pascal_(programming_language)"&gt;Pascal&lt;/a&gt;.  I learned Pascal
early on in my computing career, and found it much more to my taste
than BASIC, the language I had the most experience with previously.  I
programmed in &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Apple_Pascal"&gt;Apple Pascal&lt;/a&gt; (based on &lt;a class="reference external" href="https://en.wikipedia.org/wiki/UCSD_Pascal"&gt;UCSD Pascal&lt;/a&gt;) on the Apple
II+, and used Pascal on the original Macintosh.  Much of my
instruction at college used Oregon Software's Pascal 2 system for
VAX/VMS.  I also had an opportunity to use Pascal at work, using
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Turbo_Pascal"&gt;Turbo Pascal&lt;/a&gt; on MS-DOS.  While I found the expressiveness and power
of C very attractive, I still found the simpler syntax and safer type
system of Pascal very worthwhile, and missed it when writing C.&lt;/p&gt;
&lt;p&gt;However, I found Wirth's later programming language, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Oberon_(programming_language)"&gt;Oberon&lt;/a&gt; (see the
&lt;a class="reference external" href="https://people.inf.ethz.ch/wirth/Oberon/Oberon.Report.pdf"&gt;original&lt;/a&gt; and &lt;a class="reference external" href="https://people.inf.ethz.ch/wirth/Oberon/Oberon07.Report.pdf"&gt;revised&lt;/a&gt; language reports, and at archive.org: &lt;a class="reference external" href="https://web.archive.org/web/20220511145109/https://people.inf.ethz.ch/wirth/Oberon/Oberon.Report.pdf"&gt;OO&lt;/a&gt;,
&lt;a class="reference external" href="https://web.archive.org/web/20220601054803/https://people.inf.ethz.ch/wirth/Oberon/Oberon07.Report.pdf"&gt;OR&lt;/a&gt;), and the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Oberon_(operating_system)"&gt;operating system&lt;/a&gt; it was developed for, also called
Oberon, to be even more interesting.  While I never used the Ceres
computer on which Oberon originally ran, I &lt;strong&gt;did&lt;/strong&gt; used the later
versions of the Oberon system that ran hosted on Linux.  I was
particularly inspired by the further development of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Oberon-2"&gt;Oberon-2&lt;/a&gt;,
designed by Wirth and Hanspeter Mössenböck (see the language report,
&lt;a class="reference external" href="https://link.springer.com/content/pdf/bbm%3A978-3-642-97479-3%2F1.pdf"&gt;O2A&lt;/a&gt;, &lt;a class="reference external" href="http://www.math.bas.bg/bantchev/place/oberon/Oberon2-Report.pdf"&gt;O2B&lt;/a&gt;), and used in a wonderful book, &lt;cite&gt;Object-Oriented
Programming in Oberon-2&lt;/cite&gt;, also by Mössenböck (&lt;a class="reference external" href="http://norayr.am/papers/oop_in_oberon-2_book.pdf"&gt;OOP1&lt;/a&gt;, &lt;a class="reference external" href="https://ssw.jku.at/Research/Books/Oberon2.pdf"&gt;OOP2&lt;/a&gt;, and at
archive.org: &lt;a class="reference external" href="https://web.archive.org/web/20220704171021/http://norayr.am/papers/oop_in_oberon-2_book.pdf"&gt;OOP1A&lt;/a&gt;, &lt;a class="reference external" href="https://web.archive.org/web/20220704033614/https://ssw.jku.at/Research/Books/Oberon2.pdf"&gt;OOP2A&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Unfortunately most of my work at that time involved Unix heavily, and
it was difficult to write Oberon programs that interacted directly
with Unix, because Oberon's &lt;a class="reference external" href="https://en.wikipedia.org/wiki/API"&gt;API&lt;/a&gt;s were quite different than those of
Unix and C.  (I've since found some Oberon compilers that work a
little better on Unix machines, but most Oberon software continues to
be specific to the Oberon system.&lt;/p&gt;
&lt;p&gt;Alas, Oberon was indeed &lt;a class="reference external" href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.90.7173&amp;amp;rep=rep1&amp;amp;type=pdf"&gt;the overlooked jewel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I wish more people had taken more lessons from Niklaus Wirth when designing
the programming languages and operating systems that turned out to
dominate the computer systems of today.&lt;/p&gt;</description><category>c</category><category>ceres</category><category>lilith</category><category>modula-2</category><category>niklaus wirth</category><category>oberon</category><category>pascal</category><category>recent reading</category><category>unix</category><guid>https://tkurtbond.github.io/posts/2022/07/04/the-school-of-niklaus-wirth-the-art-of-simplicity/</guid><pubDate>Mon, 04 Jul 2022 15:33:38 GMT</pubDate></item></channel></rss>