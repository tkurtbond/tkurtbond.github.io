<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lacking Natural Simplicity (Posts about emacs)</title><link>https://tkurtbond.github.io/</link><description></description><atom:link href="https://tkurtbond.github.io/categories/emacs.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:tkurtbond@gmail.com"&gt;T. Kurt Bond&lt;/a&gt; </copyright><lastBuildDate>Tue, 27 Dec 2022 03:29:14 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Maintaining the old ada-mode.el formerly distributed with Emacs</title><link>https://tkurtbond.github.io/posts/2022/12/06/maintaining-the-old-ada-modeel-formerly-distributed-with-emacs/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;I wrote a &lt;a class="reference external" href="https://tkurtbond.github.io/posts/2022/07/09/using-the-old-version-of-ada-mode-for-emacs/"&gt;post&lt;/a&gt; about using the old ada-mode.el that used to be
distributed with &lt;span class="app"&gt;Emacs&lt;/span&gt; because I couldn't get the newer,
separate package &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/ada-mode.html"&gt;version&lt;/a&gt; to work for me.&lt;/p&gt;
&lt;p&gt;Well, this morning when I pulled up an Ada file in &lt;span class="app"&gt;Emacs&lt;/span&gt; version
28 there were two problems:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;The information to invoke ada-mode on Ada files was not in the
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;auto-mode-alist&lt;/span&gt;&lt;/code&gt; variable in &lt;span class="app"&gt;Emacs&lt;/span&gt;.  That was easy
enough to fix: add &lt;span class="file"&gt;.ada&lt;/span&gt;, &lt;span class="file"&gt;.ads&lt;/span&gt;, and &lt;span class="file"&gt;.adb&lt;/span&gt; to
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;auto-mode-alist&lt;/span&gt;&lt;/code&gt; (and &lt;span class="file"&gt;.gpr&lt;/span&gt;, too, since Ada mode works
for &lt;span class="app"&gt;gprbuild&lt;/span&gt; files as well):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_5aa5491daaf34beab7f822755b86d349-1" name="rest_code_5aa5491daaf34beab7f822755b86d349-1" href="https://tkurtbond.github.io/posts/2022/12/06/maintaining-the-old-ada-modeel-formerly-distributed-with-emacs/#rest_code_5aa5491daaf34beab7f822755b86d349-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cl-loop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ext&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\\.gpr$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.ada$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.ads$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.adb$"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_5aa5491daaf34beab7f822755b86d349-2" name="rest_code_5aa5491daaf34beab7f822755b86d349-2" href="https://tkurtbond.github.io/posts/2022/12/06/maintaining-the-old-ada-modeel-formerly-distributed-with-emacs/#rest_code_5aa5491daaf34beab7f822755b86d349-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'auto-mode-alist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cons&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ext&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'ada-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That was easy enough.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When I tried to do any indentation &lt;span class="cmd"&gt;emacs&lt;/span&gt; reported an error,
with the error message “End position is smaller than start
position”.  Eventually I tracked this down to a call to
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;parse-partial-sexp&lt;/span&gt;&lt;/code&gt; in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ada-in-open-paren-p&lt;/span&gt;&lt;/code&gt;.  It turns out
that somewhere after &lt;span class="app"&gt;Emacs&lt;/span&gt; version 27.2 was released the
&lt;span class="app"&gt;Emacs&lt;/span&gt; developers added a check to &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;parse-partial-sexp&lt;/span&gt;&lt;/code&gt; to
ensure that the &lt;code class="docutils literal"&gt;FROM&lt;/code&gt; argument (which indicates where in the
buffer to start parsing) was less than the &lt;code class="docutils literal"&gt;TO&lt;/code&gt; argument (which
indicates where in the buffer to &lt;strong&gt;stop&lt;/strong&gt; parsing).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Drat.  Drat.  Drat.  Well, looking at the code it was clear that
since &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ada-in-open-paren-p&lt;/span&gt;&lt;/code&gt; is explicitly searching backwards
that &lt;code class="docutils literal"&gt;TO&lt;/code&gt; would &lt;strong&gt;always&lt;/strong&gt; be smaller than &lt;code class="docutils literal"&gt;FROM&lt;/code&gt;.  So I could
just transpose the s-expressions that found those two values.  I
tried it, and it worked!&lt;/p&gt;
&lt;p&gt;At that point I realized that I had committed to maintain the old
version of ada-mode, at least for myself, and that I'd already talked
about it on my blog and it was small step from there to setting up a
GitHub &lt;a class="reference external" href="https://github.com/tkurtbond/old-ada-mode"&gt;repository&lt;/a&gt; with the old code, adding an &lt;a class="reference external" href="https://github.com/tkurtbond/old-ada-mode/issues/1"&gt;issue&lt;/a&gt; describing the
problem, adding a &lt;a class="reference external" href="https://github.com/tkurtbond/old-ada-mode/commit/7ee6fe55862ec615c7fe23d881adfee2d0094770"&gt;commit&lt;/a&gt; with the fix, and then writing this blog
post.&lt;/p&gt;
&lt;p&gt;Somewhere, someone is laughing and enjoying the schadenfreude.  Maybe
this will help someone else.&lt;/p&gt;
&lt;p&gt;And since I already have a GitHub &lt;a class="reference external" href="https://github.com/tkurtbond/old-ada-mode"&gt;repository&lt;/a&gt;, I ought to document the
first &lt;a class="reference external" href="https://github.com/tkurtbond/old-ada-mode/issues/2"&gt;problem&lt;/a&gt; and since it is a documentation problem, put a mention
in the &lt;a class="reference external" href="https://github.com/tkurtbond/old-ada-mode/commit/67a79caacd851120fee2bca4704938a2f27e1bba"&gt;README&lt;/a&gt;.&lt;/p&gt;</description><category>ada</category><category>ada-mode</category><category>ada-mode.el</category><category>emacs</category><guid>https://tkurtbond.github.io/posts/2022/12/06/maintaining-the-old-ada-modeel-formerly-distributed-with-emacs/</guid><pubDate>Tue, 06 Dec 2022 18:28:59 GMT</pubDate></item><item><title>Using the old version of Ada Mode for Emacs</title><link>https://tkurtbond.github.io/posts/2022/07/09/using-the-old-version-of-ada-mode-for-emacs/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;&lt;em&gt;Last edited: 2022-12-06 14:33:55 EST&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There are a lot of things to like about the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ada_(programming_language)"&gt;Ada&lt;/a&gt; programming language;
it seems to have a solid core of users, enough to support multiple
commercial implementations and a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Free_software"&gt;free/libre software&lt;/a&gt; implementation
that is part of the &lt;a class="reference external" href="https://gcc.gnu.org/"&gt;GNU Compiler Collection&lt;/a&gt;.  I occasionally use it
myself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;However:&lt;/strong&gt; I'm sure that the current version of &lt;a class="reference external" href="https://www.nongnu.org/ada-mode/"&gt;Ada Mode&lt;/a&gt; for
&lt;a class="reference external" href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; (available as an &lt;a class="reference external" href="https://elpa.gnu.org/"&gt;ELPA&lt;/a&gt; &lt;a class="reference external" href="https://elpa.gnu.org/packages/ada-mode.html"&gt;package&lt;/a&gt;, and thus not included in
&lt;span class="app"&gt;Emacs&lt;/span&gt; itself), which provides smart editing for the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ada_(programming_language)"&gt;Ada&lt;/a&gt;
programming language, and uses an external parser for the indentation,
fontification&lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2022/07/09/using-the-old-version-of-ada-mode-for-emacs/#fontification" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;, and navigation engine, is wonderful
if you can get it working, but I have &lt;strong&gt;never&lt;/strong&gt; been able to get it to
work.  My most recent try was today on Fedora 36 using GNAT 12.1.1
20220507 (Red Hat 12.1.1-1).&lt;/p&gt;
&lt;p&gt;Here's what happened when I tried to build the Ada code for the
parser, which is supplied as part of the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ada-mode&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ ./build.sh
ada_mode_wisi_parse.gpr:44:26: warning: object directory "obj" not found
Setup
   [mkdir]        object directory for project Ada_Mode_Wisi_Parse
Compile
   [Ada]          ada_mode_wisi_lalr_parse.ads
   [Ada]          ada_mode_wisi_lr1_parse.ads
   [Ada]          run_ada_lalr_parse.ads
   [Ada]          run_ada_lr1_parse.ads
   [Ada]          gpr_mode_wisi_parse.ads
   [Ada]          run_gpr_parse.ads
   [Ada]          gpr_query.adb
   [C]            wisitoken_grammar_re2c.c
   [C]            ada_re2c.c
   [C]            gpr_re2c.c
   [Ada]          ada_process_actions.adb
   [Ada]          ada_process_lr1_main.adb
   [Ada]          gen_run_wisi_lr_text_rep_parse.adb
   [Ada]          run_wisi_common_parse.adb
   [Ada]          wisi.adb
gnatcoll-sql.adb:742:07: error: ambiguous expression (cannot resolve "Append")
gnatcoll-sql.adb:742:07: error: possible interpretation at a-coinve.ads:280, instance at gnatcoll-sql.ads:1109
gnatcoll-sql.adb:742:07: error: possible interpretation at a-coinve.ads:270, instance at gnatcoll-sql.ads:1109

   compilation of gpr_query.adb failed

gprbuild: *** compilation phase failed&lt;/pre&gt;
&lt;p&gt;Sigh.  Without the external parser the current &lt;a class="reference external" href="https://www.nongnu.org/ada-mode/"&gt;Ada Mode&lt;/a&gt; is
completely unworkable: it doesn't even do indentation correctly, much
less do fontification.&lt;/p&gt;
&lt;p&gt;However, when I did some Ada work a number of years ago, I was ok
with the version that used to be in &lt;span class="app"&gt;Emacs&lt;/span&gt; itself.  So I dug it
out of the &lt;a class="reference external" href="https://savannah.gnu.org/git/?group=emacs"&gt;Emacs git repository&lt;/a&gt; at &lt;a class="reference external" href="https://savannah.gnu.org"&gt;savannah.gnu.org&lt;/a&gt;.  Basically,
I cloned the git repository and then figured out what commit it was
deleted in by doing:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ git rev-list HEAD -n 1 -- lisp/progmodes/ada-mode.el
a13c64204c8ead966789abf8efe176e4f2d4f599&lt;/pre&gt;
&lt;p&gt;Then I checked out the files involved:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ git checkout a13c64204c8ead966789abf8efe176e4f2d4f599^ lisp/progmodes/ada-mode.el lisp/progmodes/ada-prj.el lisp/progmodes/ada-stmt.el lisp/progmodes/ada-xref.el doc/misc/ada-mode.texi&lt;/pre&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;^&lt;/code&gt; at the end of the commit hash says to get the previous
commit.&lt;/p&gt;
&lt;p&gt;You'll also need &lt;span class="file"&gt;doc/docstyle.texi&lt;/span&gt; and
&lt;span class="file"&gt;doc/doclicense.texi&lt;/span&gt; if you want to build documentation from
&lt;span class="file"&gt;ada-mode.texi&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;And I've put the files in a &lt;a class="reference external" href="https://tkurtbond.github.io/emacs/old-ada-mode.zip"&gt;zip file&lt;/a&gt; for anybody who is in the same
situation as I was, along with the generated documentation files
&lt;span class="file"&gt;.info&lt;/span&gt;, &lt;span class="file"&gt;.html&lt;/span&gt;, and &lt;span class="file"&gt;.pdf&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Just put them somewhere on your &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;load-path&lt;/span&gt;&lt;/code&gt; and add &lt;code class="docutils literal"&gt;(autoload
&lt;span class="pre"&gt;'ada-mode&lt;/span&gt; &lt;span class="pre"&gt;"ada-mode")&lt;/span&gt;&lt;/code&gt; to your emacs config file.&lt;/p&gt;
&lt;p&gt;I'm sure the current &lt;a class="reference external" href="https://www.nongnu.org/ada-mode/"&gt;Ada Mode&lt;/a&gt; has a lot more useful features, and
I'd love to use it, but
this at least lets me edit with automatic indentation, formatting, and
fontification.&lt;/p&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="fontification" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://tkurtbond.github.io/posts/2022/07/09/using-the-old-version-of-ada-mode-for-emacs/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;‘Fontification’ is the process of displaying source code with
different font properties (such as color and typeface) for
differing syntactic roles.  &lt;a class="reference external" href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; and many other editors do this
to make it easier to distinguish different parts of the source
code, to help prevent errors.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;!--  --&gt;
&lt;!-- Local Variables:
time-stamp-format: "%Y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "\\*Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
End: --&gt;</description><category>ada</category><category>ada-mode</category><category>ada-mode.el</category><category>emacs</category><category>free/libre software</category><guid>https://tkurtbond.github.io/posts/2022/07/09/using-the-old-version-of-ada-mode-for-emacs/</guid><pubDate>Sun, 10 Jul 2022 02:20:40 GMT</pubDate></item><item><title>Recording the books I read with org-mode and org-capture</title><link>https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;I used to record the books that I read on this &lt;a class="reference external" href="https://tkurtbond.github.io/categories/recent-reading/"&gt;blog&lt;/a&gt;, but that took
too much &lt;a class="reference external" href="https://tkurtbond.github.io/posts/2010/07/21/reading-but-not-recording/"&gt;effort&lt;/a&gt;.  However, if I don't record the books I read, I
sometimes can't remember whether I read a particular book or not,
especially with Kindle Unlimited books.  (Was it the seventh book of
the series that I read last, or the eighth?)&lt;/p&gt;
&lt;p&gt;I record the books that I read in &lt;a class="reference external" href="https://www.gnu.org/software/emacs/"&gt;emacs&lt;/a&gt; using &lt;a class="reference external" href="https://orgmode.org/"&gt;org-mode&lt;/a&gt; and —
since today — &lt;a class="reference external" href="ttps://orgmode.org/manual/Capture.html"&gt;org-capture&lt;/a&gt;.  Here's what the org file looks like:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code text"&gt;&lt;a id="rest_code_782a7d2e85754792bd2f687f5a27be13-1" name="rest_code_782a7d2e85754792bd2f687f5a27be13-1" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_782a7d2e85754792bd2f687f5a27be13-1"&gt;&lt;/a&gt;* 2022
&lt;a id="rest_code_782a7d2e85754792bd2f687f5a27be13-2" name="rest_code_782a7d2e85754792bd2f687f5a27be13-2" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_782a7d2e85754792bd2f687f5a27be13-2"&gt;&lt;/a&gt;** Read
&lt;a id="rest_code_782a7d2e85754792bd2f687f5a27be13-3" name="rest_code_782a7d2e85754792bd2f687f5a27be13-3" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_782a7d2e85754792bd2f687f5a27be13-3"&gt;&lt;/a&gt;*** : Title of Book I Haven't Finished Reading -- https://www.amazon.com/amazon-book-link-if-it-exists
&lt;a id="rest_code_782a7d2e85754792bd2f687f5a27be13-4" name="rest_code_782a7d2e85754792bd2f687f5a27be13-4" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_782a7d2e85754792bd2f687f5a27be13-4"&gt;&lt;/a&gt;...
&lt;a id="rest_code_782a7d2e85754792bd2f687f5a27be13-5" name="rest_code_782a7d2e85754792bd2f687f5a27be13-5" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_782a7d2e85754792bd2f687f5a27be13-5"&gt;&lt;/a&gt;*** 2022-05-21: Title of Book I **Have** Finished Reading -- https://www.amazon.com/amazon-book-link-if-it-exists
&lt;a id="rest_code_782a7d2e85754792bd2f687f5a27be13-6" name="rest_code_782a7d2e85754792bd2f687f5a27be13-6" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_782a7d2e85754792bd2f687f5a27be13-6"&gt;&lt;/a&gt;...
&lt;a id="rest_code_782a7d2e85754792bd2f687f5a27be13-7" name="rest_code_782a7d2e85754792bd2f687f5a27be13-7" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_782a7d2e85754792bd2f687f5a27be13-7"&gt;&lt;/a&gt;** Did not finish
&lt;a id="rest_code_782a7d2e85754792bd2f687f5a27be13-8" name="rest_code_782a7d2e85754792bd2f687f5a27be13-8" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_782a7d2e85754792bd2f687f5a27be13-8"&gt;&lt;/a&gt;*** : Title of Book I Won't Finish Reading -- https://www.amazon.com/amazon-book-link-if-it-exists
&lt;a id="rest_code_782a7d2e85754792bd2f687f5a27be13-9" name="rest_code_782a7d2e85754792bd2f687f5a27be13-9" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_782a7d2e85754792bd2f687f5a27be13-9"&gt;&lt;/a&gt;...
&lt;a id="rest_code_782a7d2e85754792bd2f687f5a27be13-10" name="rest_code_782a7d2e85754792bd2f687f5a27be13-10" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_782a7d2e85754792bd2f687f5a27be13-10"&gt;&lt;/a&gt;* 2021
&lt;a id="rest_code_782a7d2e85754792bd2f687f5a27be13-11" name="rest_code_782a7d2e85754792bd2f687f5a27be13-11" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_782a7d2e85754792bd2f687f5a27be13-11"&gt;&lt;/a&gt;* Previously read, sometime
&lt;a id="rest_code_782a7d2e85754792bd2f687f5a27be13-12" name="rest_code_782a7d2e85754792bd2f687f5a27be13-12" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_782a7d2e85754792bd2f687f5a27be13-12"&gt;&lt;/a&gt;** Title of Book I Finished Reading at some indeterminate date in the past -- https://www.amazon.com/amazon-book-link-if-it-exists
&lt;a id="rest_code_782a7d2e85754792bd2f687f5a27be13-13" name="rest_code_782a7d2e85754792bd2f687f5a27be13-13" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_782a7d2e85754792bd2f687f5a27be13-13"&gt;&lt;/a&gt;...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I keep the org file in a &lt;span class="app"&gt;git&lt;/span&gt; repository hosted online so I can
edit it on whatever computer is close at hand, or on my cell phone.
(Having a &lt;span class="app"&gt;git&lt;/span&gt; client with a simple editor on my phone is
wonderful!)&lt;/p&gt;
&lt;p&gt;When I start reading a book I create a new entry by selecting the
title and author of the book on its Amazon page, use the Chrome
extension Create Link to create a plain text link, which I then insert
into the org file at the right heading level and with a &lt;code class="docutils literal"&gt;:␢&lt;/code&gt; (a
colon followed by a blank space) after the asterisks of the heading
and before the link.  When I'm done with reading the book I put the
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/ISO_8601"&gt;ISO 8601&lt;/a&gt; date (&lt;em&gt;YYYY-MM-DD&lt;/em&gt;) before the colon.&lt;/p&gt;
&lt;p&gt;I wrote a script today to count how many books I've read so far this
year:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_561dc50488d4479bb5659d054bba6a47-1" name="rest_code_561dc50488d4479bb5659d054bba6a47-1" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_561dc50488d4479bb5659d054bba6a47-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#! /usr/bin/env bash&lt;/span&gt;
&lt;a id="rest_code_561dc50488d4479bb5659d054bba6a47-2" name="rest_code_561dc50488d4479bb5659d054bba6a47-2" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_561dc50488d4479bb5659d054bba6a47-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_561dc50488d4479bb5659d054bba6a47-3" name="rest_code_561dc50488d4479bb5659d054bba6a47-3" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_561dc50488d4479bb5659d054bba6a47-3"&gt;&lt;/a&gt;&lt;span class="nv"&gt;YEAR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date &lt;span class="s1"&gt;'+%Y'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;a id="rest_code_561dc50488d4479bb5659d054bba6a47-4" name="rest_code_561dc50488d4479bb5659d054bba6a47-4" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_561dc50488d4479bb5659d054bba6a47-4"&gt;&lt;/a&gt;&lt;span class="nv"&gt;LAST_YEAR&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$((&lt;/span&gt;YEAR &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="k"&gt;))&lt;/span&gt;
&lt;a id="rest_code_561dc50488d4479bb5659d054bba6a47-5" name="rest_code_561dc50488d4479bb5659d054bba6a47-5" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_561dc50488d4479bb5659d054bba6a47-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_561dc50488d4479bb5659d054bba6a47-6" name="rest_code_561dc50488d4479bb5659d054bba6a47-6" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_561dc50488d4479bb5659d054bba6a47-6"&gt;&lt;/a&gt;sed -E -n &lt;span class="s2"&gt;"/^\* &lt;/span&gt;&lt;span class="nv"&gt;$YEAR&lt;/span&gt;&lt;span class="s2"&gt;/,/^(\*\* Did not finish|\* &lt;/span&gt;&lt;span class="nv"&gt;$LAST_YEAR&lt;/span&gt;&lt;span class="s2"&gt;)/p"&lt;/span&gt; &lt;span class="nv"&gt;$READ_FILE&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_561dc50488d4479bb5659d054bba6a47-7" name="rest_code_561dc50488d4479bb5659d054bba6a47-7" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_561dc50488d4479bb5659d054bba6a47-7"&gt;&lt;/a&gt;    sed -e &lt;span class="s2"&gt;"/^* &lt;/span&gt;&lt;span class="nv"&gt;$YEAR&lt;/span&gt;&lt;span class="s2"&gt;/d"&lt;/span&gt; -e &lt;span class="s2"&gt;"/^** Read/d"&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a id="rest_code_561dc50488d4479bb5659d054bba6a47-8" name="rest_code_561dc50488d4479bb5659d054bba6a47-8" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_561dc50488d4479bb5659d054bba6a47-8"&gt;&lt;/a&gt;        -e &lt;span class="s2"&gt;"/^(\*\* Did not finish|\* &lt;/span&gt;&lt;span class="nv"&gt;$LAST_YEAR&lt;/span&gt;&lt;span class="s2"&gt;)/d"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_561dc50488d4479bb5659d054bba6a47-9" name="rest_code_561dc50488d4479bb5659d054bba6a47-9" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_561dc50488d4479bb5659d054bba6a47-9"&gt;&lt;/a&gt;    sed -E -n &lt;span class="s2"&gt;"/^\*\*\*[ \t]+[0-9]/p"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_561dc50488d4479bb5659d054bba6a47-10" name="rest_code_561dc50488d4479bb5659d054bba6a47-10" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_561dc50488d4479bb5659d054bba6a47-10"&gt;&lt;/a&gt;    wc -l
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This gets all the lines for this year, or just up to the ones that I did not finish, if there are any yet, then gets read of the leading&lt;/p&gt;
&lt;p&gt;This works pretty well.&lt;/p&gt;
&lt;p&gt;And so far I've read 227 books this year.&lt;/p&gt;
&lt;p&gt;And then I got to thinking: I could probably use &lt;a class="reference external" href="ttps://orgmode.org/manual/Capture.html"&gt;org-capture&lt;/a&gt; to
automate finding the file, finding the right place to insert the
information, and then copying the link from the clipboard and
inserting it along with the heading formation!&lt;/p&gt;
&lt;p&gt;Here's the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;org-capture-templates&lt;/span&gt;&lt;/code&gt; value I use for this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_7460a4cc0d5e41718de01c7444350523-1" name="rest_code_7460a4cc0d5e41718de01c7444350523-1" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_7460a4cc0d5e41718de01c7444350523-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;org-capture-templates&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_7460a4cc0d5e41718de01c7444350523-2" name="rest_code_7460a4cc0d5e41718de01c7444350523-2" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_7460a4cc0d5e41718de01c7444350523-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="o"&gt;`&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Add book about to read"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;entry&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_7460a4cc0d5e41718de01c7444350523-3" name="rest_code_7460a4cc0d5e41718de01c7444350523-3" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_7460a4cc0d5e41718de01c7444350523-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;file+olp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;expand-file-name&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"~/Repos/tkb-org/Books/read.org"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_7460a4cc0d5e41718de01c7444350523-4" name="rest_code_7460a4cc0d5e41718de01c7444350523-4" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_7460a4cc0d5e41718de01c7444350523-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format-time-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"%Y"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Read"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_7460a4cc0d5e41718de01c7444350523-5" name="rest_code_7460a4cc0d5e41718de01c7444350523-5" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_7460a4cc0d5e41718de01c7444350523-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="s"&gt;"*** : %c"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;:prepend&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You'll want to read &lt;a class="reference external" href="https://orgmode.org/manual/Capture-templates.html"&gt;Capture templates&lt;/a&gt; to understand how this works.&lt;/p&gt;
&lt;p&gt;Of course, then I thought: what if my &lt;span class="app"&gt;emacs&lt;/span&gt; session lasts from
one year into the other, and I then add a new book?  It will have the
wrong year!&lt;/p&gt;
&lt;p&gt;And then I immediately thought of &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html"&gt;Advising Emacs Lisp Functions&lt;/a&gt;!
(I feel old — it was the &lt;code class="docutils literal"&gt;defadvice&lt;/code&gt; function when I started using
it.)&lt;/p&gt;
&lt;p&gt;So I added the following code:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_0d5189a91bc349dca0252cda203706eb-1" name="rest_code_0d5189a91bc349dca0252cda203706eb-1" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_0d5189a91bc349dca0252cda203706eb-1"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;defvar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tkb-org-year&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format-time-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"%Y"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0d5189a91bc349dca0252cda203706eb-2" name="rest_code_0d5189a91bc349dca0252cda203706eb-2" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_0d5189a91bc349dca0252cda203706eb-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"The year the current emacs session was started, for use with org-capture."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0d5189a91bc349dca0252cda203706eb-3" name="rest_code_0d5189a91bc349dca0252cda203706eb-3" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_0d5189a91bc349dca0252cda203706eb-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tkb-org-capture-advice-update-year&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kp"&gt;&amp;amp;optional&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;goto&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0d5189a91bc349dca0252cda203706eb-4" name="rest_code_0d5189a91bc349dca0252cda203706eb-4" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_0d5189a91bc349dca0252cda203706eb-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"Update ‘tkb-org-year’ and update the entry for adding a book in&lt;/span&gt;
&lt;a id="rest_code_0d5189a91bc349dca0252cda203706eb-5" name="rest_code_0d5189a91bc349dca0252cda203706eb-5" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_0d5189a91bc349dca0252cda203706eb-5"&gt;&lt;/a&gt;&lt;span class="s"&gt;‘org-capture-templates’ to use the new value."&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0d5189a91bc349dca0252cda203706eb-6" name="rest_code_0d5189a91bc349dca0252cda203706eb-6" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_0d5189a91bc349dca0252cda203706eb-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;new-year&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format-time-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"%Y"&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0d5189a91bc349dca0252cda203706eb-7" name="rest_code_0d5189a91bc349dca0252cda203706eb-7" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_0d5189a91bc349dca0252cda203706eb-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;unless&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string-equal&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tkb-org-year&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;new-year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0d5189a91bc349dca0252cda203706eb-8" name="rest_code_0d5189a91bc349dca0252cda203706eb-8" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_0d5189a91bc349dca0252cda203706eb-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;setf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tkb-org-year&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;new-year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0d5189a91bc349dca0252cda203706eb-9" name="rest_code_0d5189a91bc349dca0252cda203706eb-9" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_0d5189a91bc349dca0252cda203706eb-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;setf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;--&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"b"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;assoc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;it&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;org-capture-templates&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0d5189a91bc349dca0252cda203706eb-10" name="rest_code_0d5189a91bc349dca0252cda203706eb-10" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_0d5189a91bc349dca0252cda203706eb-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;                   &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;assoc&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'file+olp&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;it&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;nth&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;it&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0d5189a91bc349dca0252cda203706eb-11" name="rest_code_0d5189a91bc349dca0252cda203706eb-11" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_0d5189a91bc349dca0252cda203706eb-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;              &lt;/span&gt;&lt;span class="nv"&gt;tkb-org-year&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0d5189a91bc349dca0252cda203706eb-12" name="rest_code_0d5189a91bc349dca0252cda203706eb-12" href="https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/#rest_code_0d5189a91bc349dca0252cda203706eb-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;advice-add&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'org-capture&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;:before&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;#'&lt;/span&gt;&lt;span class="nv"&gt;tkb-org-capture-advice-update-year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I tested this by manually setting &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;tkb-org-year&lt;/span&gt;&lt;/code&gt; to &lt;code class="docutils literal"&gt;"2021"&lt;/code&gt; and
capturing a new book.  It worked fine!&lt;/p&gt;</description><category>advice-add</category><category>defadvice</category><category>emacs</category><category>emacs advice</category><category>org-capture</category><category>org-mode</category><category>reading</category><guid>https://tkurtbond.github.io/posts/2022/05/21/recording-the-books-i-read-with-org-mode-and-org-capture/</guid><pubDate>Sat, 21 May 2022 11:17:18 GMT</pubDate></item><item><title>define-word results using wordnik stopped working</title><link>https://tkurtbond.github.io/posts/2021/09/13/define-word-results-using-wordnik-stopped-working/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;I use &lt;a class="reference external" href="https://github.com/abo-abo/define-word"&gt;define-word&lt;/a&gt;, a package from melpa (&lt;a class="reference external" href="https://melpa.org/#/define-word"&gt;DWM&lt;/a&gt;), that looks up the
definition of a word online.  It uses &lt;a class="reference external" href="http://wordnik.com/"&gt;wordnik.com&lt;/a&gt; by default.
Recently it stopped returning definitions.&lt;/p&gt;
&lt;p&gt;I did a little digging, and it turns out that it works when
you visit the url with Chrome, but not if you just try to download it
with curl, or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;url-retrieve&lt;/span&gt;&lt;/code&gt; in Emacs. Adding a
“&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;User-Agent:&lt;/span&gt; Mozilla/5.0 (Macintosh; Intel Mac OS X 11_5_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36&lt;/code&gt;”
with curl’s -H option made it work.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_b4fb28589b1d41b989be140b86ff6f22-1" name="rest_code_b4fb28589b1d41b989be140b86ff6f22-1" href="https://tkurtbond.github.io/posts/2021/09/13/define-word-results-using-wordnik-stopped-working/#rest_code_b4fb28589b1d41b989be140b86ff6f22-1"&gt;&lt;/a&gt;curl -i -H &lt;span class="s1"&gt;'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 11_5_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36'&lt;/span&gt; http://wordnik.com/words/importunate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So I added a &lt;code class="docutils literal"&gt;let&lt;/code&gt; in my advice for &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;define-word&lt;/span&gt;&lt;/code&gt; that binds
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;url-request-extra-headers&lt;/span&gt;&lt;/code&gt; to an alist with &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;"User-Agent"&lt;/span&gt;&lt;/code&gt; as the
key and &lt;code class="docutils literal"&gt;"Mozilla/5.0 (Macintosh; Intel Mac OS X 11_5_2)
AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63
Safari/537.36"&lt;/code&gt; as the value, and it works again.&lt;/p&gt;
&lt;p&gt;My solution looks something like this (simplified from my actual advice,
which does other things too):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_d224d04f300548c184be6076a0bc3433-1" name="rest_code_d224d04f300548c184be6076a0bc3433-1" href="https://tkurtbond.github.io/posts/2021/09/13/define-word-results-using-wordnik-stopped-working/#rest_code_d224d04f300548c184be6076a0bc3433-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defadvice&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;define-word&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;around&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;your-around-define-word&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;activate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d224d04f300548c184be6076a0bc3433-2" name="rest_code_d224d04f300548c184be6076a0bc3433-2" href="https://tkurtbond.github.io/posts/2021/09/13/define-word-results-using-wordnik-stopped-working/#rest_code_d224d04f300548c184be6076a0bc3433-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"Dynamically bind tkb-define-word-word to the word passed in."&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d224d04f300548c184be6076a0bc3433-3" name="rest_code_d224d04f300548c184be6076a0bc3433-3" href="https://tkurtbond.github.io/posts/2021/09/13/define-word-results-using-wordnik-stopped-working/#rest_code_d224d04f300548c184be6076a0bc3433-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;url-request-extra-headers&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d224d04f300548c184be6076a0bc3433-4" name="rest_code_d224d04f300548c184be6076a0bc3433-4" href="https://tkurtbond.github.io/posts/2021/09/13/define-word-results-using-wordnik-stopped-working/#rest_code_d224d04f300548c184be6076a0bc3433-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;         &lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"User-Agent"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Mozilla/5.0 (Macintosh; Intel Mac OS X 11_5_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36"&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_d224d04f300548c184be6076a0bc3433-5" name="rest_code_d224d04f300548c184be6076a0bc3433-5" href="https://tkurtbond.github.io/posts/2021/09/13/define-word-results-using-wordnik-stopped-working/#rest_code_d224d04f300548c184be6076a0bc3433-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;ad-do-it&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I opened an &lt;a class="reference external" href="https://github.com/abo-abo/define-word/issues/31"&gt;issue&lt;/a&gt; on github, suggesting it might be a good idea to
add a simpler way to add a &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;User-Agent:&lt;/span&gt;&lt;/code&gt; header around
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;define-word--to-string&lt;/span&gt;&lt;/code&gt;’s call to &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;url-retrieve-synchronously&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;</description><category>define-word</category><category>emacs</category><category>wordnik</category><guid>https://tkurtbond.github.io/posts/2021/09/13/define-word-results-using-wordnik-stopped-working/</guid><pubDate>Mon, 13 Sep 2021 19:48:30 GMT</pubDate></item><item><title>Gitub repo for Arrow Macros for Emacs</title><link>https://tkurtbond.github.io/posts/2021/09/07/gitub-repo-for-arrow-macros-for-emacs/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;I've added a &lt;a class="reference external" href="https://github.com/tkurtbond/arrow-macros-for-emacs"&gt;Github repository&lt;/a&gt; for my port of &lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;CL-Arrows&lt;/a&gt; to
Emacs Lisp (&lt;a class="reference external" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/"&gt;original post&lt;/a&gt;), at the insistence of CPB.&lt;/p&gt;</description><category>arrow macros</category><category>clojure</category><category>common lisp</category><category>emacs</category><category>emacs lisp</category><guid>https://tkurtbond.github.io/posts/2021/09/07/gitub-repo-for-arrow-macros-for-emacs/</guid><pubDate>Tue, 07 Sep 2021 16:07:48 GMT</pubDate></item><item><title>Sorting words separated by commas</title><link>https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;I often have lists of "words", separated by commas, possibly on
multiple lines, like this example from a &lt;span class="file"&gt;Makefile&lt;/span&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code makefile"&gt;&lt;a id="rest_code_d7463ee7fd424f888e9b5ac26b6d3dce-1" name="rest_code_d7463ee7fd424f888e9b5ac26b6d3dce-1" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_d7463ee7fd424f888e9b5ac26b6d3dce-1"&gt;&lt;/a&gt;&lt;span class="c"&gt;#    bookman, schoolbook, palatino, times,&lt;/span&gt;
&lt;a id="rest_code_d7463ee7fd424f888e9b5ac26b6d3dce-2" name="rest_code_d7463ee7fd424f888e9b5ac26b6d3dce-2" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_d7463ee7fd424f888e9b5ac26b6d3dce-2"&gt;&lt;/a&gt;&lt;span class="c"&gt;#    helvetica, helvetica-narrow, optima, cormorant-garamond,&lt;/span&gt;
&lt;a id="rest_code_d7463ee7fd424f888e9b5ac26b6d3dce-3" name="rest_code_d7463ee7fd424f888e9b5ac26b6d3dce-3" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_d7463ee7fd424f888e9b5ac26b6d3dce-3"&gt;&lt;/a&gt;&lt;span class="c"&gt;#    or ebgaramond.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I find these lists are always getting out of order, or they end up
with some short lines and some long lines.  I want to be able to
reformat them automatically, like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code makefile"&gt;&lt;a id="rest_code_250d4f1673b64620a6973e71f12590ca-1" name="rest_code_250d4f1673b64620a6973e71f12590ca-1" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_250d4f1673b64620a6973e71f12590ca-1"&gt;&lt;/a&gt;&lt;span class="c"&gt;#    bookman, cormorant-garamond, ebgaramond, helvetica, helvetica-narrow,&lt;/span&gt;
&lt;a id="rest_code_250d4f1673b64620a6973e71f12590ca-2" name="rest_code_250d4f1673b64620a6973e71f12590ca-2" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_250d4f1673b64620a6973e71f12590ca-2"&gt;&lt;/a&gt;&lt;span class="c"&gt;#    optima, palatino, schoolbook, or times.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, I wrote three scripts to deal with them,
&lt;span class="command"&gt;sort-with-commas&lt;/span&gt;, &lt;span class="command"&gt;strip-leading-hash&lt;/span&gt; to get rid
of the leading hashes and spaces, and &lt;span class="command"&gt;prefix&lt;/span&gt; to put the
leading hashes and spaces back.&lt;/p&gt;
&lt;p&gt;Now, above I said "words", because really it's anything separated by
commas, so the "words" can contain space, etc.&lt;/p&gt;
&lt;p&gt;Also, notice that the period after "ebgaramond" and the "or" before
"ebgaramond"` in the original list disappear, and an "or " appears
before the new end of the list, "times", and a period follows it.  And
you can have have the same situation with "and".  So, the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-p&lt;/span&gt;&lt;/code&gt;
option to &lt;span class="command"&gt;sort-with-commas&lt;/span&gt; adds a period after the last
word, the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-a&lt;/span&gt;&lt;/code&gt; option adds and "and " before the last word, and the
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-o&lt;/span&gt;&lt;/code&gt; option adds an "or " before the last word.  If you are sorting
only part of a list, you want to have a comma after the last "word",
so there is the option &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/code&gt; for that.  And to remove the the period
from the original list, so it doesn't end up in the middle of the new
list, or to remove "and " or "or ", there is the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-r&lt;/span&gt;&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;The default is to return the sorted list as one long line, but you can
easily reformat it to multiple lines by running it through the Unix
command &lt;span class="command"&gt;fmt&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Although in this case the list is prefixed with a "#" and some spaces
because it comes from a comment in a Makefile, you have to remove
those to sort the list.  I wrote the script
&lt;span class="command"&gt;strip-leading-hash&lt;/span&gt; to do that, too, rather than having to
remember the &lt;span class="command"&gt;sed&lt;/span&gt; command to so that all the time.&lt;/p&gt;
&lt;p&gt;So, to sort the original list I'd run the command&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_57d9983acba5476f9c0b6db9af711f25-1" name="rest_code_57d9983acba5476f9c0b6db9af711f25-1" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_57d9983acba5476f9c0b6db9af711f25-1"&gt;&lt;/a&gt;strip-leading-hash &lt;span class="p"&gt;|&lt;/span&gt; sort-with-commas -r -p -o &lt;span class="p"&gt;|&lt;/span&gt; fmt &lt;span class="p"&gt;|&lt;/span&gt; prefix &lt;span class="s2"&gt;"#    "&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;which means “strip the leading hashes and spaces, remove the trailing
period and the "and " or "or ", add a final period after the last word,
add an "or " before the final word, reformat as a paragraph, and
prefix the lines with the hash and spaces.”&lt;/p&gt;
&lt;p&gt;When I use this I'm usually in &lt;span class="app"&gt;emacs&lt;/span&gt; and using &lt;span class="key"&gt;M-|&lt;/span&gt; to
run it on the region (the currently selected text), often with the
&lt;span class="key"&gt;C-u&lt;/span&gt; to replace the region with results.&lt;/p&gt;
&lt;p&gt;Here's the main script, &lt;span class="file"&gt;sort-with-commas&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://tkurtbond.github.io/listings/sort-with-commas.html"&gt;sort-with-commas&lt;/a&gt;  &lt;a class="reference external" href="https://tkurtbond.github.io/listings/sort-with-commas"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-1" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-1" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#! /usr/bin/env bash&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-2" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-2" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;###############################################################################&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-3" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-3" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Sort a list of words that are seperated by commas, optionally followed by&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-4" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-4" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# a newline into a single line seperated by commas followed by spaces.&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-5" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-5" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-6" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-6" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# For example: it translates (ignore the "# +" at the beginning of lines)&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-7" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-7" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#    bookman, schoolbook,palatino,&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-8" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-8" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#    times, helvetica, helvetica-narrow,&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-9" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-9" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# to&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-10" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-10" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-10"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#    bookman, helvetica, helvetica-narrow, palatino, schoolbook, times&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-11" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-11" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-11"&gt;&lt;/a&gt;&lt;span class="c1"&gt;###############################################################################&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-12" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-12" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-13" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-13" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-13"&gt;&lt;/a&gt;&lt;span class="nv"&gt;AND_OPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;off                     &lt;span class="c1"&gt;# Insert "and " before last word.&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-14" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-14" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-14"&gt;&lt;/a&gt;&lt;span class="nv"&gt;FINAL_OPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;off                   &lt;span class="c1"&gt;# Leave "," after last word.&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-15" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-15" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-15"&gt;&lt;/a&gt;&lt;span class="nv"&gt;OR_OPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;off                      &lt;span class="c1"&gt;# Insert "or " before last word.&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-16" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-16" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-16"&gt;&lt;/a&gt;&lt;span class="nv"&gt;PERIOD_OPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;off                  &lt;span class="c1"&gt;# Insert a final period after last word.&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-17" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-17" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-17"&gt;&lt;/a&gt;&lt;span class="nv"&gt;REMOVE_AND_OR_PERIOD_OPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;off
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-18" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-18" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-18"&gt;&lt;/a&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-19" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-19" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-19"&gt;&lt;/a&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-20" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-20" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-20"&gt;&lt;/a&gt;&lt;span class="nb"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-21" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-21" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-21"&gt;&lt;/a&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;getopts&lt;/span&gt; &lt;span class="s2"&gt;"?afhopr"&lt;/span&gt; opt
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-22" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-22" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-22"&gt;&lt;/a&gt;&lt;span class="k"&gt;do&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-23" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-23" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-23"&gt;&lt;/a&gt;    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$opt&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-24" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-24" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-24"&gt;&lt;/a&gt;        &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\?&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;h&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;let&lt;/span&gt; errors++ &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-25" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-25" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-25"&gt;&lt;/a&gt;        &lt;span class="o"&gt;(&lt;/span&gt;a&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;AND_OPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;on &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-26" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-26" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-26"&gt;&lt;/a&gt;        &lt;span class="o"&gt;(&lt;/span&gt;f&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;FINAL_OPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;on &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-27" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-27" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-27"&gt;&lt;/a&gt;        &lt;span class="o"&gt;(&lt;/span&gt;o&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;OR_OPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;on &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-28" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-28" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-28"&gt;&lt;/a&gt;        &lt;span class="o"&gt;(&lt;/span&gt;p&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;PERIOD_OPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;on &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-29" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-29" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-29"&gt;&lt;/a&gt;        &lt;span class="o"&gt;(&lt;/span&gt;r&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;REMOVE_AND_OR_PERIOD_OPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;on &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-30" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-30" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-30"&gt;&lt;/a&gt;    &lt;span class="k"&gt;esac&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-31" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-31" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-31"&gt;&lt;/a&gt;&lt;span class="k"&gt;done&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-32" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-32" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-32"&gt;&lt;/a&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-33" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-33" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-33"&gt;&lt;/a&gt;&lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt;OPTIND-1&lt;span class="k"&gt;))&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-34" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-34" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-34"&gt;&lt;/a&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-35" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-35" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-35"&gt;&lt;/a&gt;&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$#&lt;/span&gt; &amp;gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$errors&lt;/span&gt; &amp;gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-36" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-36" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-36"&gt;&lt;/a&gt;    cat &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-37" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-37" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-37"&gt;&lt;/a&gt;&lt;span class="s"&gt;usage: sort-with-commas [OPTION]&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-38" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-38" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-38"&gt;&lt;/a&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-39" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-39" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-39"&gt;&lt;/a&gt;&lt;span class="s"&gt;This reads its standard input and sorts a line or multiple lines with&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-40" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-40" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-40"&gt;&lt;/a&gt;&lt;span class="s"&gt;"words" separated by commas, then reassembles the line, words&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-41" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-41" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-41"&gt;&lt;/a&gt;&lt;span class="s"&gt;separated by a comma and s space, optionally leaving a final comma&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-42" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-42" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-42"&gt;&lt;/a&gt;&lt;span class="s"&gt;after the last word, or a period, and optionally putting "and " or "or&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-43" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-43" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-43"&gt;&lt;/a&gt;&lt;span class="s"&gt;" before the last word.&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-44" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-44" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-44"&gt;&lt;/a&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-45" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-45" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-45"&gt;&lt;/a&gt;&lt;span class="s"&gt;Options&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-46" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-46" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-46"&gt;&lt;/a&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-47" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-47" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-47"&gt;&lt;/a&gt;&lt;span class="s"&gt;-? -h   This message.&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-48" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-48" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-48"&gt;&lt;/a&gt;&lt;span class="s"&gt;-a      Insert "and " before last word.&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-49" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-49" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-49"&gt;&lt;/a&gt;&lt;span class="s"&gt;-f      Leave final comma after last word.&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-50" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-50" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-50"&gt;&lt;/a&gt;&lt;span class="s"&gt;-o      Insert "or " before last word.&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-51" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-51" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-51"&gt;&lt;/a&gt;&lt;span class="s"&gt;-p      Insert a period after the last word.&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-52" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-52" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-52"&gt;&lt;/a&gt;&lt;span class="s"&gt;-r      Remove "and " or "or " that occur at the beginning of a "word" in the&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-53" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-53" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-53"&gt;&lt;/a&gt;&lt;span class="s"&gt;        original list.&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-54" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-54" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-54"&gt;&lt;/a&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-55" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-55" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-55"&gt;&lt;/a&gt;&lt;span class="s"&gt;Note that combining -a and -o, or -f and -p do what you say, but the results&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-56" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-56" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-56"&gt;&lt;/a&gt;&lt;span class="s"&gt;are silly.&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-57" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-57" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-57"&gt;&lt;/a&gt;&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-58" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-58" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-58"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-59" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-59" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-59"&gt;&lt;/a&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-60" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-60" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-60"&gt;&lt;/a&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-61" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-61" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-61"&gt;&lt;/a&gt;tr &lt;span class="s1"&gt;','&lt;/span&gt; &lt;span class="s1"&gt;'\n'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed -E -e &lt;span class="s1"&gt;'s/^[ \t]+//'&lt;/span&gt; -e &lt;span class="s1"&gt;'/^$/d'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-62" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-62" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-62"&gt;&lt;/a&gt;    &lt;span class="o"&gt;([[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$REMOVE_AND_OR_PERIOD_OPT&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"on"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-63" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-63" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-63"&gt;&lt;/a&gt;         sed -E -e &lt;span class="s1"&gt;'s/^(and|or)[ \t]+//'&lt;/span&gt; -e &lt;span class="s1"&gt;'s/\.[ \t]*$//'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; cat&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-64" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-64" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-64"&gt;&lt;/a&gt;    sort -u &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-65" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-65" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-65"&gt;&lt;/a&gt;    sed -E -e &lt;span class="s1"&gt;'s/$/,/'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-66" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-66" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-66"&gt;&lt;/a&gt;    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$AND_OPT&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"on"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; sed -e &lt;span class="s1"&gt;'$s/^/and /'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; cat&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-67" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-67" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-67"&gt;&lt;/a&gt;    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$FINAL_OPT&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"on"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; cat&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; sed -e &lt;span class="s1"&gt;'$s/,//'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-68" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-68" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-68"&gt;&lt;/a&gt;    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$OR_OPT&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"on"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; sed -e &lt;span class="s1"&gt;'$s/^/or /'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; cat&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-69" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-69" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-69"&gt;&lt;/a&gt;    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$PERIOD_OPT&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"on"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; sed -e &lt;span class="s1"&gt;'$s/$/./'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; cat&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_c37671aa22204646a4d3fa9a62e47d1b-70" name="rest_code_c37671aa22204646a4d3fa9a62e47d1b-70" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_c37671aa22204646a4d3fa9a62e47d1b-70"&gt;&lt;/a&gt;    tr &lt;span class="s1"&gt;'\n'&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed -E -e &lt;span class="s1"&gt;'s/[ ]$//'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's &lt;span class="file"&gt;strip-leading-hash&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://tkurtbond.github.io/listings/strip-leading-hash.html"&gt;strip-leading-hash&lt;/a&gt;  &lt;a class="reference external" href="https://tkurtbond.github.io/listings/strip-leading-hash"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_ba691e67d69840b686d2c6db866aafff-1" name="rest_code_ba691e67d69840b686d2c6db866aafff-1" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_ba691e67d69840b686d2c6db866aafff-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#! /usr/bin/env bash&lt;/span&gt;
&lt;a id="rest_code_ba691e67d69840b686d2c6db866aafff-2" name="rest_code_ba691e67d69840b686d2c6db866aafff-2" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_ba691e67d69840b686d2c6db866aafff-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_ba691e67d69840b686d2c6db866aafff-3" name="rest_code_ba691e67d69840b686d2c6db866aafff-3" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_ba691e67d69840b686d2c6db866aafff-3"&gt;&lt;/a&gt;sed -E -e &lt;span class="s1"&gt;'s/^#[ \t]*//'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here's &lt;span class="file"&gt;prefix&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://tkurtbond.github.io/listings/prefix.html"&gt;prefix&lt;/a&gt;  &lt;a class="reference external" href="https://tkurtbond.github.io/listings/prefix"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_18f33973e2654558839ab093b4074891-1" name="rest_code_18f33973e2654558839ab093b4074891-1" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_18f33973e2654558839ab093b4074891-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#! /usr/bin/env bash&lt;/span&gt;
&lt;a id="rest_code_18f33973e2654558839ab093b4074891-2" name="rest_code_18f33973e2654558839ab093b4074891-2" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_18f33973e2654558839ab093b4074891-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_18f33973e2654558839ab093b4074891-3" name="rest_code_18f33973e2654558839ab093b4074891-3" href="https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/#rest_code_18f33973e2654558839ab093b4074891-3"&gt;&lt;/a&gt;sed &lt;span class="s2"&gt;"s/^/&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;/"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>bash</category><category>emacs</category><category>script</category><category>shell</category><guid>https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/</guid><pubDate>Fri, 16 Jul 2021 17:05:09 GMT</pubDate></item><item><title>Having Emacs time-stamps at the end of files</title><link>https://tkurtbond.github.io/posts/2020/08/05/having-emacs-time-stamps-at-the-end-of-files/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;Do you ever use &lt;span class="app"&gt;Emacs&lt;/span&gt; time stamp functionality (type &lt;span class="key"&gt;C-h
f time-stamp&lt;/span&gt; in &lt;span class="app"&gt;Emacs&lt;/span&gt; to learn about that) to insert the
current date time stamp into your file when you save it?  I use this
frequently in documents I write, for my blog or standalone.  For the
longest time I thought you had to have the time stamp at the beginning
of the file.  But I wanted it at the end of blog posts because it’s
really an afterthought to most readers.  (Sometimes I go back and edit
posts some time after first posting them — perhaps they were
incomplete, or they had errors that needed correcting, etc.)  It turns
out that you can do that — if you set the variable
&lt;code&gt;time-stamp-line-limit&lt;/code&gt; to a negative number it will look
backwards from the end of the file for the timestamp.  I often set the
time stamp variables in a &lt;code class="docutils literal"&gt;Local Variables:&lt;/code&gt; comment at the end of
the file.&lt;/p&gt;
&lt;p&gt;Here's the &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;reST&lt;/a&gt; fragment I insert into my blog posts that uses
&lt;code&gt;time-stamp&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code ReST"&gt;&lt;a id="rest_code_e731cfb3d11e497898108621eea6a801-1" name="rest_code_e731cfb3d11e497898108621eea6a801-1" href="https://tkurtbond.github.io/posts/2020/08/05/having-emacs-time-stamps-at-the-end-of-files/#rest_code_e731cfb3d11e497898108621eea6a801-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;role&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; app
&lt;a id="rest_code_e731cfb3d11e497898108621eea6a801-2" name="rest_code_e731cfb3d11e497898108621eea6a801-2" href="https://tkurtbond.github.io/posts/2020/08/05/having-emacs-time-stamps-at-the-end-of-files/#rest_code_e731cfb3d11e497898108621eea6a801-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;role&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; file
&lt;a id="rest_code_e731cfb3d11e497898108621eea6a801-3" name="rest_code_e731cfb3d11e497898108621eea6a801-3" href="https://tkurtbond.github.io/posts/2020/08/05/having-emacs-time-stamps-at-the-end-of-files/#rest_code_e731cfb3d11e497898108621eea6a801-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;role&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; command
&lt;a id="rest_code_e731cfb3d11e497898108621eea6a801-4" name="rest_code_e731cfb3d11e497898108621eea6a801-4" href="https://tkurtbond.github.io/posts/2020/08/05/having-emacs-time-stamps-at-the-end-of-files/#rest_code_e731cfb3d11e497898108621eea6a801-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;role&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; key
&lt;a id="rest_code_e731cfb3d11e497898108621eea6a801-5" name="rest_code_e731cfb3d11e497898108621eea6a801-5" href="https://tkurtbond.github.io/posts/2020/08/05/having-emacs-time-stamps-at-the-end-of-files/#rest_code_e731cfb3d11e497898108621eea6a801-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_e731cfb3d11e497898108621eea6a801-6" name="rest_code_e731cfb3d11e497898108621eea6a801-6" href="https://tkurtbond.github.io/posts/2020/08/05/having-emacs-time-stamps-at-the-end-of-files/#rest_code_e731cfb3d11e497898108621eea6a801-6"&gt;&lt;/a&gt;&lt;span class="cp"&gt;.. *Last edited: 2020-08-05 17:03:37 EDT*&lt;/span&gt;
&lt;a id="rest_code_e731cfb3d11e497898108621eea6a801-7" name="rest_code_e731cfb3d11e497898108621eea6a801-7" href="https://tkurtbond.github.io/posts/2020/08/05/having-emacs-time-stamps-at-the-end-of-files/#rest_code_e731cfb3d11e497898108621eea6a801-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_e731cfb3d11e497898108621eea6a801-8" name="rest_code_e731cfb3d11e497898108621eea6a801-8" href="https://tkurtbond.github.io/posts/2020/08/05/having-emacs-time-stamps-at-the-end-of-files/#rest_code_e731cfb3d11e497898108621eea6a801-8"&gt;&lt;/a&gt;&lt;span class="cp"&gt;..&lt;/span&gt;
&lt;a id="rest_code_e731cfb3d11e497898108621eea6a801-9" name="rest_code_e731cfb3d11e497898108621eea6a801-9" href="https://tkurtbond.github.io/posts/2020/08/05/having-emacs-time-stamps-at-the-end-of-files/#rest_code_e731cfb3d11e497898108621eea6a801-9"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   Local Variables:&lt;/span&gt;
&lt;a id="rest_code_e731cfb3d11e497898108621eea6a801-10" name="rest_code_e731cfb3d11e497898108621eea6a801-10" href="https://tkurtbond.github.io/posts/2020/08/05/having-emacs-time-stamps-at-the-end-of-files/#rest_code_e731cfb3d11e497898108621eea6a801-10"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   time-stamp-format: "%04y-%02m-%02d %02H:%02M:%02S %Z"&lt;/span&gt;
&lt;a id="rest_code_e731cfb3d11e497898108621eea6a801-11" name="rest_code_e731cfb3d11e497898108621eea6a801-11" href="https://tkurtbond.github.io/posts/2020/08/05/having-emacs-time-stamps-at-the-end-of-files/#rest_code_e731cfb3d11e497898108621eea6a801-11"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   time-stamp-start: "Last edited:[ \t]+\\\\?"&lt;/span&gt;
&lt;a id="rest_code_e731cfb3d11e497898108621eea6a801-12" name="rest_code_e731cfb3d11e497898108621eea6a801-12" href="https://tkurtbond.github.io/posts/2020/08/05/having-emacs-time-stamps-at-the-end-of-files/#rest_code_e731cfb3d11e497898108621eea6a801-12"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   time-stamp-end: "\\*\\\\?\n"&lt;/span&gt;
&lt;a id="rest_code_e731cfb3d11e497898108621eea6a801-13" name="rest_code_e731cfb3d11e497898108621eea6a801-13" href="https://tkurtbond.github.io/posts/2020/08/05/having-emacs-time-stamps-at-the-end-of-files/#rest_code_e731cfb3d11e497898108621eea6a801-13"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   time-stamp-line-limit: -20&lt;/span&gt;
&lt;a id="rest_code_e731cfb3d11e497898108621eea6a801-14" name="rest_code_e731cfb3d11e497898108621eea6a801-14" href="https://tkurtbond.github.io/posts/2020/08/05/having-emacs-time-stamps-at-the-end-of-files/#rest_code_e731cfb3d11e497898108621eea6a801-14"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   End:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>emacs</category><category>time-stamp</category><guid>https://tkurtbond.github.io/posts/2020/08/05/having-emacs-time-stamps-at-the-end-of-files/</guid><pubDate>Wed, 05 Aug 2020 20:34:22 GMT</pubDate></item><item><title>Arrow Macros in Emacs Lisp</title><link>https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;Are you familiar with arrow macros?  (They have nothing to do with
&lt;a class="reference external" href="https://en.wikibooks.org/wiki/Haskell/Understanding_arrows"&gt;arrows in Haskell&lt;/a&gt;.) They started out in &lt;a class="reference external" href="https://clojure.org/"&gt;Clojure&lt;/a&gt;, I think, and have
been ported to &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_Lisp"&gt;Common Lisp&lt;/a&gt; and probably other Lisps, though I didn't
find one for &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt;.  I think the &lt;a class="reference external" href="https://github.com/Harleqin/arrows"&gt;arrows&lt;/a&gt; package is the most up
to date in &lt;a class="reference external" href="https://www.quicklisp.org/"&gt;Quicklisp&lt;/a&gt; for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_Lisp"&gt;Common Lisp&lt;/a&gt;, but I found the &lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;
package first so that's the one I converted to &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; today.&lt;/p&gt;
&lt;p&gt;There were two slightly tricky parts to the port&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;I needed to use lexical binding for the source file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;'s test suite used fractions, but &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; doesn't
have them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyway, I think they're very useful.  If you have a value and
you want it to be processed by several functions in a chain you
can use an arrow macro instead of using lots of nested function
calls. For instance,&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_1f3dd6d1f66c4d64bbe969fb6c9ecfaa-1" name="rest_code_1f3dd6d1f66c4d64bbe969fb6c9ecfaa-1" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_1f3dd6d1f66c4d64bbe969fb6c9ecfaa-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"^-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"^-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-\\."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is annoying and hard to read on one line.  If you split it into multiple lines&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_625faa8e76cb471895fd4b2646ce1252-1" name="rest_code_625faa8e76cb471895fd4b2646ce1252-1" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_625faa8e76cb471895fd4b2646ce1252-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_625faa8e76cb471895fd4b2646ce1252-2" name="rest_code_625faa8e76cb471895fd4b2646ce1252-2" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_625faa8e76cb471895fd4b2646ce1252-2"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_625faa8e76cb471895fd4b2646ce1252-3" name="rest_code_625faa8e76cb471895fd4b2646ce1252-3" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_625faa8e76cb471895fd4b2646ce1252-3"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_625faa8e76cb471895fd4b2646ce1252-4" name="rest_code_625faa8e76cb471895fd4b2646ce1252-4" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_625faa8e76cb471895fd4b2646ce1252-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"^-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_625faa8e76cb471895fd4b2646ce1252-5" name="rest_code_625faa8e76cb471895fd4b2646ce1252-5" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_625faa8e76cb471895fd4b2646ce1252-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_625faa8e76cb471895fd4b2646ce1252-6" name="rest_code_625faa8e76cb471895fd4b2646ce1252-6" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_625faa8e76cb471895fd4b2646ce1252-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;"^-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_625faa8e76cb471895fd4b2646ce1252-7" name="rest_code_625faa8e76cb471895fd4b2646ce1252-7" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_625faa8e76cb471895fd4b2646ce1252-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_625faa8e76cb471895fd4b2646ce1252-8" name="rest_code_625faa8e76cb471895fd4b2646ce1252-8" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_625faa8e76cb471895fd4b2646ce1252-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"\\.+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_625faa8e76cb471895fd4b2646ce1252-9" name="rest_code_625faa8e76cb471895fd4b2646ce1252-9" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_625faa8e76cb471895fd4b2646ce1252-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_625faa8e76cb471895fd4b2646ce1252-10" name="rest_code_625faa8e76cb471895fd4b2646ce1252-10" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_625faa8e76cb471895fd4b2646ce1252-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="s"&gt;"\\.-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_625faa8e76cb471895fd4b2646ce1252-11" name="rest_code_625faa8e76cb471895fd4b2646ce1252-11" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_625faa8e76cb471895fd4b2646ce1252-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_625faa8e76cb471895fd4b2646ce1252-12" name="rest_code_625faa8e76cb471895fd4b2646ce1252-12" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_625faa8e76cb471895fd4b2646ce1252-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s"&gt;"-\\."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_625faa8e76cb471895fd4b2646ce1252-13" name="rest_code_625faa8e76cb471895fd4b2646ce1252-13" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_625faa8e76cb471895fd4b2646ce1252-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_625faa8e76cb471895fd4b2646ce1252-14" name="rest_code_625faa8e76cb471895fd4b2646ce1252-14" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_625faa8e76cb471895fd4b2646ce1252-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="s"&gt;"-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_625faa8e76cb471895fd4b2646ce1252-15" name="rest_code_625faa8e76cb471895fd4b2646ce1252-15" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_625faa8e76cb471895fd4b2646ce1252-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;that's also pretty horrible.  To read it you have to skip to the end,
figure out that function call, then skip back to the next function
call, and so forth, until you get back to the last function call,
reading it from inside out.  It looks much better if you use the
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; arrow macro, which substitutes the value you are passing along
as the last argument to the functions you are calling:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_05ec625172b6420282989d8c3b10bc9d-1" name="rest_code_05ec625172b6420282989d8c3b10bc9d-1" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_05ec625172b6420282989d8c3b10bc9d-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_05ec625172b6420282989d8c3b10bc9d-2" name="rest_code_05ec625172b6420282989d8c3b10bc9d-2" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_05ec625172b6420282989d8c3b10bc9d-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_05ec625172b6420282989d8c3b10bc9d-3" name="rest_code_05ec625172b6420282989d8c3b10bc9d-3" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_05ec625172b6420282989d8c3b10bc9d-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_05ec625172b6420282989d8c3b10bc9d-4" name="rest_code_05ec625172b6420282989d8c3b10bc9d-4" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_05ec625172b6420282989d8c3b10bc9d-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-\\."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_05ec625172b6420282989d8c3b10bc9d-5" name="rest_code_05ec625172b6420282989d8c3b10bc9d-5" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_05ec625172b6420282989d8c3b10bc9d-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_05ec625172b6420282989d8c3b10bc9d-6" name="rest_code_05ec625172b6420282989d8c3b10bc9d-6" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_05ec625172b6420282989d8c3b10bc9d-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_05ec625172b6420282989d8c3b10bc9d-7" name="rest_code_05ec625172b6420282989d8c3b10bc9d-7" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_05ec625172b6420282989d8c3b10bc9d-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"^-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_05ec625172b6420282989d8c3b10bc9d-8" name="rest_code_05ec625172b6420282989d8c3b10bc9d-8" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_05ec625172b6420282989d8c3b10bc9d-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I also think it is more understandable than the highly nested calls,
since you can follow along in from start to finish, rather than from
inside out: you've got the value, you pass it to the first function,
then to the second, and so forth.&lt;/p&gt;
&lt;p&gt;There are also macros to insert the value at the front of the argument
list (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt;&lt;/code&gt;) and to insert the value where a &lt;code class="docutils literal"&gt;&amp;lt;&amp;gt;&lt;/code&gt; symbol is found
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I wrote some &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; code with the last expression above today, and
I think it makes a good example of why they are useful.&lt;/p&gt;
&lt;p&gt;Here's the use case that inspired me to port them to &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs
Lisp&lt;/a&gt;.  When I save things from the internet I often want to
create a directory to save them in based on the filename or
some text on a web page or something, but usually there are
spaces or special characters in that text, so I have to
sanitize the text to make it a safe and simple filename.  So I
need to replace all special characters with dashes.  But I
don't want dashes repeated multiple times, just a single dash,
and I don't want dashes followed or preceded by periods, only
the period.&lt;/p&gt;
&lt;p&gt;Here' s some code to do that:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-1" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-1" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tkb-sanitize-for-filename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-2" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-2" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"Clean up characters in STRING that aren't good for&lt;/span&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-3" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-3" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-3"&gt;&lt;/a&gt;&lt;span class="s"&gt;filenames."&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-4" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-4" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-5" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-5" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-6" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-6" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-7" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-7" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-\\."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-8" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-8" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-9" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-9" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-10" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-10" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"^-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-11" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-11" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-12" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-12" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-13" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-13" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tkb-sanitize-kill-for-filename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-14" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-14" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"Clean up characters that aren't good for filenames in the&lt;/span&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-15" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-15" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-15"&gt;&lt;/a&gt;&lt;span class="s"&gt;top of the kill&lt;/span&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-16" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-16" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-16"&gt;&lt;/a&gt;&lt;span class="s"&gt;ring and put the result on the top of the kill ring."&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-17" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-17" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;;; gets the kill or the system clipboard if it is new.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-18" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-18" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-18"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interactive&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-kill&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-19" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-19" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-19"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;new-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;tkb-sanitize-for-filename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-20" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-20" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-20"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Old string: %s\nNew String: %s"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;new-string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-21" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-21" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-21"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kill-new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;new-string&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-22" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-22" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-22"&gt;&lt;/a&gt;
&lt;a id="rest_code_0047ad73d3254436b72d6e1a71d3dc81-23" name="rest_code_0047ad73d3254436b72d6e1a71d3dc81-23" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_0047ad73d3254436b72d6e1a71d3dc81-23"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"C-c k S"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'tkb-sanitize-kill-for-filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the function &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;tkb-sanitize-kill-for-filename&lt;/span&gt;&lt;/code&gt; that I use
interactively gets uses &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(current-kill&lt;/span&gt; 0 t)&lt;/code&gt; because it either
returns the top of the kill ring, or if the system clipboard is newer
it puts that on top of the kill ring and returns it.  (The docstring
of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;current-kill&lt;/span&gt;&lt;/code&gt; makes that a little difficult to figure out.)&lt;/p&gt;
&lt;p&gt;So if I have the name of a product as
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;"***Flashy####Product%%%%Name!!!!"&lt;/span&gt;&lt;/code&gt; I copy that to the clipboard
with &lt;span class="key"&gt;⌘-C&lt;/span&gt;, switch to emacs, do &lt;span class="key"&gt;C-c k S&lt;/span&gt;, switch back to
whatever program is saving the file, and use the generated,
sanitized name &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Flashy-Product-Name&lt;/span&gt;&lt;/code&gt; with &lt;span class="key"&gt;⌘-V&lt;/span&gt;.  Nifty!&lt;/p&gt;
&lt;p&gt;(And if you've ever wondered what the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Unicode"&gt;Unicode&lt;/a&gt; character for the Mac
keyboard &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Command_key"&gt;Command key&lt;/a&gt; (⌘) is, it is the PLACE OF INTEREST SIGN, and
you can enter it in &lt;span class="app"&gt;Emacs&lt;/span&gt; by &lt;span class="key"&gt;C-x 8 RETURN PLACE OF
INTEREST SIGN⏎&lt;/span&gt;.  The symbol they use for for the key labeled alt and
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Option_key"&gt;option&lt;/a&gt; (⌥) is the Unicode OPTION KEY, and the symbol they use for
the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Shift_key"&gt;Shift Key&lt;/a&gt; (⇧) is UPWARDS WHITE ARROW.  I'm surprised they
don't have a special symbol for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Control_key"&gt;Control&lt;/a&gt;, but it looks like they just
use the plain ASCII ^, known in Unicode as CIRCUMFLEX ACCENT.)&lt;/p&gt;
&lt;p&gt;Anyway, &lt;a class="reference external" href="https://tkurtbond.github.io/arrows-for-emacs.zip"&gt;here&lt;/a&gt;'s a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Info-ZIP"&gt;ZIP&lt;/a&gt; file with the Emacs Lisp source for the arrow
macros so you can use them if you've been convinced of their
usefulness by this post.  It also has some minimal documentation in
the &lt;span class="file"&gt;README.md&lt;/span&gt; that came from the &lt;span class="file"&gt;README.md&lt;/span&gt; from
&lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;, which seems to repeat the information from the
docstrings for the macros.&lt;/p&gt;
&lt;section id="section-1"&gt;
&lt;h2&gt;2021-09-07&lt;/h2&gt;
&lt;p&gt;Now in a &lt;a class="reference external" href="https://github.com/tkurtbond/arrow-macros-for-emacs"&gt;Gitub repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Last edited: 2021-09-07 13:25:09 EDT&lt;/em&gt;&lt;/p&gt;
&lt;!-- Local Variables:
time-stamp-format: "%Y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "\\*Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
time-stamp-line-limit: -20
End: --&gt;
&lt;/section&gt;</description><category>arrow macros</category><category>clojure</category><category>common lisp</category><category>emacs</category><category>emacs lisp</category><category>unicode</category><guid>https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/</guid><pubDate>Fri, 03 Jul 2020 18:11:16 GMT</pubDate></item><item><title>Getting nxml-mode in emacs to validate DocBook 5 documents</title><link>https://tkurtbond.github.io/posts/2019/11/05/getting-nxml-mode-in-emacs-to-validate-docbook-5-documents/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;I have occasion to edit and build a DocBook 5 document under both
macOS Catalina and Fedora 30.&lt;/p&gt;
&lt;p&gt;On macOS I've used homebrew to install the docbook, docbook-xsl, and
libxslt (for xsltproc), and fop formulas, and changed my PATH to
include the directory where brew installed &lt;code class="docutils literal"&gt;xsltproc&lt;/code&gt;. which will then
use &lt;code class="docutils literal"&gt;/usr/local/etc/xml/catalog&lt;/code&gt; to find files, in which brew installed
links to the docbook schemas and xsl stylesheets.&lt;/p&gt;
&lt;p&gt;On Fedora I've used &lt;code class="docutils literal"&gt;dnf&lt;/code&gt; to install the docbook5-schemas,
docbook5-style-xsl, and fop packages.&lt;/p&gt;
&lt;p&gt;The document builds fine on both OSes, but Emacs doesn't validate
properly against the DocBook RELAX NG schemas, because the &lt;code class="docutils literal"&gt;*.rnc&lt;/code&gt; files
supplied with Emacs (26.3 on macOS, 26.2 on Fedora) are for DocBook 4.
However, Emacs will look at a &lt;code class="docutils literal"&gt;schemas.xml&lt;/code&gt; file in the same directory
as the file you are editing to find the &lt;code class="docutils literal"&gt;*.rnc&lt;/code&gt; files.  Unfortunately,
of course, they have different locations on macOS with brew and on
Fedora.&lt;/p&gt;
&lt;p&gt;So I wrote a script, generate-schemas-xml, in bash using xmlcatalog to
look up the translation for the URI for the RELAX NG compiled schema
file and generate the &lt;code class="docutils literal"&gt;schemas.xml&lt;/code&gt; file and substitute the translation
into the file:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://tkurtbond.github.io/listings/generate-schemas-xml.html"&gt;generate-schemas-xml&lt;/a&gt;  &lt;a class="reference external" href="https://tkurtbond.github.io/listings/generate-schemas-xml"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code bash"&gt;&lt;a id="rest_code_bd927bc3f77145cc8ab434c44ecd433b-1" name="rest_code_bd927bc3f77145cc8ab434c44ecd433b-1" href="https://tkurtbond.github.io/posts/2019/11/05/getting-nxml-mode-in-emacs-to-validate-docbook-5-documents/#rest_code_bd927bc3f77145cc8ab434c44ecd433b-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#! /usr/bin/env bash&lt;/span&gt;
&lt;a id="rest_code_bd927bc3f77145cc8ab434c44ecd433b-2" name="rest_code_bd927bc3f77145cc8ab434c44ecd433b-2" href="https://tkurtbond.github.io/posts/2019/11/05/getting-nxml-mode-in-emacs-to-validate-docbook-5-documents/#rest_code_bd927bc3f77145cc8ab434c44ecd433b-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_bd927bc3f77145cc8ab434c44ecd433b-3" name="rest_code_bd927bc3f77145cc8ab434c44ecd433b-3" href="https://tkurtbond.github.io/posts/2019/11/05/getting-nxml-mode-in-emacs-to-validate-docbook-5-documents/#rest_code_bd927bc3f77145cc8ab434c44ecd433b-3"&gt;&lt;/a&gt;&lt;span class="nv"&gt;schema_location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;xmlcatalog &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="s2"&gt;"http://docbook.org/xml/5.0/rng/docbookxi.rnc"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_bd927bc3f77145cc8ab434c44ecd433b-4" name="rest_code_bd927bc3f77145cc8ab434c44ecd433b-4" href="https://tkurtbond.github.io/posts/2019/11/05/getting-nxml-mode-in-emacs-to-validate-docbook-5-documents/#rest_code_bd927bc3f77145cc8ab434c44ecd433b-4"&gt;&lt;/a&gt;    grep &lt;span class="s2"&gt;"^file:///"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;'s#^file://##'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;a id="rest_code_bd927bc3f77145cc8ab434c44ecd433b-5" name="rest_code_bd927bc3f77145cc8ab434c44ecd433b-5" href="https://tkurtbond.github.io/posts/2019/11/05/getting-nxml-mode-in-emacs-to-validate-docbook-5-documents/#rest_code_bd927bc3f77145cc8ab434c44ecd433b-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_bd927bc3f77145cc8ab434c44ecd433b-6" name="rest_code_bd927bc3f77145cc8ab434c44ecd433b-6" href="https://tkurtbond.github.io/posts/2019/11/05/getting-nxml-mode-in-emacs-to-validate-docbook-5-documents/#rest_code_bd927bc3f77145cc8ab434c44ecd433b-6"&gt;&lt;/a&gt;cat &amp;gt;schemas.xml &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;a id="rest_code_bd927bc3f77145cc8ab434c44ecd433b-7" name="rest_code_bd927bc3f77145cc8ab434c44ecd433b-7" href="https://tkurtbond.github.io/posts/2019/11/05/getting-nxml-mode-in-emacs-to-validate-docbook-5-documents/#rest_code_bd927bc3f77145cc8ab434c44ecd433b-7"&gt;&lt;/a&gt;&lt;span class="s"&gt;&amp;lt;locatingRules xmlns="http://thaiopensource.com/ns/locating-rules/1.0"&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_bd927bc3f77145cc8ab434c44ecd433b-8" name="rest_code_bd927bc3f77145cc8ab434c44ecd433b-8" href="https://tkurtbond.github.io/posts/2019/11/05/getting-nxml-mode-in-emacs-to-validate-docbook-5-documents/#rest_code_bd927bc3f77145cc8ab434c44ecd433b-8"&gt;&lt;/a&gt;&lt;span class="s"&gt;&amp;lt;namespace ns="http://docbook.org/ns/docbook" uri="$schema_location"/&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_bd927bc3f77145cc8ab434c44ecd433b-9" name="rest_code_bd927bc3f77145cc8ab434c44ecd433b-9" href="https://tkurtbond.github.io/posts/2019/11/05/getting-nxml-mode-in-emacs-to-validate-docbook-5-documents/#rest_code_bd927bc3f77145cc8ab434c44ecd433b-9"&gt;&lt;/a&gt;&lt;span class="s"&gt;&amp;lt;/locatingRules&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_bd927bc3f77145cc8ab434c44ecd433b-10" name="rest_code_bd927bc3f77145cc8ab434c44ecd433b-10" href="https://tkurtbond.github.io/posts/2019/11/05/getting-nxml-mode-in-emacs-to-validate-docbook-5-documents/#rest_code_bd927bc3f77145cc8ab434c44ecd433b-10"&gt;&lt;/a&gt;&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then I had my Makefile generate the &lt;code class="docutils literal"&gt;schemas.xml&lt;/code&gt; file if it was missing.&lt;/p&gt;
&lt;p&gt;It was more complicated that I'd have liked, but it does work.&lt;/p&gt;</description><category>docbook 5</category><category>emacs</category><category>fedora</category><category>macos</category><guid>https://tkurtbond.github.io/posts/2019/11/05/getting-nxml-mode-in-emacs-to-validate-docbook-5-documents/</guid><pubDate>Wed, 06 Nov 2019 01:32:24 GMT</pubDate></item><item><title>Defining keys in the C-x 8 prefix keymap</title><link>https://tkurtbond.github.io/posts/2012/10/03/defining-keys-in-the-c-x-8-prefix-keymap/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;Yay!  I finally found it!&lt;/p&gt;
&lt;p&gt;Suppose you hate typing “C-x 8 RET GREEK SMALL LETTER LAMBDA” to
insert a lowercase lambda character in emacs (perhaps because you have
a dull American keyboard and aren't very savvy to input methods).  You
can add a key definition to the “C-x 8 prefix keymap”, say “gl”, so
you can type “C-x 8 g l” and insert a lowercase lambda.&lt;/p&gt;
&lt;p&gt;Here's how you might do it for “λ”, “Λ”, and “§”:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(load-library "iso-transl.el")
(iso-transl-define-keys '(("gl" . [?λ])   ; greek lowercase lambda
                          ("gL" . [?Λ])   ; greek uppercase lambda
                          ("ps" . [?§]))) ; punctuation SECTION SIGN&lt;/pre&gt;</description><category>emacs</category><category>emacs lisp</category><category>key translation</category><category>unicode</category><guid>https://tkurtbond.github.io/posts/2012/10/03/defining-keys-in-the-c-x-8-prefix-keymap/</guid><pubDate>Thu, 04 Oct 2012 04:54:40 GMT</pubDate></item></channel></rss>