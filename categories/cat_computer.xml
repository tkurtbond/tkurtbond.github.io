<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lacking Natural Simplicity (Posts about computer)</title><link>https://tkurtbond.github.io/</link><description></description><atom:link href="https://tkurtbond.github.io/categories/cat_computer.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2021 &lt;a href="mailto:tkurtbond@gmail.com"&gt;T. Kurt Bond&lt;/a&gt; </copyright><lastBuildDate>Wed, 08 Sep 2021 21:17:13 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Gitub repo for Arrow Macros for Emacs</title><link>https://tkurtbond.github.io/posts/2021/09/07/gitub-repo-for-arrow-macros-for-emacs/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;I've added a &lt;a class="reference external" href="https://github.com/tkurtbond/arrow-macros-for-emacs"&gt;Github repository&lt;/a&gt; for my port of &lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;CL-Arrows&lt;/a&gt; to
Emacs Lisp (&lt;a class="reference external" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/"&gt;original post&lt;/a&gt;), at the insistence of CPB.&lt;/p&gt;</description><category>arrow macros</category><category>clojure</category><category>common lisp</category><category>emacs</category><category>emacs lisp</category><guid>https://tkurtbond.github.io/posts/2021/09/07/gitub-repo-for-arrow-macros-for-emacs/</guid><pubDate>Tue, 07 Sep 2021 16:07:48 GMT</pubDate></item><item><title>Sorting differs between LANG=C and LANG=en_US.UTF-8, even in ls</title><link>https://tkurtbond.github.io/posts/2021/07/28/sorting-differs-between-langc-and-langen_usutf-8-even-in-ls/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;This is here mostly to give me a concrete example of this happening.&lt;/p&gt;
&lt;p&gt;I have a directory, with two files in it, &lt;span class="file"&gt;ab.txt&lt;/span&gt; and
&lt;span class="file"&gt;a-c.txt&lt;/span&gt;.  Which sorts first when I do a &lt;span class="command"&gt;ls&lt;/span&gt;?  It
depends on what locale is set.  Like this:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_f13f70d55e524ee19f1799175652ebca-1"&gt;&lt;/a&gt;$ &lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_US.UTF-8 ls
&lt;a name="rest_code_f13f70d55e524ee19f1799175652ebca-2"&gt;&lt;/a&gt;ab.txt       a-c.txt
&lt;a name="rest_code_f13f70d55e524ee19f1799175652ebca-3"&gt;&lt;/a&gt;$ &lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;C ls
&lt;a name="rest_code_f13f70d55e524ee19f1799175652ebca-4"&gt;&lt;/a&gt;a-c.txt  ab.txt
&lt;/pre&gt;&lt;p&gt;Same thing happens with the &lt;span class="command"&gt;sort&lt;/span&gt; command:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_6e65117ca6494d2cae9f87f7ac82cefd-1"&gt;&lt;/a&gt;$ cat &amp;gt;a-c-first.txt
&lt;a name="rest_code_6e65117ca6494d2cae9f87f7ac82cefd-2"&gt;&lt;/a&gt;a-c.txt
&lt;a name="rest_code_6e65117ca6494d2cae9f87f7ac82cefd-3"&gt;&lt;/a&gt;ab.txt
&lt;a name="rest_code_6e65117ca6494d2cae9f87f7ac82cefd-4"&gt;&lt;/a&gt;$ cat &amp;gt;ab-first.txt
&lt;a name="rest_code_6e65117ca6494d2cae9f87f7ac82cefd-5"&gt;&lt;/a&gt;ab.txt
&lt;a name="rest_code_6e65117ca6494d2cae9f87f7ac82cefd-6"&gt;&lt;/a&gt;a-c.txt
&lt;a name="rest_code_6e65117ca6494d2cae9f87f7ac82cefd-7"&gt;&lt;/a&gt;$ &lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;C sort ab-first.txt
&lt;a name="rest_code_6e65117ca6494d2cae9f87f7ac82cefd-8"&gt;&lt;/a&gt;a-c.txt
&lt;a name="rest_code_6e65117ca6494d2cae9f87f7ac82cefd-9"&gt;&lt;/a&gt;ab.txt
&lt;a name="rest_code_6e65117ca6494d2cae9f87f7ac82cefd-10"&gt;&lt;/a&gt;$ &lt;span class="nv"&gt;LANG&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;en_US.UTF-8 sort a-c-first.txt
&lt;a name="rest_code_6e65117ca6494d2cae9f87f7ac82cefd-11"&gt;&lt;/a&gt;ab.txt
&lt;a name="rest_code_6e65117ca6494d2cae9f87f7ac82cefd-12"&gt;&lt;/a&gt;a-c.txt
&lt;/pre&gt;&lt;p&gt;I found this surprising when it first broke some code I was using,
since I'd spent so much of my existence in LANG=C (I'm still surprised
that Unicode has existed for more than half my life), but once I set
LANG=en_US.UTF-8 because I was using UTF-8 characters in my documents
I found I was in a different (sorting) world.&lt;/p&gt;&lt;/div&gt;</description><category>LANG=C</category><category>LANG=en_US.UTF-8</category><category>sort</category><category>sorting</category><guid>https://tkurtbond.github.io/posts/2021/07/28/sorting-differs-between-langc-and-langen_usutf-8-even-in-ls/</guid><pubDate>Wed, 28 Jul 2021 09:05:50 GMT</pubDate></item><item><title>Making an newer version of groff work with man and emacs on macOS</title><link>https://tkurtbond.github.io/posts/2021/07/26/making-an-newer-version-of-groff-work-with-man-and-emacs-on-macos/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;I'm posting this mostly to remind myself if I ever have to fiddle with
this again.&lt;/p&gt;
&lt;p&gt;I use a version of &lt;span class="app"&gt;groff&lt;/span&gt; installed from &lt;span class="app"&gt;git&lt;/span&gt; because some
of my documents depend on fixes that are coming out in the next
release, 1.23.0.  I install it on my macOS machine in
&lt;span class="file"&gt;/usr/local/sw/versions/groff/git&lt;/span&gt;.  (The directory hierarchy
under &lt;span class="file"&gt;/usr/local/sw/versions&lt;/span&gt; is where I put programs that I
compile from scratch, to keep them separated from the programs that
come from the operating system and/or package managers.  I often have
more than one version of a program installed, therefore the
&lt;span class="file"&gt;versions&lt;/span&gt; component of the name.)&lt;/p&gt;
&lt;p&gt;Because the &lt;span class="command"&gt;groff&lt;/span&gt; that is first in my path is the new one I
installed, and because &lt;span class="app"&gt;man&lt;/span&gt; on macOS knows to look for man pages
according to what your &lt;code class="docutils literal"&gt;PATH&lt;/code&gt; is, when I say &lt;code class="docutils literal"&gt;man groff_ms&lt;/code&gt; I get
the new man page for &lt;code class="docutils literal"&gt;groff_ms&lt;/code&gt;.  Yay!  Unfortunately, it gets
rendered with the old &lt;span class="app"&gt;groff&lt;/span&gt; that macOS supplies, version
1.19.2, which doesn't include the &lt;code class="docutils literal"&gt;.SY&lt;/code&gt; macro that current versions
of &lt;span class="app"&gt;groff&lt;/span&gt; supply in their &lt;span class="app"&gt;man&lt;/span&gt; macros, and which they
&lt;em&gt;use&lt;/em&gt; in their man pages, so it renders wrong.  A typical example is
that when it renders &lt;span class="man"&gt;groff_ms(7)&lt;/span&gt; the &lt;code class="docutils literal"&gt;groff &lt;span class="pre"&gt;-ms&lt;/span&gt;&lt;/code&gt; and
&lt;code class="docutils literal"&gt;groff &lt;span class="pre"&gt;-m&lt;/span&gt; ms&lt;/code&gt; are missing from the lines in the SYNOPSIS section.
Boo!&lt;/p&gt;
&lt;p&gt;Luckily, &lt;span class="app"&gt;man&lt;/span&gt; takes a &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-C&lt;/span&gt;&lt;/code&gt; option that lets you specify an
alternate configuration file (on macOS the default one is in
&lt;span class="file"&gt;/private/etc/man.conf&lt;/span&gt;), so you can supply one that specifies
the absolute path to the newer &lt;span class="app"&gt;groff&lt;/span&gt; you are using.  So I added&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_1ac7c893597a4fa2a7fd5bf62c2b549e-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;alias&lt;/span&gt; &lt;span class="nv"&gt;man&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'man -C ~/local/etc/man.conf'&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;to the appropriate shell startup file.  And I can add&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a name="rest_code_f7f6cd1459574f7cb1758c49782c4df9-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;Man-switches&lt;/span&gt; &lt;span class="s"&gt;"-C ~/local/etc/man.conf"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;to my &lt;span class="app"&gt;emacs&lt;/span&gt; configuration so it uses the right version of
&lt;span class="app"&gt;groff&lt;/span&gt; too.&lt;/p&gt;
&lt;p&gt;But a modern &lt;span class="app"&gt;groff&lt;/span&gt; produces ANSI escapes for bold and
underline, rather than the older convention of over-striking via the
backspace character with the same character for bold or with the
underscore character for underlining.  My pager, &lt;span class="app"&gt;less&lt;/span&gt;, can deal
with that, but something in &lt;span class="app"&gt;emacs&lt;/span&gt; doesn't like that, leaving
the buffer with &lt;span class="man"&gt;groff_ms(7)&lt;/span&gt; with underlining on every line.&lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2021/07/26/making-an-newer-version-of-groff-work-with-man-and-emacs-on-macos/#manual" id="id1"&gt;1&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Eventually I figured out that the old style over-striking via
backspaces worked just fine with emacs, so I added the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-P-c&lt;/span&gt;&lt;/code&gt; option
to the invocation of &lt;span class="app"&gt;groff&lt;/span&gt; in the NROFF definition in my
modified &lt;span class="file"&gt;man.conf&lt;/span&gt; file.  That tells &lt;span class="command"&gt;groff&lt;/span&gt; to pass
the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-c&lt;/span&gt;&lt;/code&gt; option to the &lt;span class="command"&gt;grotty&lt;/span&gt; output driver, which tells
it to use old-style backspace over-striking.&lt;/p&gt;
&lt;p&gt;This seems overly complicated.&lt;/p&gt;
&lt;p&gt;I suspect I'll need to do something different on the Linux boxes I
use.&lt;/p&gt;
&lt;div class="section" id="later"&gt;
&lt;h2&gt;Later&lt;/h2&gt;
&lt;p&gt;Aannnd I was right.  Fedora 33 has a similar problem, which I fixed by
creating a &lt;span class="file"&gt;~/.manpath&lt;/span&gt; file with&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_d999157d7c6348239b521b352ed409ec-1"&gt;&lt;/a&gt;DEFINE       nroff   /sw/versions/groff/git/bin/nroff -mandoc -P-c
&lt;/pre&gt;&lt;p&gt;in it.  I found the information I needed in &lt;span class="man"&gt;manpath(5)&lt;/span&gt;, which
documents the format of the &lt;span class="file"&gt;/etc/man_db.conf&lt;/span&gt; file.  (Why isn't
it &lt;span class="man"&gt;man_db.conf(5)&lt;/span&gt;, then?)&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="manual"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2021/07/26/making-an-newer-version-of-groff-work-with-man-and-emacs-on-macos/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Oddly, if I direct &lt;span class="app"&gt;man&lt;/span&gt;'s output to a file, visit that file in
&lt;span class="app"&gt;emacs&lt;/span&gt;, and manually invoke the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Man-fontify-manpage&lt;/span&gt;&lt;/code&gt; function
&lt;span class="app"&gt;emacs&lt;/span&gt; uses to fontify the man page, it &lt;em&gt;doesn't&lt;/em&gt; end up
erroneously underlined.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;em&gt;Last edited: 2021-07-28 05:33:55 EDT&lt;/em&gt;&lt;/p&gt;
&lt;!-- Local Variables:
time-stamp-format: "%Y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "\\*Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
time-stamp-line-limit: -20
End: --&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>groff</category><category>macos</category><category>troff</category><guid>https://tkurtbond.github.io/posts/2021/07/26/making-an-newer-version-of-groff-work-with-man-and-emacs-on-macos/</guid><pubDate>Mon, 26 Jul 2021 21:30:19 GMT</pubDate></item><item><title>install-font.sh - The simple approach</title><link>https://tkurtbond.github.io/posts/2021/07/17/install-fontsh-the-simple-approach/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;The simple approach to using &lt;a class="reference external" href="https://www.schaffter.ca/mom/mom-05.html#install-font"&gt;install-font.sh&lt;/a&gt; to install fonts for
&lt;span class="app"&gt;groff&lt;/span&gt; probably works for almost everybody.&lt;/p&gt;
&lt;p&gt;First, make sure that &lt;a class="reference external" href="https://fontforge.org/"&gt;FontForge&lt;/a&gt; is installed; it is free and open
source and available for installation in most distributions.  Second,
call the &lt;span class="command"&gt;install-font.sh&lt;/span&gt; command with one argument, the
font file, and answer the prompts.&lt;/p&gt;
&lt;p&gt;This will install the fonts for &lt;span class="app"&gt;groff&lt;/span&gt;'s use in the appropriate
directories under &lt;span class="file"&gt;/usr/local/share/groff&lt;/span&gt;, creating the
directories if necessary.  If you need to install into
&lt;span class="file"&gt;/usr/share/groff&lt;/span&gt; you should specify the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-s&lt;/span&gt;&lt;/code&gt; option to the
script.  For instance:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_fcd20ada2a444b6b9ef8a78217b4c9dc-1"&gt;&lt;/a&gt;$ install-font.sh Lora-Regular.ttf
&lt;/pre&gt;&lt;p&gt;will install the Regular variant of the font, leading you through four
prompts, for three of which you just need to take the default.&lt;/p&gt;
&lt;p&gt;The only prompt where you need to do something other than accept the
default is the prompt for the style.  For &lt;span class="file"&gt;Lora-Regular&lt;/span&gt; you'd
specify &lt;code class="docutils literal"&gt;+R&lt;/code&gt;.  For italic, bold, and bold italic, the other
traditional &lt;span class="app"&gt;troff&lt;/span&gt; font styles, you'd specify &lt;code class="docutils literal"&gt;+I&lt;/code&gt;, &lt;code class="docutils literal"&gt;+B&lt;/code&gt;,
and &lt;code class="docutils literal"&gt;+BI&lt;/code&gt;.  The prompt lists them all for you to choose from.&lt;/p&gt;
&lt;p&gt;Here's a walk-through of installing the &lt;a class="reference external" href="https://fonts.google.com/specimen/Lora"&gt;Lora&lt;/a&gt; font, assuming that
&lt;span class="command"&gt;install-font.sh&lt;/span&gt; is in your path.  (If your
&lt;span class="file"&gt;/usr/local/share/groff&lt;/span&gt; directory isn't writable for your
normal user, you should prefix the command with &lt;code class="docutils literal"&gt;sudo&lt;/code&gt;.)&lt;/p&gt;
&lt;p&gt;&lt;span class="command"&gt;install-font.sh&lt;/span&gt; does produce a lot of output, but the
colorizing helps pick out the important things.  I've put the
responses the user types in bold and red, and added â&amp;lt;RETURN&amp;gt;â
where the user presses the RETURN key to accept defaults.&lt;/p&gt;
&lt;pre&gt;
$ &lt;span style="color:red;"&gt;&lt;b&gt;install-font.sh Lora-Regular.ttf&lt;/b&gt;&lt;/span&gt;
/usr/local/share/groff/site-font not found; creating.
/usr/local/share/groff/site-font/devps not found; creating.
/usr/local/share/groff/site-font/devpdf not found; creating.
Processing &lt;span style="color:teal;"&gt;Lora-Regular.ttf&lt;/span&gt;...
Running fontforge...
Copyright (c) 2000-2020. See AUTHORS for Contributors.
 License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
 with many parts BSD &amp;lt;http://fontforge.org/license.html&amp;gt;. Please read LICENSE.
 Version: 20201107
 Based on sources from 2020-11-16 19:11 UTC-D.
The following table(s) in the font have been ignored by FontForge
  Ignoring 'STAT' style attributes table
Done.
Family name (default = Lora): &lt;span style="color:red;"&gt;&lt;b&gt;&amp;lt;RETURN&amp;gt;&lt;/b&gt;&lt;/span&gt;
  =&amp;gt;&lt;span style="color:teal;"&gt;Lora-Regular&lt;/span&gt; (Lora-Regular.ttf) assigned to family '&lt;span style="color:olive;"&gt;Lora&lt;/span&gt;'.
Enter +STYLE (eg +R, +I, +B, +BI), or a unique groff name for &lt;span style="color:teal;"&gt;Lora-Regular&lt;/span&gt;.
Leave blank to set name to '&lt;span style="color:teal;"&gt;Lora-Regular&lt;/span&gt;': &lt;span style="color:red;"&gt;&lt;b&gt;+R&lt;/b&gt;&lt;/span&gt;
  =&amp;gt;&lt;span style="color:teal;"&gt;Lora-Regular&lt;/span&gt; assigned groff fontname '&lt;span style="color:olive;"&gt;LoraR&lt;/span&gt;'.
Creating &lt;span style="color:olive;"&gt;LoraR&lt;/span&gt;...
afmtodit: both uni00B5 and uni03BC map to mc at /Users/tkb/sw/versions/groff/git/bin/afmtodit line 6441.
Done.
Installing &lt;span style="color:olive;"&gt;LoraR&lt;/span&gt; in /usr/local/share/groff/site-font/devps/... Done.
Make &lt;span style="color:olive;"&gt;LoraR&lt;/span&gt; available to gropdf? (y/n; default = y) &lt;span style="color:red;"&gt;&lt;b&gt;&amp;lt;RETURN&amp;gt;&lt;/b&gt;&lt;/span&gt;
Checking for gropdf executable and devpdf directory... gropdf found.
Installing &lt;span style="color:olive;"&gt;LoraR&lt;/span&gt; in /usr/local/share/groff/site-font/devpdf/... Done.
Copy &lt;span style="color:teal;"&gt;Lora-Regular.ttf&lt;/span&gt; to /usr/local/share/fonts/truetype/Lora/
  (y/n; default = n) &lt;span style="color:red;"&gt;&lt;b&gt;&amp;lt;RETURN&amp;gt;&lt;/b&gt;&lt;/span&gt;
Install &lt;span style="color:teal;"&gt;Lora-Regular.ttf&lt;/span&gt; manually to make it available system-wide.
$ &lt;span style="color:red;"&gt;&lt;b&gt;install-font.sh Lora-Italic.ttf&lt;/b&gt;&lt;/span&gt;
Processing &lt;span style="color:teal;"&gt;Lora-Italic.ttf&lt;/span&gt;...
Running fontforge...
Copyright (c) 2000-2020. See AUTHORS for Contributors.
 License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
 with many parts BSD &amp;lt;http://fontforge.org/license.html&amp;gt;. Please read LICENSE.
 Version: 20201107
 Based on sources from 2020-11-16 19:11 UTC-D.
The following table(s) in the font have been ignored by FontForge
  Ignoring 'STAT' style attributes table
Done.
Family name (default = Lora): &lt;span style="color:red;"&gt;&lt;b&gt;&amp;lt;RETURN&amp;gt;&lt;/b&gt;&lt;/span&gt;
  =&amp;gt;&lt;span style="color:teal;"&gt;Lora-Italic&lt;/span&gt; (Lora-Italic.ttf) assigned to family '&lt;span style="color:olive;"&gt;Lora&lt;/span&gt;'.
Enter +STYLE (eg +R, +I, +B, +BI), or a unique groff name for &lt;span style="color:teal;"&gt;Lora-Italic&lt;/span&gt;.
Leave blank to set name to '&lt;span style="color:teal;"&gt;Lora-Italic&lt;/span&gt;': &lt;span style="color:red;"&gt;&lt;b&gt;+I&lt;/b&gt;&lt;/span&gt;
  =&amp;gt;&lt;span style="color:teal;"&gt;Lora-Italic&lt;/span&gt; assigned groff fontname '&lt;span style="color:olive;"&gt;LoraI&lt;/span&gt;'.
Creating &lt;span style="color:olive;"&gt;LoraI&lt;/span&gt;...
afmtodit: both uni00B5 and uni03BC map to mc at /Users/tkb/sw/versions/groff/git/bin/afmtodit line 6441.
Done.
Installing &lt;span style="color:olive;"&gt;LoraI&lt;/span&gt; in /usr/local/share/groff/site-font/devps/... Done.
Make &lt;span style="color:olive;"&gt;LoraI&lt;/span&gt; available to gropdf? (y/n; default = y) &lt;span style="color:red;"&gt;&lt;b&gt;&amp;lt;RETURN&amp;gt;&lt;/b&gt;&lt;/span&gt;
Checking for gropdf executable and devpdf directory... gropdf found.
Installing &lt;span style="color:olive;"&gt;LoraI&lt;/span&gt; in /usr/local/share/groff/site-font/devpdf/... Done.
Copy &lt;span style="color:teal;"&gt;Lora-Italic.ttf&lt;/span&gt; to /usr/local/share/fonts/truetype/Lora/
  (y/n; default = n) &lt;span style="color:red;"&gt;&lt;b&gt;&amp;lt;RETURN&amp;gt;&lt;/b&gt;&lt;/span&gt;
Install &lt;span style="color:teal;"&gt;Lora-Italic.ttf&lt;/span&gt; manually to make it available system-wide.
$ &lt;span style="color:red;"&gt;&lt;b&gt;install-font.sh Lora-Bold.ttf&lt;/b&gt;&lt;/span&gt;
Processing &lt;span style="color:teal;"&gt;Lora-Bold.ttf&lt;/span&gt;...
Running fontforge...
Copyright (c) 2000-2020. See AUTHORS for Contributors.
 License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
 with many parts BSD &amp;lt;http://fontforge.org/license.html&amp;gt;. Please read LICENSE.
 Version: 20201107
 Based on sources from 2020-11-16 19:11 UTC-D.
The following table(s) in the font have been ignored by FontForge
  Ignoring 'STAT' style attributes table
Glyph bounding box data exceeds font bounding box data for GID 4
  Subsequent errors will not be reported.
In GID 769 the advance width (1316) is greater than the stated maximum (1291)
  Subsequent errors will not be reported.
Done.
Family name (default = Lora): &lt;span style="color:red;"&gt;&lt;b&gt;&amp;lt;RETURN&amp;gt;&lt;/b&gt;&lt;/span&gt;
  =&amp;gt;&lt;span style="color:teal;"&gt;Lora-Bold&lt;/span&gt; (Lora-Bold.ttf) assigned to family '&lt;span style="color:olive;"&gt;Lora&lt;/span&gt;'.
Enter +STYLE (eg +R, +I, +B, +BI), or a unique groff name for &lt;span style="color:teal;"&gt;Lora-Bold&lt;/span&gt;.
Leave blank to set name to '&lt;span style="color:teal;"&gt;Lora-Bold&lt;/span&gt;': &lt;span style="color:red;"&gt;&lt;b&gt;+B&lt;/b&gt;&lt;/span&gt;
  =&amp;gt;&lt;span style="color:teal;"&gt;Lora-Bold&lt;/span&gt; assigned groff fontname '&lt;span style="color:olive;"&gt;LoraB&lt;/span&gt;'.
Creating &lt;span style="color:olive;"&gt;LoraB&lt;/span&gt;...
afmtodit: both uni00B5 and uni03BC map to mc at /Users/tkb/sw/versions/groff/git/bin/afmtodit line 6441.
Done.
Installing &lt;span style="color:olive;"&gt;LoraB&lt;/span&gt; in /usr/local/share/groff/site-font/devps/... Done.
Make &lt;span style="color:olive;"&gt;LoraB&lt;/span&gt; available to gropdf? (y/n; default = y) &lt;span style="color:red;"&gt;&lt;b&gt;&amp;lt;RETURN&amp;gt;&lt;/b&gt;&lt;/span&gt;
Checking for gropdf executable and devpdf directory... gropdf found.
Installing &lt;span style="color:olive;"&gt;LoraB&lt;/span&gt; in /usr/local/share/groff/site-font/devpdf/... Done.
Copy &lt;span style="color:teal;"&gt;Lora-Bold.ttf&lt;/span&gt; to /usr/local/share/fonts/truetype/Lora/
  (y/n; default = n) &lt;span style="color:red;"&gt;&lt;b&gt;&amp;lt;RETURN&amp;gt;&lt;/b&gt;&lt;/span&gt;
Install &lt;span style="color:teal;"&gt;Lora-Bold.ttf&lt;/span&gt; manually to make it available system-wide.
$ install-font.sh Lora-BoldItalic.ttf
Processing &lt;span style="color:teal;"&gt;Lora-BoldItalic.ttf&lt;/span&gt;...
Running fontforge...
Copyright (c) 2000-2020. See AUTHORS for Contributors.
 License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
 with many parts BSD &amp;lt;http://fontforge.org/license.html&amp;gt;. Please read LICENSE.
 Version: 20201107
 Based on sources from 2020-11-16 19:11 UTC-D.
The following table(s) in the font have been ignored by FontForge
  Ignoring 'STAT' style attributes table
Glyph bounding box data exceeds font bounding box data for GID 4
  Subsequent errors will not be reported.
In GID 776 the advance width (1297) is greater than the stated maximum (1273)
  Subsequent errors will not be reported.
Done.
Family name (default = Lora): &lt;span style="color:red;"&gt;&lt;b&gt;&amp;lt;RETURN&amp;gt;&lt;/b&gt;&lt;/span&gt;
  =&amp;gt;&lt;span style="color:teal;"&gt;Lora-BoldItalic&lt;/span&gt; (Lora-BoldItalic.ttf) assigned to family '&lt;span style="color:olive;"&gt;Lora&lt;/span&gt;'.
Enter +STYLE (eg +R, +I, +B, +BI), or a unique groff name for &lt;span style="color:teal;"&gt;Lora-BoldItalic&lt;/span&gt;.
Leave blank to set name to '&lt;span style="color:teal;"&gt;Lora-BoldItalic&lt;/span&gt;': &lt;span style="color:red;"&gt;&lt;b&gt;+BI&lt;/b&gt;&lt;/span&gt;
  =&amp;gt;&lt;span style="color:teal;"&gt;Lora-BoldItalic&lt;/span&gt; assigned groff fontname '&lt;span style="color:olive;"&gt;LoraBI&lt;/span&gt;'.
Creating &lt;span style="color:olive;"&gt;LoraBI&lt;/span&gt;...
afmtodit: both uni00B5 and uni03BC map to mc at /Users/tkb/sw/versions/groff/git/bin/afmtodit line 6441.
Done.
Installing &lt;span style="color:olive;"&gt;LoraBI&lt;/span&gt; in /usr/local/share/groff/site-font/devps/... Done.
Make &lt;span style="color:olive;"&gt;LoraBI&lt;/span&gt; available to gropdf? (y/n; default = y) &lt;span style="color:red;"&gt;&lt;b&gt;&amp;lt;RETURN&amp;gt;&lt;/b&gt;&lt;/span&gt;
Checking for gropdf executable and devpdf directory... gropdf found.
Installing &lt;span style="color:olive;"&gt;LoraBI&lt;/span&gt; in /usr/local/share/groff/site-font/devpdf/... Done.
Copy &lt;span style="color:teal;"&gt;Lora-BoldItalic.ttf&lt;/span&gt; to /usr/local/share/fonts/truetype/Lora/
  (y/n; default = n) &lt;span style="color:red;"&gt;&lt;b&gt;&amp;lt;RETURN&amp;gt;&lt;/b&gt;&lt;/span&gt;
Install &lt;span style="color:teal;"&gt;Lora-BoldItalic.ttf&lt;/span&gt; manually to make it available system-wide.
&lt;/pre&gt;&lt;p&gt;&lt;em&gt;Last edited: 2021-07-20 12:40:30 EDT&lt;/em&gt;&lt;/p&gt;
&lt;!-- Local Variables:
time-stamp-format: "%Y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "\\*Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
time-stamp-line-limit: -20
End: --&gt;&lt;/div&gt;</description><category>fonts</category><category>groff</category><category>install-font.sh</category><category>troff</category><guid>https://tkurtbond.github.io/posts/2021/07/17/install-fontsh-the-simple-approach/</guid><pubDate>Sat, 17 Jul 2021 19:36:43 GMT</pubDate></item><item><title>groff and install-font.sh and installing fonts for use in groff</title><link>https://tkurtbond.github.io/posts/2021/07/17/groff-and-install-fontsh-and-installing-fonts-for-use-in-groff/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;This was originally a &lt;a class="reference external" href="https://lists.gnu.org/archive/html/groff/2021-07/msg00089.html"&gt;post&lt;/a&gt; to the &lt;a class="reference external" href="https://www.gnu.org/software/groff/"&gt;groff&lt;/a&gt; &lt;a class="reference external" href="https://lists.gnu.org/mailman/listinfo/groff/"&gt;mailing list&lt;/a&gt;.  It has
been slightly modified.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Currently &lt;span class="command"&gt;install-font.sh&lt;/span&gt; is not part of &lt;span class="app"&gt;groff&lt;/span&gt;.
We've had some discussion on the list &lt;a class="reference external" href="https://lists.gnu.org/archive/html/groff/2021-07/msg00061.html"&gt;recently&lt;/a&gt; and in the past about
integrating it into the &lt;span class="app"&gt;groff&lt;/span&gt; distribution, and in response to
recent &lt;a class="reference external" href="https://lists.gnu.org/archive/html/groff/2021-07/msg00054.html"&gt;discussion&lt;/a&gt; there is a new bug, &lt;a class="reference external" href="https://savannah.gnu.org/bugs/index.php?60930"&gt;#60930&lt;/a&gt;, requesting
integrating it, including documentation, etc.&lt;/p&gt;
&lt;p&gt;In the meantime, if you want to install fonts in OpenType or TrueType
formats for use with &lt;code class="docutils literal"&gt;devps&lt;/code&gt; and &lt;code class="docutils literal"&gt;devpdf&lt;/code&gt;,
&lt;span class="command"&gt;install-font.sh&lt;/span&gt; greatly simplifies the process.&lt;/p&gt;
&lt;p&gt;The &lt;span class="command"&gt;install-font.sh&lt;/span&gt; script was written by Peter Schaffter, the author
of the &lt;a class="reference external" href="https://www.schaffter.ca/mom/mom-01.html"&gt;mom macros&lt;/a&gt; for
&lt;span class="app"&gt;groff&lt;/span&gt;, and is distributed on mom's &lt;a class="reference external" href="https://www.schaffter.ca/mom/mom-05.html#install-font"&gt;download page&lt;/a&gt; and can be
downloaded &lt;a class="reference external" href="https://www.schaffter.ca/mom/bin/install-font.sh"&gt;directly&lt;/a&gt;.  It has a &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-H&lt;/span&gt;&lt;/code&gt;
option that prints the documentation for it.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://fontforge.org/"&gt;Fontforge&lt;/a&gt; is a free and open source font
editor.  It can run scripts to manipulate fonts and convert between
font formats.  (I only use &lt;span class="app"&gt;fontforge&lt;/span&gt; to install fonts with
&lt;span class="command"&gt;install-font.sh&lt;/span&gt;, so I use a version that is command line
only, but the normal build has a GUI for interactively building
fonts.)  The &lt;span class="command"&gt;install-font.sh&lt;/span&gt; script uses &lt;span class="app"&gt;Fontforge&lt;/span&gt; to convert
OpenType and TrueType fonts to PostScript Type42 (&lt;span class="file"&gt;.t42&lt;/span&gt;) and Type1
(&lt;span class="file"&gt;.pfa&lt;/span&gt;), from which a &lt;span class="app"&gt;groff&lt;/span&gt; font is generated by the
&lt;span class="app"&gt;groff&lt;/span&gt; utility &lt;span class="command"&gt;afmtodit&lt;/span&gt;.  Then the necessary files are moved to
&lt;span class="file"&gt;site-font/devps&lt;/span&gt; and registered in its download file for use by &lt;span class="command"&gt;grops&lt;/span&gt;.
Optionally the same can be done for &lt;span class="file"&gt;site-font/devpdf&lt;/span&gt; for the use of
&lt;span class="file"&gt;gropdf&lt;/span&gt;.  Then the fonts are available for use by &lt;code class="docutils literal"&gt;groff
&lt;span class="pre"&gt;-Tps&lt;/span&gt;&lt;/code&gt; and &lt;code class="docutils literal"&gt;groff &lt;span class="pre"&gt;-Tpdf&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So, suppose you wanted to use &lt;a class="reference external" href="https://fonts.google.com/specimen/Cormorant+Garamond"&gt;Cormorant Garamond&lt;/a&gt;, a free
font.  You could download the Regular, Italic, Bold, and Bold Italic
variants of the font, since &lt;span class="app"&gt;groff&lt;/span&gt; tends to expect there to be
R, I, B, and BI variants of the fonts it uses, though that is not
mandatory.  This would give you the files
&lt;span class="file"&gt;CormorantGaramond-Regular.ttf&lt;/span&gt;,
&lt;span class="file"&gt;CormorantGaramond-Italic.ttf&lt;/span&gt;,
&lt;span class="file"&gt;CormorantGaramond-Bold.ttf&lt;/span&gt;, and
&lt;span class="file"&gt;CormorantGaramond-BoldItalic.ttf&lt;/span&gt;.  You would then use
&lt;span class="command"&gt;install-font.sh&lt;/span&gt; to convert them and install the resulting
files into proper places under &lt;span class="app"&gt;groff&lt;/span&gt;'s site-font directory.&lt;/p&gt;
&lt;p&gt;So, for instance, you'd cd to the directory that holds the &lt;span class="file"&gt;.ttf&lt;/span&gt; files
you downloaded.  Then, to install the Regular variant of Cormorant
Garamond you'd run the command&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_2fd3a75bdcdc439eb9f8ee4929a83a00-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;$(&lt;/span&gt;IFDIR&lt;span class="k"&gt;)&lt;/span&gt;/install-font.sh -n -P &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$DEST&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; -d -F CormorantGaramond -f +R CormorantGaramond-Regular.ttf
&lt;/pre&gt;&lt;p&gt;where &lt;code class="docutils literal"&gt;IFDIR&lt;/code&gt; is an environment variable indicating the directory
where &lt;span class="command"&gt;install-font.sh&lt;/span&gt; is located and &lt;code class="docutils literal"&gt;DEST&lt;/code&gt; is an
environment variable indicating the directory that contains
&lt;span class="app"&gt;groff&lt;/span&gt;'s &lt;span class="file"&gt;site-font&lt;/span&gt; directory (not the actual
&lt;span class="file"&gt;site-font&lt;/span&gt; directory itself).  The &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-n&lt;/span&gt;&lt;/code&gt; option means don't
try to copy the TrueType file to where the system font files are
located.  The &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-P&lt;/span&gt;&lt;/code&gt; option takes as its argument the directory that
contains the &lt;span class="app"&gt;groff&lt;/span&gt;'s site-font directory.  Usually this is some
place like &lt;span class="file"&gt;/usr/share/groff&lt;/span&gt; or &lt;span class="file"&gt;/usr/local/share/groff&lt;/span&gt;,
but not all distributions create the &lt;span class="file"&gt;site-font&lt;/span&gt; directory.  If
you don't specify &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-P&lt;/span&gt;&lt;/code&gt; &lt;span class="command"&gt;install-font.sh&lt;/span&gt; will guess the
location.  (If the &lt;span class="file"&gt;site-font&lt;/span&gt; directory doesn't exist, or you
don't have write access to it I think you can use the environment
variable &lt;code class="docutils literal"&gt;GROFF_FONT_PATH&lt;/code&gt; to tell &lt;span class="app"&gt;groff&lt;/span&gt; where to find it,
but I've never used that and don't know the specifics.  I often build
&lt;span class="app"&gt;groff&lt;/span&gt; from git and install it someplace my normal user has
write access to, so I haven't had to worry about it.)  The &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-d&lt;/span&gt;&lt;/code&gt;
option says to make the font available to &lt;span class="command"&gt;gropdf&lt;/span&gt;.  The
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-F&lt;/span&gt;&lt;/code&gt; option takes an argument that specifies the font family name to
use.  This is the name that you would use with the &lt;code class="docutils literal"&gt;.fam&lt;/code&gt; request or
the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/code&gt; option to &lt;span class="command"&gt;groff&lt;/span&gt; to let it know you want to use
this font family.  The &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/code&gt; option takes an argument that specifies
the font style to use, &lt;code class="docutils literal"&gt;+R&lt;/code&gt;, &lt;code class="docutils literal"&gt;+I&lt;/code&gt;, &lt;code class="docutils literal"&gt;+B&lt;/code&gt;, or &lt;code class="docutils literal"&gt;+BI&lt;/code&gt;.  (The
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/code&gt; option can instead take a name, but I don't use that form and
can't explain the distinctions.)  The style (&lt;code class="docutils literal"&gt;R&lt;/code&gt;, &lt;code class="docutils literal"&gt;I&lt;/code&gt;, &lt;code class="docutils literal"&gt;B&lt;/code&gt;, or
&lt;code class="docutils literal"&gt;BI&lt;/code&gt;) is appended to the font family name specified with &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-F&lt;/span&gt;&lt;/code&gt; to
produce the name of the &lt;span class="app"&gt;groff&lt;/span&gt; font, and consequently the name
of the &lt;span class="app"&gt;groff&lt;/span&gt; font file that is written to the &lt;code class="docutils literal"&gt;devps&lt;/code&gt; and
&lt;code class="docutils literal"&gt;devpdf&lt;/code&gt; directories under &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;site-font&lt;/span&gt;&lt;/code&gt;.  So, in this example, the
name of the &lt;span class="app"&gt;groff&lt;/span&gt; font and the &lt;span class="app"&gt;groff&lt;/span&gt; font file would be
&lt;span class="file"&gt;CormorantGaramondR&lt;/span&gt;.  The last argument to the script is the
name of the Truetype or OpenType file you are converting.&lt;/p&gt;
&lt;p&gt;To complete the example, here are the commands to install the Italic,
Bold, and Bold Italic variants of Cormorant Garamond:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_19c244ff68784702b43727a817f61e6f-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;$(&lt;/span&gt;IFDIR&lt;span class="k"&gt;)&lt;/span&gt;/install-font.sh -n -P &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$DEST&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; -d -F CormorantGaramond -f +I CormorantGaramond-Italic.ttf
&lt;a name="rest_code_19c244ff68784702b43727a817f61e6f-2"&gt;&lt;/a&gt;&lt;span class="k"&gt;$(&lt;/span&gt;IFDIR&lt;span class="k"&gt;)&lt;/span&gt;/install-font.sh -n -P &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$DEST&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; -d -F CormorantGaramond -f +B CormorantGaramond-Bold.ttf
&lt;a name="rest_code_19c244ff68784702b43727a817f61e6f-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;$(&lt;/span&gt;IFDIR&lt;span class="k"&gt;)&lt;/span&gt;/install-font.sh -n -P &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$DEST&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; -d -F CormorantGaramond -f +BI CormorantGaramond-BoldItalic.
&lt;/pre&gt;&lt;p&gt;As I said in an earlier email to the list, I tend to put all four
commands into a script so I can run them again if something goes wrong
or when I need to install them on a new machine or in a new
installation of &lt;span class="app"&gt;groff&lt;/span&gt;.  In the case of Cormorant Garamond I named the
file &lt;span class="file"&gt;install-cormorant-garamond.sh&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Later:&lt;/strong&gt; Peter Schaffter &lt;a class="reference external" href="https://lists.gnu.org/archive/html/groff/2021-07/msg00090.html"&gt;pointed out&lt;/a&gt; that the &lt;em&gt;simple&lt;/em&gt; use of
&lt;span class="command"&gt;install-font.sh&lt;/span&gt; is:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_26555d406f4042ad874f33fe54da22b9-1"&gt;&lt;/a&gt;sudo install-font.sh fontfile
&lt;/pre&gt;&lt;p&gt;and then answer the questions the script asks.  He also pointed out
that it creates the &lt;span class="file"&gt;site-font&lt;/span&gt; directory and necessary
subdirectories if needed in, and here I quote: âthe only two locations
it's ever likely to beâ.  Looking at &lt;span class="command"&gt;install-font.sh&lt;/span&gt; reveal
those locations are &lt;span class="file"&gt;/usr/local/share/groff&lt;/span&gt; and
&lt;span class="file"&gt;/usr/share/groff&lt;/span&gt;, defaulting to
&lt;span class="file"&gt;/usr/local/share/groff&lt;/span&gt;; to get it to use
&lt;span class="file"&gt;/usr/share/groff&lt;/span&gt; you specify the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-s&lt;/span&gt;&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;For a walk-through of the simple use see the &lt;a class="reference external" href="https://tkurtbond.github.io/posts/2021/07/17/install-fontsh-the-simple-approach/"&gt;follow-up&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Last edited: 2021-07-15 17:46:40 EDT&lt;/em&gt;&lt;/p&gt;
&lt;!-- Local Variables:
time-stamp-format: "%Y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "\\*Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
time-stamp-line-limit: -20
End: --&gt;&lt;/div&gt;</description><category>fonts</category><category>groff</category><category>install-font.sh</category><category>mom</category><category>troff</category><guid>https://tkurtbond.github.io/posts/2021/07/17/groff-and-install-fontsh-and-installing-fonts-for-use-in-groff/</guid><pubDate>Sat, 17 Jul 2021 04:16:49 GMT</pubDate></item><item><title>Sorting words separated by commas</title><link>https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;I often have lists of "words", separated by commas, possibly on
multiple lines, like this example from a &lt;span class="file"&gt;Makefile&lt;/span&gt;:&lt;/p&gt;
&lt;pre class="code makefile"&gt;&lt;a name="rest_code_e64e051df37d48cb8b4c48d2ef9b5117-1"&gt;&lt;/a&gt;&lt;span class="c"&gt;#    bookman, schoolbook, palatino, times,&lt;/span&gt;
&lt;a name="rest_code_e64e051df37d48cb8b4c48d2ef9b5117-2"&gt;&lt;/a&gt;&lt;span class="c"&gt;#    helvetica, helvetica-narrow, optima, cormorant-garamond,&lt;/span&gt;
&lt;a name="rest_code_e64e051df37d48cb8b4c48d2ef9b5117-3"&gt;&lt;/a&gt;&lt;span class="c"&gt;#    or ebgaramond.&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I find these lists are always getting out of order, or they end up
with some short lines and some long lines.  I want to be able to
reformat them automatically, like this:&lt;/p&gt;
&lt;pre class="code makefile"&gt;&lt;a name="rest_code_8c1788b67e8e4629af1455006ee71da3-1"&gt;&lt;/a&gt;&lt;span class="c"&gt;#    bookman, cormorant-garamond, ebgaramond, helvetica, helvetica-narrow,&lt;/span&gt;
&lt;a name="rest_code_8c1788b67e8e4629af1455006ee71da3-2"&gt;&lt;/a&gt;&lt;span class="c"&gt;#    optima, palatino, schoolbook, or times.&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;So, I wrote three scripts to deal with them,
&lt;span class="command"&gt;sort-with-commas&lt;/span&gt;, &lt;span class="command"&gt;strip-leading-hash&lt;/span&gt; to get rid
of the leading hashes and spaces, and &lt;span class="command"&gt;prefix&lt;/span&gt; to put the
leading hashes and spaces back.&lt;/p&gt;
&lt;p&gt;Now, above I said "words", because really it's anything separated by
commas, so the "words" can contain space, etc.&lt;/p&gt;
&lt;p&gt;Also, notice that the period after "ebgaramond" and the "or" before
"ebgaramond"` in the original list disappear, and an "or " appears
before the new end of the list, "times", and a period follows it.  And
you can have have the same situation with "and".  So, the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-p&lt;/span&gt;&lt;/code&gt;
option to &lt;span class="command"&gt;sort-with-commas&lt;/span&gt; adds a period after the last
word, the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-a&lt;/span&gt;&lt;/code&gt; option adds and "and " before the last word, and the
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-o&lt;/span&gt;&lt;/code&gt; option adds an "or " before the last word.  If you are sorting
only part of a list, you want to have a comma after the last "word",
so there is the option &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-f&lt;/span&gt;&lt;/code&gt; for that.  And to remove the the period
from the original list, so it doesn't end up in the middle of the new
list, or to remove "and " or "or ", there is the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-r&lt;/span&gt;&lt;/code&gt; option.&lt;/p&gt;
&lt;p&gt;The default is to return the sorted list as one long line, but you can
easily reformat it to multiple lines by running it through the Unix
command &lt;span class="command"&gt;fmt&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Although in this case the list is prefixed with a "#" and some spaces
because it comes from a comment in a Makefile, you have to remove
those to sort the list.  I wrote the script
&lt;span class="command"&gt;strip-leading-hash&lt;/span&gt; to do that, too, rather than having to
remember the &lt;span class="command"&gt;sed&lt;/span&gt; command to so that all the time.&lt;/p&gt;
&lt;p&gt;So, to sort the original list I'd run the command&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_5c4723a023cd4b6aa4262ff162dcc5bd-1"&gt;&lt;/a&gt;strip-leading-hash &lt;span class="p"&gt;|&lt;/span&gt; sort-with-commas -r -p -o &lt;span class="p"&gt;|&lt;/span&gt; fmt &lt;span class="p"&gt;|&lt;/span&gt; prefix &lt;span class="s2"&gt;"#    "&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;which means âstrip the leading hashes and spaces, remove the trailing
period and the "and " or "or ", add a final period after the last word,
add an "or " before the final word, reformat as a paragraph, and
prefix the lines with the hash and spaces.â&lt;/p&gt;
&lt;p&gt;When I use this I'm usually in &lt;span class="app"&gt;emacs&lt;/span&gt; and using &lt;span class="key"&gt;M-|&lt;/span&gt; to
run it on the region (the currently selected text), often with the
&lt;span class="key"&gt;C-u&lt;/span&gt; to replace the region with results.&lt;/p&gt;
&lt;p&gt;Here's the main script, &lt;span class="file"&gt;sort-with-commas&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://tkurtbond.github.io/listings/sort-with-commas.html"&gt;sort-with-commas&lt;/a&gt;  &lt;a class="reference external" href="https://tkurtbond.github.io/listings/sort-with-commas"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#! /usr/bin/env bash&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;###############################################################################&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# Sort a list of words that are seperated by commas, optionally followed by&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-4"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# a newline into a single line seperated by commas followed by spaces.&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-5"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-6"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# For example: it translates (ignore the "# +" at the beginning of lines)&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-7"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#    bookman, schoolbook,palatino,&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-8"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#    times, helvetica, helvetica-narrow,&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-9"&gt;&lt;/a&gt;&lt;span class="c1"&gt;# to&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-10"&gt;&lt;/a&gt;&lt;span class="c1"&gt;#    bookman, helvetica, helvetica-narrow, palatino, schoolbook, times&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-11"&gt;&lt;/a&gt;&lt;span class="c1"&gt;###############################################################################&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-13"&gt;&lt;/a&gt;&lt;span class="nv"&gt;AND_OPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;off                     &lt;span class="c1"&gt;# Insert "and " before last word.&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-14"&gt;&lt;/a&gt;&lt;span class="nv"&gt;FINAL_OPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;off                   &lt;span class="c1"&gt;# Leave "," after last word.&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-15"&gt;&lt;/a&gt;&lt;span class="nv"&gt;OR_OPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;off                      &lt;span class="c1"&gt;# Insert "or " before last word.&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-16"&gt;&lt;/a&gt;&lt;span class="nv"&gt;PERIOD_OPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;off                  &lt;span class="c1"&gt;# Insert a final period after last word.&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-17"&gt;&lt;/a&gt;&lt;span class="nv"&gt;REMOVE_AND_OR_PERIOD_OPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;off
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-20"&gt;&lt;/a&gt;&lt;span class="nb"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-21"&gt;&lt;/a&gt;&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;getopts&lt;/span&gt; &lt;span class="s2"&gt;"?afhopr"&lt;/span&gt; opt
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-22"&gt;&lt;/a&gt;&lt;span class="k"&gt;do&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-23"&gt;&lt;/a&gt;    &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$opt&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; in
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-24"&gt;&lt;/a&gt;        &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="se"&gt;\?&lt;/span&gt;&lt;span class="p"&gt;|&lt;/span&gt;h&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;let&lt;/span&gt; errors++ &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-25"&gt;&lt;/a&gt;        &lt;span class="o"&gt;(&lt;/span&gt;a&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;AND_OPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;on &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-26"&gt;&lt;/a&gt;        &lt;span class="o"&gt;(&lt;/span&gt;f&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;FINAL_OPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;on &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-27"&gt;&lt;/a&gt;        &lt;span class="o"&gt;(&lt;/span&gt;o&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;OR_OPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;on &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-28"&gt;&lt;/a&gt;        &lt;span class="o"&gt;(&lt;/span&gt;p&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;PERIOD_OPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;on &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-29"&gt;&lt;/a&gt;        &lt;span class="o"&gt;(&lt;/span&gt;r&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;REMOVE_AND_OR_PERIOD_OPT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;on &lt;span class="p"&gt;;;&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-30"&gt;&lt;/a&gt;    &lt;span class="k"&gt;esac&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-31"&gt;&lt;/a&gt;&lt;span class="k"&gt;done&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-32"&gt;&lt;/a&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-33"&gt;&lt;/a&gt;&lt;span class="nb"&gt;shift&lt;/span&gt; &lt;span class="k"&gt;$((&lt;/span&gt;OPTIND-1&lt;span class="k"&gt;))&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-34"&gt;&lt;/a&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-35"&gt;&lt;/a&gt;&lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$#&lt;/span&gt; &amp;gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="nv"&gt;$errors&lt;/span&gt; &amp;gt; &lt;span class="m"&gt;0&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-36"&gt;&lt;/a&gt;    cat &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-37"&gt;&lt;/a&gt;&lt;span class="s"&gt;usage: sort-with-commas [OPTION]&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-38"&gt;&lt;/a&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-39"&gt;&lt;/a&gt;&lt;span class="s"&gt;This reads its standard input and sorts a line or multiple lines with&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-40"&gt;&lt;/a&gt;&lt;span class="s"&gt;"words" separated by commas, then reassembles the line, words&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-41"&gt;&lt;/a&gt;&lt;span class="s"&gt;separated by a comma and s space, optionally leaving a final comma&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-42"&gt;&lt;/a&gt;&lt;span class="s"&gt;after the last word, or a period, and optionally putting "and " or "or&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-43"&gt;&lt;/a&gt;&lt;span class="s"&gt;" before the last word.&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-44"&gt;&lt;/a&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-45"&gt;&lt;/a&gt;&lt;span class="s"&gt;Options&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-46"&gt;&lt;/a&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-47"&gt;&lt;/a&gt;&lt;span class="s"&gt;-? -h   This message.&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-48"&gt;&lt;/a&gt;&lt;span class="s"&gt;-a      Insert "and " before last word.&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-49"&gt;&lt;/a&gt;&lt;span class="s"&gt;-f      Leave final comma after last word.&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-50"&gt;&lt;/a&gt;&lt;span class="s"&gt;-o      Insert "or " before last word.&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-51"&gt;&lt;/a&gt;&lt;span class="s"&gt;-p      Insert a period after the last word.&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-52"&gt;&lt;/a&gt;&lt;span class="s"&gt;-r      Remove "and " or "or " that occur at the beginning of a "word" in the&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-53"&gt;&lt;/a&gt;&lt;span class="s"&gt;        original list.&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-54"&gt;&lt;/a&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-55"&gt;&lt;/a&gt;&lt;span class="s"&gt;Note that combining -a and -o, or -f and -p do what you say, but the results&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-56"&gt;&lt;/a&gt;&lt;span class="s"&gt;are silly.&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-57"&gt;&lt;/a&gt;&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-58"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;exit&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-59"&gt;&lt;/a&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-60"&gt;&lt;/a&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-61"&gt;&lt;/a&gt;tr &lt;span class="s1"&gt;','&lt;/span&gt; &lt;span class="s1"&gt;'\n'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed -E -e &lt;span class="s1"&gt;'s/^[ \t]+//'&lt;/span&gt; -e &lt;span class="s1"&gt;'/^$/d'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-62"&gt;&lt;/a&gt;    &lt;span class="o"&gt;([[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$REMOVE_AND_OR_PERIOD_OPT&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"on"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-63"&gt;&lt;/a&gt;         sed -E -e &lt;span class="s1"&gt;'s/^(and|or)[ \t]+//'&lt;/span&gt; -e &lt;span class="s1"&gt;'s/\.[ \t]*$//'&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; cat&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-64"&gt;&lt;/a&gt;    sort -u &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-65"&gt;&lt;/a&gt;    sed -E -e &lt;span class="s1"&gt;'s/$/,/'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-66"&gt;&lt;/a&gt;    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$AND_OPT&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"on"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; sed -e &lt;span class="s1"&gt;'$s/^/and /'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; cat&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-67"&gt;&lt;/a&gt;    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$FINAL_OPT&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"on"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; cat&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; sed -e &lt;span class="s1"&gt;'$s/,//'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-68"&gt;&lt;/a&gt;    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$OR_OPT&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"on"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; sed -e &lt;span class="s1"&gt;'$s/^/or /'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; cat&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-69"&gt;&lt;/a&gt;    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[[&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$PERIOD_OPT&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"on"&lt;/span&gt; &lt;span class="o"&gt;]]&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;then&lt;/span&gt; sed -e &lt;span class="s1"&gt;'$s/$/./'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; cat&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="k"&gt;fi&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a name="rest_code_3f549bedc0ea4e27b816ad2974aafb39-70"&gt;&lt;/a&gt;    tr &lt;span class="s1"&gt;'\n'&lt;/span&gt; &lt;span class="s1"&gt;' '&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed -E -e &lt;span class="s1"&gt;'s/[ ]$//'&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Here's &lt;span class="file"&gt;strip-leading-hash&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://tkurtbond.github.io/listings/strip-leading-hash.html"&gt;strip-leading-hash&lt;/a&gt;  &lt;a class="reference external" href="https://tkurtbond.github.io/listings/strip-leading-hash"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_0c0c34ba8d874575a14bacec94596314-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#! /usr/bin/env bash&lt;/span&gt;
&lt;a name="rest_code_0c0c34ba8d874575a14bacec94596314-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_0c0c34ba8d874575a14bacec94596314-3"&gt;&lt;/a&gt;sed -E -e &lt;span class="s1"&gt;'s/^#[ \t]*//'&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And here's &lt;span class="file"&gt;prefix&lt;/span&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://tkurtbond.github.io/listings/prefix.html"&gt;prefix&lt;/a&gt;  &lt;a class="reference external" href="https://tkurtbond.github.io/listings/prefix"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_43c6d092c63947afaa0aa33f8258e215-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#! /usr/bin/env bash&lt;/span&gt;
&lt;a name="rest_code_43c6d092c63947afaa0aa33f8258e215-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_43c6d092c63947afaa0aa33f8258e215-3"&gt;&lt;/a&gt;sed &lt;span class="s2"&gt;"s/^/&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;/"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>bash</category><category>emacs</category><category>script</category><category>shell</category><guid>https://tkurtbond.github.io/posts/2021/07/16/sorting-words-separated-by-commas/</guid><pubDate>Fri, 16 Jul 2021 17:05:09 GMT</pubDate></item><item><title>troff Memorandum Macros documentation</title><link>https://tkurtbond.github.io/posts/2021/07/15/troff-memorandum-macros-documentation/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;strong&gt;TL;DR:&lt;/strong&gt; Look &lt;a class="reference external" href="https://tkurtbond.github.io/troff/mm-all.pdf"&gt;here&lt;/a&gt; for documentation for the &lt;span class="app"&gt;Documenter's Workbench&lt;/span&gt; &lt;span class="app"&gt;mm&lt;/span&gt; Memorandum
Macros for &lt;span class="app"&gt;groff&lt;/span&gt;, based on the original paper &lt;cite&gt;MM - Memorandum
Macros&lt;/cite&gt;.  If you read that far there is a &lt;a class="reference internal" href="https://tkurtbond.github.io/posts/2021/07/15/troff-memorandum-macros-documentation/#bonus"&gt;bonus&lt;/a&gt; at the end.&lt;/p&gt;
&lt;p&gt;When I learned &lt;span class="app"&gt;troff&lt;/span&gt; it was actually on a VAX running VMS (used
by &lt;a class="reference external" href="http://www.mpl.com/"&gt;MPL Corporation&lt;/a&gt;) using a port of &lt;span class="app"&gt;troff&lt;/span&gt; called
&lt;span class="app"&gt;xroff&lt;/span&gt; &lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2021/07/15/troff-memorandum-macros-documentation/#who-produced-xroff" id="id1"&gt;1&lt;/a&gt;, probably around 1986.  (The VAX
also had TeX and LaTeX, and I used them too.  Both supported the DEC
LNO3 laserprinter that MPL had.)  While I don't know who produced
&lt;span class="app"&gt;xroff&lt;/span&gt; and can't find anything out about it on the Internet, it
was a complete port of &lt;span class="app"&gt;troff&lt;/span&gt; to VMS, including all the standard
utilities and macro packages, including documentation for &lt;span class="app"&gt;ms&lt;/span&gt;,
&lt;span class="app"&gt;me&lt;/span&gt;, and, significantly for this post &lt;span class="app"&gt;mm&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;span class="app"&gt;mm&lt;/span&gt; documentation was the paper &lt;cite&gt;MM - Memorandum Macros&lt;/cite&gt;, by
D. W. Smith, J. R. Mashey, E. C. Pariser, and N. W. Smith, AT&amp;amp;T Bell
Laboratories, June 1980.  I tried out all the macro packages, but
found &lt;span class="app"&gt;mm&lt;/span&gt; most to my liking.  I think a large part of that was the
&lt;span class="app"&gt;mm&lt;/span&gt; documentation â it described the many features of that macro
package pretty well, in a user guide sort of way, teaching you how to
use the features as it went along, rather than being a pure reference
manual.  And I found &lt;span class="app"&gt;mm&lt;/span&gt; most comparable in features to LaTeX of the
troff macro packages.  While configuring &lt;span class="app"&gt;mm&lt;/span&gt; documents is somewhat
quirky &lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2021/07/15/troff-memorandum-macros-documentation/#quirky" id="id2"&gt;2&lt;/a&gt;, I felt that the added features over those found in
&lt;span class="app"&gt;me&lt;/span&gt; and &lt;span class="app"&gt;ms&lt;/span&gt; made it worthwhile.  So I wrote a lot of
documents using &lt;span class="app"&gt;mm&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Years later when I first got access to &lt;span class="app"&gt;groff&lt;/span&gt; on Unix machines
(early 90s?) the documentation supplied with it for &lt;span class="app"&gt;mm&lt;/span&gt; was the
&lt;span class="man"&gt;groff_mm(7)&lt;/span&gt; man page.  It was very complete as a reference, but
very poor for teaching you how to use &lt;span class="app"&gt;mm&lt;/span&gt;.  I continued to use &lt;span class="app"&gt;mm&lt;/span&gt;
off and on, but I think the lack of the user guide documentation of
the &lt;span class="app"&gt;mm&lt;/span&gt; paper made &lt;span class="app"&gt;mm&lt;/span&gt; less popular among the users of &lt;span class="app"&gt;groff&lt;/span&gt;
than it could have been.  So when modern features for PDF appeared for
groff later on (the &lt;span class="app"&gt;pdfmark&lt;/span&gt; macros), they were adapted to
&lt;span class="app"&gt;ms&lt;/span&gt; but not &lt;span class="app"&gt;mm&lt;/span&gt;.  (&lt;span class="app"&gt;me&lt;/span&gt; was left out, as well.)  I was sad
to see &lt;span class="app"&gt;mm&lt;/span&gt;'s apparently low popularity, and the &lt;span class="app"&gt;mm&lt;/span&gt; paper apparently
is not available on the Internet in a form that copyright allows to be
copied around, unlike the papers on &lt;span class="app"&gt;ms&lt;/span&gt; and &lt;span class="app"&gt;me&lt;/span&gt;, which
come with &lt;span class="app"&gt;groff&lt;/span&gt;.  I suspect this is because &lt;span class="app"&gt;mm&lt;/span&gt; was used
heavily in AT&amp;amp;T's &lt;span class="app"&gt;Documenter's Workbench&lt;/span&gt;, a commercial product that was distributed
separately from UNIX System V, if I understand correctly.&lt;/p&gt;
&lt;p&gt;However, eventually the sources to the &lt;span class="app"&gt;Documenter's Workbench&lt;/span&gt; became available under
the Eclipse Public License, and they are &lt;a class="reference external" href="https://github.com/n-t-roff/DWB3.3"&gt;available&lt;/a&gt; in the &lt;a class="reference external" href="https://github.com/n-t-roff"&gt;n-t-roff&lt;/a&gt;
github repository (along with &lt;a class="reference external" href="http://n-t-roff.github.io/heirloom/doctools.html"&gt;Heirloom Docutils&lt;/a&gt;, a descendant of
the original &lt;span class="app"&gt;ditroff&lt;/span&gt; with native UTF-8 input and easy use of
fonts).  This includes the &lt;a class="reference external" href="https://github.com/n-t-roff/DWB3.3/tree/master/doc/mm"&gt;source&lt;/a&gt; to documentation that is derived
from the &lt;span class="app"&gt;mm&lt;/span&gt; paper!  Unfortunately, I haven't been able to find a PDF
of this on the Internet.&lt;/p&gt;
&lt;p&gt;I think that having this available might help those who might want to
try out &lt;span class="app"&gt;mm&lt;/span&gt;, or are returning to it after a long break, so I've
posted a version that I built a while ago &lt;a class="reference external" href="https://tkurtbond.github.io/troff/mm-all.pdf"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p id="bonus"&gt;As a bonus for reading down this far, here is how I add PDF
outline/table-of-contents entries for sections in &lt;span class="app"&gt;groff&lt;/span&gt; &lt;span class="app"&gt;mm&lt;/span&gt;,
using the &lt;code class="docutils literal"&gt;HZ&lt;/code&gt; user-defined heading exit macro (see
&lt;span class="man"&gt;groff_mm(7)&lt;/span&gt;):&lt;/p&gt;
&lt;pre class="code nroff"&gt;&lt;a name="rest_code_df1dfa8657964e4c94c08a4449273cb0-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="c"&gt;\" pdf outline fold level&lt;/span&gt;
&lt;a name="rest_code_df1dfa8657964e4c94c08a4449273cb0-2"&gt;&lt;/a&gt;.&lt;span class="k"&gt;nr&lt;/span&gt; &lt;span class="s"&gt;PDFOUTLINE.FOLDLEVEL&lt;/span&gt; &lt;span class="m"&gt;3&lt;/span&gt;
&lt;a name="rest_code_df1dfa8657964e4c94c08a4449273cb0-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="c"&gt;\" start out in outline view&lt;/span&gt;
&lt;a name="rest_code_df1dfa8657964e4c94c08a4449273cb0-4"&gt;&lt;/a&gt;.&lt;span class="k"&gt;pdfview&lt;/span&gt; &lt;span class="s"&gt;/PageMode&lt;/span&gt; &lt;span class="s"&gt;/UseOutlines&lt;/span&gt;
&lt;a name="rest_code_df1dfa8657964e4c94c08a4449273cb0-5"&gt;&lt;/a&gt;.&lt;span class="k"&gt;de&lt;/span&gt; &lt;span class="s"&gt;HZ&lt;/span&gt;
&lt;a name="rest_code_df1dfa8657964e4c94c08a4449273cb0-6"&gt;&lt;/a&gt;.&lt;span class="k"&gt;pdfhref&lt;/span&gt; &lt;span class="s"&gt;O&lt;/span&gt; &lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;$2&lt;/span&gt; &lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;*[}0]&lt;/span&gt; &lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s"&gt;$3&lt;/span&gt;
&lt;a name="rest_code_df1dfa8657964e4c94c08a4449273cb0-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And here's how to do it in &lt;a class="reference external" href="http://n-t-roff.github.io/heirloom/doctools.html"&gt;Heirloom Docutils&lt;/a&gt; &lt;span class="app"&gt;troff&lt;/span&gt;:&lt;/p&gt;
&lt;pre class="code nroff"&gt;&lt;a name="rest_code_35db5f339038467db0126c9c04977290-1"&gt;&lt;/a&gt;.&lt;span class="k"&gt;de&lt;/span&gt; &lt;span class="s"&gt;HY&lt;/span&gt;
&lt;a name="rest_code_35db5f339038467db0126c9c04977290-2"&gt;&lt;/a&gt;.&lt;span class="k"&gt;nr&lt;/span&gt; &lt;span class="s"&gt;HYtmp&lt;/span&gt; &lt;span class="s"&gt;(\\$1-1)&lt;/span&gt;
&lt;a name="rest_code_35db5f339038467db0126c9c04977290-3"&gt;&lt;/a&gt;&lt;span class="se"&gt;\\&lt;/span&gt;X'PDFMark: Bookmark &lt;span class="se"&gt;\\&lt;/span&gt;n[HYtmp] &lt;span class="se"&gt;\\&lt;/span&gt;$3'
&lt;a name="rest_code_35db5f339038467db0126c9c04977290-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="s"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;This version uses the &lt;code class="docutils literal"&gt;HY&lt;/code&gt; user-defined heading exit macro and
doesn't include the section numbers.&lt;/p&gt;
&lt;p&gt;I'm not sure why the two use different macros.  All I can say is that
I wrote them at different times for slightly different purposes.&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="who-produced-xroff"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2021/07/15/troff-memorandum-macros-documentation/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;While I still maintain a descendant of the VAX I where I used
&lt;span class="app"&gt;xroff&lt;/span&gt; (emulated using &lt;a class="reference external" href="https://www.stromasys.com/solutions/charon-vax/"&gt;Charon-VAX&lt;/a&gt;), sometime in the past the
&lt;span class="app"&gt;xroff&lt;/span&gt; software disappeared from it.  I have no idea what
happened to it.  I blame user PDL!&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="quirky"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2021/07/15/troff-memorandum-macros-documentation/#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The page offset, page width, and page length have to be set before
the &lt;span class="app"&gt;mm&lt;/span&gt; macros were loaded, so while on Unix it is easy to set those
values on the command line, on VMS due to oddities in its command line
it was easiest to use &lt;code class="docutils literal"&gt;.so&lt;/code&gt; and load the macros directly&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;em&gt;Last edited: 2021-07-17 19:09:27 EDT&lt;/em&gt;&lt;/p&gt;
&lt;!-- Local Variables:
time-stamp-format: "%Y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "\\*Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
time-stamp-line-limit: -20
End: --&gt;&lt;/div&gt;</description><category>charon-vax</category><category>documenter's workbench</category><category>dwb</category><category>groff</category><category>memorandum macros</category><category>mm</category><category>troff</category><category>vms</category><category>xroff</category><guid>https://tkurtbond.github.io/posts/2021/07/15/troff-memorandum-macros-documentation/</guid><pubDate>Thu, 15 Jul 2021 19:57:09 GMT</pubDate></item><item><title>defadvice lets you improve existing functions!</title><link>https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;I used &lt;code class="docutils literal"&gt;defadvice&lt;/code&gt; in emacs lisp and it made the world so much
better!&lt;/p&gt;
&lt;p&gt;Specifically, I use the function &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;smart-unicode-hyphen&lt;/span&gt;&lt;/code&gt; from
&lt;span class="file"&gt;xmlunicode.el&lt;/span&gt; &lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#tkb-smart-unicode-mode" id="id1"&gt;1&lt;/a&gt; when entering text
that is to be typeset.  The first time you hit hyphen it inserts a
hyphen.  The second time you hit hyphen it changes it to an em dash.
The third time you hit hyphen it changes it to an en dash.  If you hit
it again it changes it back to a hyphen.  Unfortunately, Iâve never
found a monospaced font that has em dashes and en dashes that are
distinguishable from hyphens visually.  (Not to mention the minus
character, which is also important to enter correctly for
typesetting.)  So it is hard to tell what character you have just
inserted, especially since you have to remember which comes after
which in the sequence.&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="tkb-smart-unicode-mode"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Specifically, I have a very small minor mode that makes hyphens,
double and single quotes, and periods smart, so they insert the
proper Unicode characters in the right situations.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;But I have a function tkb-describe-character that looks up the
character under the cursor (or before, if you specified a prefix
interactively or a value when called non-interactively) that looks up
the character in the variable unicode-character-list (which is defined
in &lt;span class="file"&gt;unichars.el&lt;/span&gt;) and contains the character values and unicode
names for the characters.&lt;/p&gt;
&lt;p&gt;So, I wrote a &lt;code class="docutils literal"&gt;defadvice&lt;/code&gt; function that runs
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(tkb-describe-character&lt;/span&gt; t)&lt;/code&gt; after &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;smart-unicode-hyphen&lt;/span&gt;&lt;/code&gt; runs, so
it looks at the character just before it and describes it, so I know
what it is!&lt;/p&gt;
&lt;p&gt;It works wonderfully!&lt;/p&gt;
&lt;p&gt;That's the thing about &lt;code class="docutils literal"&gt;defadvice&lt;/code&gt;: it lets you customize functions
to better adapt them to how you need to work.  Another way emacs lets
you customize it to better suit your needs.&lt;/p&gt;
&lt;p&gt;I got my copies of &lt;span class="file"&gt;xmlunicode.el&lt;/span&gt; (copyright 2003 by Norman
Walsh) and &lt;span class="file"&gt;unichars.el&lt;/span&gt; (unattributed) off the Internet long
ago.  It looks like you can get &lt;span class="file"&gt;xmlunicode.el&lt;/span&gt; from his
&lt;a class="reference external" href="https://github.com/ndw/xmlunicode"&gt;xmlunicode&lt;/a&gt; github repository, and it looks like the replacement for
&lt;span class="file"&gt;unichars.el&lt;/span&gt; is &lt;span class="file"&gt;xmlunicode-character-list.el&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Here's my code:&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;; look at https://github.com/ndw/xmlunicode for xmlunicode.el and a way&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;; to make something like unichars.el.  xmlunicode.el provides the&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-3"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;; "smart-unicode-*" functions.&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;load-library&lt;/span&gt; &lt;span class="s"&gt;"xmlunicode"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;load-library&lt;/span&gt; &lt;span class="s"&gt;"unichars"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;tkb-describe-character&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;before&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-8"&gt;&lt;/a&gt;  &lt;span class="s"&gt;"Describe the character after point (before if a prefix was specified)&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-9"&gt;&lt;/a&gt;&lt;span class="s"&gt;if it is a unicode character."&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-10"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interactive&lt;/span&gt; &lt;span class="s"&gt;"P"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-11"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let*&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;char&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;before&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;char-before&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;char-after&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-12"&gt;&lt;/a&gt;         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;info&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;assoc&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;encode-char&lt;/span&gt; &lt;span class="nv"&gt;char&lt;/span&gt; &lt;span class="ss"&gt;'ucs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;unicode-character-list&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-13"&gt;&lt;/a&gt;         &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;info&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cons&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;format&lt;/span&gt; &lt;span class="s"&gt;"#x%X"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;car&lt;/span&gt; &lt;span class="nv"&gt;info&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nv"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-14"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt; &lt;span class="s"&gt;"%S"&lt;/span&gt; &lt;span class="nv"&gt;info&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-15"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;tkb-keys&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c k d"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nf"&gt;#'&lt;/span&gt;&lt;span class="nv"&gt;tkb-describe-character&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-17"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;define-minor-mode&lt;/span&gt; &lt;span class="nv"&gt;tkb-smart-unicode-mode&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-18"&gt;&lt;/a&gt;  &lt;span class="s"&gt;"Toggle smart unicode punctuation"&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt; &lt;span class="s"&gt;" â»ââ£â¥â¸âââ½â®"&lt;/span&gt; &lt;span class="c1"&gt;; "ââ§â§âââ¢â¹âºâ â¥â¦â£â¨"&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-19"&gt;&lt;/a&gt;  &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="s"&gt;"\""&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;unicode-smart-double-quote&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-20"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"'"&lt;/span&gt;  &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;unicode-smart-single-quote&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-21"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;  &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;unicode-smart-hyphen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-22"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;  &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="nv"&gt;unicode-smart-period&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-24"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defadvice&lt;/span&gt; &lt;span class="nv"&gt;unicode-smart-hyphen&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;after&lt;/span&gt; &lt;span class="nv"&gt;tkb-after-unicode-smart-hyphen&lt;/span&gt; &lt;span class="nv"&gt;last&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-25"&gt;&lt;/a&gt;                                       &lt;span class="nv"&gt;activate&lt;/span&gt; &lt;span class="nv"&gt;compile&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_02feafffff044814ba1fde2b0d9ddaf1-26"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;tkb-describe-character&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Here's a &lt;a class="reference external" href="https://gist.github.com/tkurtbond/3dad54a2141422f39033533e72f53110"&gt;gist&lt;/a&gt;, and the &lt;a class="reference external" href="https://gist.githubusercontent.com/tkurtbond/3dad54a2141422f39033533e72f53110/raw/f1dc635d64fae89d1202142583df39544a87d7b8/tkb-smart-unicode-mode.el"&gt;raw&lt;/a&gt; gist if you want to download it directly.&lt;/p&gt;&lt;/div&gt;</description><guid>https://tkurtbond.github.io/posts/2021/07/11/defadvice-lets-you-improve-existing-functions/</guid><pubDate>Mon, 12 Jul 2021 02:28:21 GMT</pubDate></item><item><title>Logging the output of long commands run multiple times</title><link>https://tkurtbond.github.io/posts/2021/07/07/logging-the-output-of-long-commands-run-multiple-times/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;I often run commands that produce a lot of output that needs to saved
for debugging, and often the commands have to be repeated multiple
times to get things to work.  For example, building software from
source, often using the familiar &lt;code class="docutils literal"&gt;./configure; make; make install&lt;/code&gt;
paradigm.&lt;/p&gt;
&lt;p&gt;So, the first thing is to try is to use the venerable &lt;span class="command"&gt;tee&lt;/span&gt; command.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_4edf7ed7d2c343c0b80ea12d1acc7981-1"&gt;&lt;/a&gt;./configure &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tee Log.configure
&lt;a name="rest_code_4edf7ed7d2c343c0b80ea12d1acc7981-2"&gt;&lt;/a&gt;make &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tee Log.make
&lt;a name="rest_code_4edf7ed7d2c343c0b80ea12d1acc7981-3"&gt;&lt;/a&gt;make install &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tee Log.make-install
&lt;/pre&gt;&lt;p&gt;To make the log files easy to find I use a &lt;span class="file"&gt;Log.&lt;/span&gt; prefix.&lt;/p&gt;
&lt;p&gt;But I often need to run the commands multiple times, and want to save
each run under a new filename, so if the filename already exists I
want to add a number to the end and then increment the number until I
find one that hasn't been used.  And I'd like the filename to have the
date in YYYY-MM-DD format, so the resulting names look like
&lt;span class="file"&gt;Log.make-install-2021-07-07_2&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;So I wrote a bash function &lt;span class="command"&gt;incf&lt;/span&gt; (increment filename) to put in
&lt;span class="file"&gt;.bashrc&lt;/span&gt; that generates such a name:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-1"&gt;&lt;/a&gt;incf &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Construct a filename from PREFIX, "_YYYY-MM-DD",  optionally _N (where N&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-3"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# is 1 or greater) if the filename already exists, and optionally SUFFIX.&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Example: "incf file .tar.gz" results in "file_2021-07-07.tar.gz", or&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# "file_2021-07-07_N.tar.gz" if "file_2021-07-07.tar.gz" already exists,&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-6"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# where N is 1 or greater.&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-7"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;local&lt;/span&gt; prefix suffix fileprefix i testname sep1 sep2
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-8"&gt;&lt;/a&gt;    &lt;span class="nv"&gt;prefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-9"&gt;&lt;/a&gt;    &lt;span class="nv"&gt;suffix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$2&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-10"&gt;&lt;/a&gt;    &lt;span class="nv"&gt;sep1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"_"&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-11"&gt;&lt;/a&gt;    &lt;span class="nv"&gt;sep2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"_"&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-12"&gt;&lt;/a&gt;    &lt;span class="nv"&gt;fileprefix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;prefix&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;sep1&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;date +%F&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-13"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;let&lt;/span&gt; &lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-14"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# The zeroth filename doesn't have the number.&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-15"&gt;&lt;/a&gt;    &lt;span class="nv"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;fileprefix&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;suffix&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-16"&gt;&lt;/a&gt;    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-17"&gt;&lt;/a&gt;    &lt;span class="k"&gt;do&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-18"&gt;&lt;/a&gt;      &lt;span class="o"&gt;[&lt;/span&gt; ! -e &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$testname&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;break&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-19"&gt;&lt;/a&gt;      &lt;span class="o"&gt;((&lt;/span&gt;i++&lt;span class="o"&gt;))&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-20"&gt;&lt;/a&gt;      &lt;span class="nv"&gt;testname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;fileprefix&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;sep2&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="si"&gt;}${&lt;/span&gt;&lt;span class="nv"&gt;suffix&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-21"&gt;&lt;/a&gt;    &lt;span class="k"&gt;done&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-22"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$testname&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;a name="rest_code_bc2fbc886e3644ceb047ec476fdd93a1-23"&gt;&lt;/a&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And then I wrote a bash function that uses &lt;span class="command"&gt;incf&lt;/span&gt; to generate
the &lt;span class="file"&gt;Log.&lt;/span&gt; filename, potentially in a different directory:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_15ea5da8699b4a71b17143bb3a53886d-1"&gt;&lt;/a&gt;logf &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;a name="rest_code_15ea5da8699b4a71b17143bb3a53886d-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Construct a filename, possibly in another directory, that starts with&lt;/span&gt;
&lt;a name="rest_code_15ea5da8699b4a71b17143bb3a53886d-3"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# "Log." and ends with "YYYY-MM-DD" and optionally "_N", where N is 1 or&lt;/span&gt;
&lt;a name="rest_code_15ea5da8699b4a71b17143bb3a53886d-4"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# greater, if the filename already exists.&lt;/span&gt;
&lt;a name="rest_code_15ea5da8699b4a71b17143bb3a53886d-5"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;local&lt;/span&gt; dn bn fn
&lt;a name="rest_code_15ea5da8699b4a71b17143bb3a53886d-6"&gt;&lt;/a&gt;    &lt;span class="nv"&gt;dn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;dirname &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;a name="rest_code_15ea5da8699b4a71b17143bb3a53886d-7"&gt;&lt;/a&gt;    &lt;span class="nv"&gt;bn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"Log.&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;basename &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;a name="rest_code_15ea5da8699b4a71b17143bb3a53886d-8"&gt;&lt;/a&gt;    &lt;span class="nv"&gt;fn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;incf &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$dn&lt;/span&gt;&lt;span class="s2"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;$bn&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;a name="rest_code_15ea5da8699b4a71b17143bb3a53886d-9"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$fn&lt;/span&gt;
&lt;a name="rest_code_15ea5da8699b4a71b17143bb3a53886d-10"&gt;&lt;/a&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;And then I wrote a &lt;span class="command"&gt;log&lt;/span&gt; command that uses &lt;span class="command"&gt;logf&lt;/span&gt;
and tees its input into that file:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_4ac282306ed64e06867de0a40c0eb841-1"&gt;&lt;/a&gt;log &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;a name="rest_code_4ac282306ed64e06867de0a40c0eb841-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# tee the input into a log file.&lt;/span&gt;
&lt;a name="rest_code_4ac282306ed64e06867de0a40c0eb841-3"&gt;&lt;/a&gt;    tee &lt;span class="k"&gt;$(&lt;/span&gt;logf &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$1&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;a name="rest_code_4ac282306ed64e06867de0a40c0eb841-4"&gt;&lt;/a&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;So running &lt;code class="docutils literal"&gt;./configure &lt;span class="pre"&gt;2&amp;gt;&amp;amp;1&lt;/span&gt; | log ~/tmp/configure&lt;/code&gt; generates a file
&lt;span class="file"&gt;Log.configure_2021-07-07&lt;/span&gt; in the &lt;span class="file"&gt;~/tmp&lt;/span&gt; directory.&lt;/p&gt;
&lt;p&gt;But what if I specify a lot of options to the command, and would like
record if it in the log file, so if I get interrupted and then come
back some time later I can use the same command?&lt;/p&gt;
&lt;p&gt;First I wrote a base function, &lt;span class="command"&gt;cleanname&lt;/span&gt;, that takes a string and
converts it to something that should be safe to use as a filename.&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_1bff1ba0efa64b45bcb89c282a374876-1"&gt;&lt;/a&gt;cleanname &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;a name="rest_code_1bff1ba0efa64b45bcb89c282a374876-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Clean up a string so it is (relatively) safe to use as a filename.&lt;/span&gt;
&lt;a name="rest_code_1bff1ba0efa64b45bcb89c282a374876-3"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; name
&lt;a name="rest_code_1bff1ba0efa64b45bcb89c282a374876-4"&gt;&lt;/a&gt;    &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$cmd&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;'s/[ =";?*&amp;amp;^%$#@!~`|()&amp;lt;&amp;gt;]/-/g'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_1bff1ba0efa64b45bcb89c282a374876-5"&gt;&lt;/a&gt;               sed &lt;span class="s2"&gt;"s#[/']#-#g"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed -E &lt;span class="s1"&gt;'s/--+/-/g'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_1bff1ba0efa64b45bcb89c282a374876-6"&gt;&lt;/a&gt;               sed -E &lt;span class="s1"&gt;'s/(^[-.]+|-+$)//g'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_1bff1ba0efa64b45bcb89c282a374876-7"&gt;&lt;/a&gt;               sed -E &lt;span class="s1"&gt;'s/\.\.\.*/./g'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;a name="rest_code_1bff1ba0efa64b45bcb89c282a374876-8"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;a name="rest_code_1bff1ba0efa64b45bcb89c282a374876-9"&gt;&lt;/a&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Then I wrote a bash function, &lt;span class="command"&gt;exlog&lt;/span&gt;, to use the whole
command with its options as part of the filename (constructed with
&lt;span class="command"&gt;cleanname&lt;/span&gt;, and also include the whole command in the log output:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_a005e595ccfe4017ae540afd46f53c93-1"&gt;&lt;/a&gt;exlog &lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
&lt;a name="rest_code_a005e595ccfe4017ae540afd46f53c93-2"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;# Execute a shell command and log it to "Log.&amp;lt;cmd-as-safe-filename&amp;gt;"&lt;/span&gt;
&lt;a name="rest_code_a005e595ccfe4017ae540afd46f53c93-3"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;local&lt;/span&gt; &lt;span class="nv"&gt;cmd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$*&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt; &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;cleanname &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;a name="rest_code_a005e595ccfe4017ae540afd46f53c93-4"&gt;&lt;/a&gt;    &lt;span class="nv"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;logf &lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;a name="rest_code_a005e595ccfe4017ae540afd46f53c93-5"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;printf&lt;/span&gt; &lt;span class="s1"&gt;'Logging to %s\n'&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$name&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;a name="rest_code_a005e595ccfe4017ae540afd46f53c93-6"&gt;&lt;/a&gt;    &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;"cmd was: &lt;/span&gt;&lt;span class="nv"&gt;$cmd&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nb"&gt;time&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;&lt;span class="p"&gt;&amp;amp;&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; tee &lt;span class="nv"&gt;$name&lt;/span&gt;
&lt;a name="rest_code_a005e595ccfe4017ae540afd46f53c93-7"&gt;&lt;/a&gt;&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;So running the command&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_63af118345e54f2dbc0047506534cadc-1"&gt;&lt;/a&gt;exlog ../configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/Users/tkb/sw/versions/groff/git
&lt;/pre&gt;&lt;p&gt;produces the file&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_bfab19bc84384340aa2fa953ab40c29f-1"&gt;&lt;/a&gt;Log.configure-prefix-Users-tkb-sw-versions-groff-git_2021-07-07
&lt;/pre&gt;&lt;p&gt;and it contains the line&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_28438b8010f84974b59dcb7a0d1f19d9-1"&gt;&lt;/a&gt;cmd was: ../configure --prefix=/Users/tkb/sw/versions/groff/git
&lt;/pre&gt;&lt;p&gt;and running it again produces the file&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_9cf8051e2cdb438ca1c7644afbbd57a4-1"&gt;&lt;/a&gt;Log.configure-prefix-Users-tkb-sw-versions-groff-git_2021-07-07_1
&lt;/pre&gt;&lt;p&gt;This code is available in a &lt;a class="reference external" href="https://gist.github.com/tkurtbond/23255fede737eec89b1fd0e011566cb1"&gt;gist&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Last edited: 2021-07-09 15:30:53 EDT&lt;/em&gt;&lt;/p&gt;
&lt;!-- Local Variables:
time-stamp-format: "%04y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "\\*Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
time-stamp-line-limit: -20
End: --&gt;&lt;/div&gt;</description><category>bash</category><category>logging</category><category>unix</category><guid>https://tkurtbond.github.io/posts/2021/07/07/logging-the-output-of-long-commands-run-multiple-times/</guid><pubDate>Wed, 07 Jul 2021 16:47:25 GMT</pubDate></item><item><title>Using getnstr from Chicken Scheme ncurses egg</title><link>https://tkurtbond.github.io/posts/2021/06/16/using-getnstr-from-chicken-scheme-ncurses-egg/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;The &lt;a class="reference external" href="https://www.call-cc.org/"&gt;Chicken Scheme&lt;/a&gt; documentation for the &lt;a class="reference external" href="http://wiki.call-cc.org/eggref/5/ncurses"&gt;ncurses egg&lt;/a&gt; says that
you should pass a string to the &lt;code class="docutils literal"&gt;getnstr&lt;/code&gt;, function, but that doesn't
actually work.&lt;/p&gt;
&lt;p&gt;I finally found an &lt;a class="reference external" href="https://stackoverflow.com/a/45359136"&gt;example&lt;/a&gt;, and after looking at it and figuring out
what imports are now required I have a working example of using
getnstr from the chicken scheme ncurses egg!&lt;/p&gt;
&lt;pre class="code scheme"&gt;&lt;a name="rest_code_ba444eac8ab340499654e8a11a35e9ee-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;import&lt;/span&gt; &lt;span class="nv"&gt;ncurses&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ba444eac8ab340499654e8a11a35e9ee-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;chicken&lt;/span&gt; &lt;span class="nv"&gt;locative&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_ba444eac8ab340499654e8a11a35e9ee-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;import&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;chicken&lt;/span&gt; &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_ba444eac8ab340499654e8a11a35e9ee-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_ba444eac8ab340499654e8a11a35e9ee-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-string&lt;/span&gt; &lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ba444eac8ab340499654e8a11a35e9ee-6"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;buffer&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;make-string &lt;/span&gt;&lt;span class="nv"&gt;max&lt;/span&gt; &lt;span class="sc"&gt;#\null&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_ba444eac8ab340499654e8a11a35e9ee-7"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;getnstr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;make-locative&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ba444eac8ab340499654e8a11a35e9ee-8"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;;; Delete the #\null characters.&lt;/span&gt;
&lt;a name="rest_code_ba444eac8ab340499654e8a11a35e9ee-9"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string-translate&lt;/span&gt; &lt;span class="nv"&gt;buffer&lt;/span&gt; &lt;span class="sc"&gt;#\null&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_ba444eac8ab340499654e8a11a35e9ee-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_ba444eac8ab340499654e8a11a35e9ee-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;stdscr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;initscr&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_ba444eac8ab340499654e8a11a35e9ee-12"&gt;&lt;/a&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;str&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;get-string&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a name="rest_code_ba444eac8ab340499654e8a11a35e9ee-13"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;addstr&lt;/span&gt; &lt;span class="nv"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ba444eac8ab340499654e8a11a35e9ee-14"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;getch&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ba444eac8ab340499654e8a11a35e9ee-15"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;write &lt;/span&gt;&lt;span class="nv"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_ba444eac8ab340499654e8a11a35e9ee-16"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;endwin&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Oh, and I added the example to the ncurses egg documentation: &lt;a class="reference external" href="http://wiki.call-cc.org/eggref/5/ncurses#getnstr-example"&gt;getnstr
Example&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><category>chicken scheme</category><category>scheme</category><guid>https://tkurtbond.github.io/posts/2021/06/16/using-getnstr-from-chicken-scheme-ncurses-egg/</guid><pubDate>Wed, 16 Jun 2021 18:57:28 GMT</pubDate></item></channel></rss>