<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lacking Natural Simplicity (Posts about computer)</title><link>https://tkurtbond.github.io/</link><description></description><atom:link href="https://tkurtbond.github.io/categories/cat_computer.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:tkurtbond@gmail.com"&gt;T. Kurt Bond&lt;/a&gt; </copyright><lastBuildDate>Wed, 28 Apr 2021 18:08:49 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>MIME and Gmail vs other mailers</title><link>https://tkurtbond.github.io/posts/2020/12/11/mime-and-gmail-vs-other-mailers/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;I composed a carefully constructed &lt;a class="reference external" href="https://en.wikipedia.org/wiki/MIME"&gt;MIME&lt;/a&gt; message using &lt;a class="reference external" href="http://www.mew.org/"&gt;Mew&lt;/a&gt;, which has
a nice way to build &lt;a class="reference external" href="https://en.wikipedia.org/wiki/MIME"&gt;MIME&lt;/a&gt; messages, but Gmail doesn’t know that if you
have a multipart &lt;a class="reference external" href="https://en.wikipedia.org/wiki/MIME"&gt;MIME&lt;/a&gt; message that has a text part, then an image,
then a text part, then an image, then a text part then what you want
is for the image parts to be displayed inline.  In messages like that
composed in Gmail, it uses the content type of &lt;code class="docutils literal"&gt;multipart/related&lt;/code&gt;,
which then encloses a &lt;code class="docutils literal"&gt;multipart/alternative&lt;/code&gt;, which has a plain
text version of the message and an HTML version, which refers to the
images with an &lt;code class="docutils literal"&gt;img&lt;/code&gt; tag that has an id that refers to the id in a
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Content-ID&lt;/span&gt;&lt;/code&gt; &lt;a class="reference external" href="https://en.wikipedia.org/wiki/MIME"&gt;MIME&lt;/a&gt; header in following parts of the multipart-related
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/MIME"&gt;MIME&lt;/a&gt; part that is the main body of the email.&lt;/p&gt;
&lt;p&gt;I don’t know why Gmail doesn’t display the simpler &lt;code class="docutils literal"&gt;multipart/mixed&lt;/code&gt;
messages correctly.&lt;/p&gt;
&lt;p&gt;It is very annoying.  I don’t mind them using the
&lt;code class="docutils literal"&gt;multipart/related&lt;/code&gt; (which I didn’t even know about before looking
at one of their messages using &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;wl-summary-reedit&lt;/span&gt;&lt;/code&gt; in &lt;a class="reference external" href="https://www.emacswiki.org/emacs/WanderLust"&gt;Wanderlust&lt;/a&gt;,
which pulls it up in the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;mime-edit-mode&lt;/span&gt;&lt;/code&gt; &lt;a class="reference external" href="https://en.wikipedia.org/wiki/MIME"&gt;MIME&lt;/a&gt; composition mode
&lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2020/12/11/mime-and-gmail-vs-other-mailers/#mime-edit-mode" id="id1"&gt;1&lt;/a&gt;, which revealed all the details), but I wish they’d
get the simpler &lt;code class="docutils literal"&gt;multipart/mixed&lt;/code&gt; version right.  Instead, they
don’t display the inline attachments (regardless of whether they are
images or text) and put them all at the end of the display as
attachments, and display the other text parts smushed together.&lt;/p&gt;
&lt;p&gt;Interestingly, if a text part it has a &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Content-Type:&lt;/span&gt; Text/Plain&lt;/code&gt;
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/MIME"&gt;MIME&lt;/a&gt; header field it is displayed inline in Gmail, unless it has a&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_00f08be6415049b6ae16a4e061abc33f-1"&gt;&lt;/a&gt;Content-Disposition: inline; filename="JRandomFilename.txt"
&lt;/pre&gt;&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/MIME"&gt;MIME&lt;/a&gt; header field, and then it &lt;strong&gt;doesn’t&lt;/strong&gt; display it inline,
unlike all the other mail reading I tried: &lt;a class="reference external" href="https://www.emacswiki.org/emacs/WanderLust"&gt;Wanderlust&lt;/a&gt;, &lt;a class="reference external" href="http://www.mew.org/"&gt;Mew&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Alpine_(email_client)"&gt;Alpine&lt;/a&gt;,
&lt;a class="reference external" href="https://www.thunderbird.ne"&gt;Thunderbird&lt;/a&gt; (had to have a pure GUI client for comparison), and &lt;a class="reference external" href="http://www.mutt.org/"&gt;mutt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Interestingly, &lt;a class="reference external" href="https://www.emacswiki.org/emacs/WanderLust"&gt;Wanderlust&lt;/a&gt; displays Gmail’s &lt;code class="docutils literal"&gt;multipart/related&lt;/code&gt;
messages correctly, which impressed me.&lt;/p&gt;
&lt;p&gt;I originally I thought that &lt;a class="reference external" href="http://www.mew.org/"&gt;Mew&lt;/a&gt; did not display the
&lt;code class="docutils literal"&gt;multipart/related&lt;/code&gt; message correctly, punting to just displaying
original &lt;a class="reference external" href="https://en.wikipedia.org/wiki/MIME"&gt;MIME&lt;/a&gt;-encoded text instead, and not displaying the image
parts.&lt;/p&gt;
&lt;p&gt;I was wrong about that; I was just confused by its presentation.
First it displays the text version of the enclosed
&lt;code class="docutils literal"&gt;multipart/alternative&lt;/code&gt;, which is what made me think it didn’t
display the image parts; it just hasn't yet!  Then if I hit space, it
displays the first of the images, and then if I hit space it displays
the second of the images.&lt;/p&gt;
&lt;p&gt;And you can make &lt;a class="reference external" href="http://www.mew.org/"&gt;Mew&lt;/a&gt; display the HTML part, but it doesn’t know how
the &lt;code class="docutils literal"&gt;&amp;lt;img &lt;span class="pre"&gt;id=“foo”&amp;gt;&lt;/span&gt;&lt;/code&gt; elements work, so it doesn’t display the
images.&lt;/p&gt;
&lt;p&gt;I was pleased to see that the &lt;a class="reference external" href="https://www.emacswiki.org/emacs/WanderLust"&gt;Wanderlust&lt;/a&gt; (&lt;a class="reference external" href="https://github.com/wanderlust/wanderlust"&gt;WGH&lt;/a&gt;) and &lt;a class="reference external" href="http://www.mew.org/"&gt;Mew&lt;/a&gt; (&lt;a class="reference external" href="https://github.com/kazu-yamamoto/Mew"&gt;MGH&lt;/a&gt;) github
repositories both have recent commits.&lt;/p&gt;
&lt;p&gt;And &lt;a class="reference external" href="https://www.emacswiki.org/emacs/WanderLust"&gt;Wanderlust&lt;/a&gt; and &lt;a class="reference external" href="http://www.mew.org/"&gt;Mew&lt;/a&gt; are both in &lt;a class="reference external" href="https://melpa.org/"&gt;MELPA&lt;/a&gt; these days, although
&lt;a class="reference external" href="http://www.mew.org/"&gt;Mew&lt;/a&gt;’s &lt;a class="reference external" href="https://melpa.org/"&gt;MELPA&lt;/a&gt; package doesn’t include the command line program,
&lt;span class="command"&gt;incm&lt;/span&gt;, that is used to pull emails from &lt;span class="file"&gt;/var/mail&lt;/span&gt;
into &lt;a class="reference external" href="https://en.wikipedia.org/wiki/MH_Message_Handling_System"&gt;MH&lt;/a&gt; style files under &lt;span class="file"&gt;~/Mail&lt;/span&gt;.  &lt;a class="reference external" href="https://www.emacswiki.org/emacs/WanderLust"&gt;Wanderlust&lt;/a&gt; and &lt;a class="reference external" href="http://www.mew.org/"&gt;Mew&lt;/a&gt; both
use &lt;a class="reference external" href="https://en.wikipedia.org/wiki/MH_Message_Handling_System"&gt;MH&lt;/a&gt; style files under &lt;span class="file"&gt;~/Mail&lt;/span&gt; as their local message store.
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/MH_Message_Handling_System"&gt;MH&lt;/a&gt; puts subdirectories there for folders, and in each folder the
messages are named with integers that correspond to the order in which
they were incorporated from whatever mail source you were using
(historically &lt;span class="file"&gt;/var/mail&lt;/span&gt;).  &lt;a class="reference external" href="https://en.wikipedia.org/wiki/MH_Message_Handling_System"&gt;MH&lt;/a&gt; used command line programs to
incorporate mail, list mail messages, display mail messages, and file
it into folders.  I rather liked it.  I used &lt;a class="reference external" href="https://www.nongnu.org/nmh/"&gt;nmh&lt;/a&gt; (the New MH, a new
implementation of the original Rand MH commands, which ran on newer
Unixes) and &lt;a class="reference external" href="https://mailutils.org/"&gt;GNU mailutils&lt;/a&gt; (which provided MH-compatible command
line programs, if not configured out), sometimes during the same
period of time, for a considerable time.  At one time, when I was
getting mail at a server I had online, I was using &lt;a class="reference external" href="https://www.nongnu.org/nmh/"&gt;nmh&lt;/a&gt;, &lt;a class="reference external" href="https://mailutils.org/"&gt;GNU
mailutils&lt;/a&gt;, Emacs’s built-in interface to MH (&lt;a class="reference external" href="https://www.emacswiki.org/emacs/MH-E"&gt;MH-E&lt;/a&gt;), &lt;a class="reference external" href="https://www.emacswiki.org/emacs/WanderLust"&gt;Wanderlust&lt;/a&gt;,
and &lt;a class="reference external" href="http://www.mew.org/"&gt;Mew&lt;/a&gt;. (Before that I used &lt;a class="reference external" href="http://savannah.nongnu.org/projects/viewmail"&gt;ViewMail&lt;/a&gt;, and before that I used
&lt;a class="reference external" href="https://www.emacswiki.org/emacs/Rmail"&gt;RMAIL&lt;/a&gt;) They each had features the other lacked.&lt;/p&gt;
&lt;p&gt;I tried using &lt;a class="reference external" href="https://www.seas.upenn.edu/~bcpierce/unison/"&gt;Unison&lt;/a&gt; to sync that mail between my server online and
my computer at home, but that did not work well, since &lt;a class="reference external" href="https://en.wikipedia.org/wiki/MH_Message_Handling_System"&gt;MH&lt;/a&gt; commands
change the names of files when they move them from one folder to
another (remember, each message in a folder gets a name that is an
integer based on the order in which it was incorporated in that
folder, and its folder command provided an option, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-pack&lt;/span&gt;&lt;/code&gt;, that
renamed all the messages in a folder sequentially, used after you’d
deleted messages) so you couldn’t keep track if the message named 32
in one folder on one machine was a new one or just renamed from 976
when you ran folder -pack last.  Syncing with &lt;a class="reference external" href="https://www.seas.upenn.edu/~bcpierce/unison/"&gt;Unison&lt;/a&gt; just did not
work at all.  Hmm.  I could have changed the &lt;code class="docutils literal"&gt;Path&lt;/code&gt; option in my
&lt;span class="file"&gt;.mh-profile`&lt;/span&gt; file on each machine, so that instead of all the
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/MH_Message_Handling_System"&gt;MH&lt;/a&gt; mail being under &lt;span class="file"&gt;~/Mail&lt;/span&gt; on both machines, on my home
machine it could have been under &lt;span class="file"&gt;~/Mail-home&lt;/span&gt; and on
tkb.mpl.com it could have been under &lt;span class="file"&gt;~/Mail-onlineserver&lt;/span&gt;, and
then I could have used &lt;a class="reference external" href="https://rsync.samba.org/"&gt;rsync&lt;/a&gt; to copy those from one machine to the
other appropriately so I’d have a backup.  Huh.  Wish I’d figured that
out back in the day.  Of course, to read email in &lt;span class="file"&gt;~/Mail-home&lt;/span&gt;
on my online server I’d have had to changed the &lt;code class="docutils literal"&gt;Path&lt;/code&gt; option in my
&lt;span class="file"&gt;~/.mh_profile&lt;/span&gt; on that machine, and then changed it back when I
wanted to use &lt;span class="file"&gt;~/Mail-onlineserver&lt;/span&gt;.  It would have worked,
however.&lt;/p&gt;
&lt;p&gt;Completion made me go look at the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/MIME"&gt;MIME&lt;/a&gt; messages I was testing in
&lt;a class="reference external" href="https://www.emacswiki.org/emacs/MH-E"&gt;MH-E&lt;/a&gt;.  In the &lt;code class="docutils literal"&gt;multipart/mixed&lt;/code&gt; message &lt;a class="reference external" href="https://www.emacswiki.org/emacs/MH-E"&gt;MH-E&lt;/a&gt; does not show the
PNG files inline, though emacs has the capability to do that now.  It
&lt;em&gt;does&lt;/em&gt; have keybindings to open an external viewer for you.  If you
specify the macOS command &lt;span class="command"&gt;open&lt;/span&gt; it will open it in whatever
app is the default for macOS; in the case of PNGs that is
&lt;span class="app"&gt;Preview&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I do most of my email reading and sending in Gmail these days, alas.  I
still use &lt;a class="reference external" href="https://www.emacswiki.org/emacs/WanderLust"&gt;Wanderlust&lt;/a&gt; and &lt;a class="reference external" href="http://www.mew.org/"&gt;Mew&lt;/a&gt; occasionally, since they support &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Internet_Message_Access_Protocol"&gt;IMAP&lt;/a&gt;
very well.  Now if only Google didn't make it harder to use them:
Gmail declares IMAP-over-SSL is a “less secure” application, and turns
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Internet_Message_Access_Protocol"&gt;IMAP&lt;/a&gt; access off if you don't use it regularly.&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="mime-edit-mode"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2020/12/11/mime-and-gmail-vs-other-mailers/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;This is provided by &lt;a class="reference external" href="https://www.emacswiki.org/emacs/SemiIsEmacsMimeInterface"&gt;SEMI&lt;/a&gt;, an Emacs Lisp package,
and it has a GitHub repo (&lt;a class="reference external" href="https://github.com/wanderlust/semi"&gt;SEMIGH&lt;/a&gt;), last commit 27 days ago as of
the time of this writing.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;&lt;/div&gt;</description><category>alpine</category><category>mew</category><category>mime</category><category>mutt</category><category>thunderbird</category><category>wanderlust</category><guid>https://tkurtbond.github.io/posts/2020/12/11/mime-and-gmail-vs-other-mailers/</guid><pubDate>Fri, 11 Dec 2020 14:12:17 GMT</pubDate></item><item><title>Cobol and Fortran</title><link>https://tkurtbond.github.io/posts/2020/12/10/cobol-and-fortran/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;I know &lt;a class="reference external" href="https://en.wikipedia.org/wiki/COBOL"&gt;Cobol&lt;/a&gt;, and have written it for work, but not for a long time,
maybe 30 years? No, I lie, I did some a decade or two ago.  It was not
my favorite programming language, but knowing it helped pay the
bills.  At my college in the mid-80s it was taught by the Business
department rather than the Computer Science department!&lt;/p&gt;
&lt;p&gt;One of my Cobol jobs was porting code from the IBM mainframes to VMS
on a Digital Equipment Corporation mini-computer, the VAX.  A more
recent one was fixing bugs and making enhancements to some student
management software at a nearby college.&lt;/p&gt;
&lt;p&gt;What little Fortran I've written was in the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ratfor"&gt;ratfor&lt;/a&gt; (Rational Fortran)
dialect, on VMS, using the Software Tools package written at Lawrence
Berkeley Labs, which ported a lot of Unix tools to VMS (and IBM
mainframes) using ratfor (a dialect that was first invented on Unix to
add modern control structures to Fortran 66, and implemented
as a preprocessor).&lt;/p&gt;
&lt;p&gt;One of my favorite programming books is &lt;a class="reference external" href="https://www.amazon.com/Software-Tools-Brian-W-Kernighan/dp/020103669X/ref=sr_1_3"&gt;Software Tools&lt;/a&gt; by Brian
Kernighan and P.J. Plauger (I first read the &lt;a class="reference external" href="https://www.amazon.com/Software-Tools-Pascal-Brian-Kernighan/dp/0201103427/ref=sr_1_4"&gt;Software Tools in
Pascal&lt;/a&gt; version), which showed how to write Unix like tools
in Ratfor (because at the time Fortran was more portable than C!).  It
was the inspiration for the LBL Software tools package.  I wish I
still had the LBL Software Tools on the VAX I maintain (running on a
software emulator on Intel hardware, at much faster speeds than the
original VAX), but it was deleted to save space long ago in an era of
expensive hard drives, a decision I've long regretted!  I can find the
source online, but I can't find a binary distribution, and that VAX
doesn't have a Fortran compiler anymore, alas.&lt;/p&gt;&lt;/div&gt;</description><category>cobol</category><category>fortran</category><category>ratfor</category><guid>https://tkurtbond.github.io/posts/2020/12/10/cobol-and-fortran/</guid><pubDate>Thu, 10 Dec 2020 16:06:20 GMT</pubDate></item><item><title>EPUB files, Markup Languages, and briefly Unix</title><link>https://tkurtbond.github.io/posts/2020/12/01/epub-files-markup-languages-and-briefly-unix/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;What follows is a lightly edited version (for clarity and relevance)
of the postscripts from an email that I recently wrote, transferred
here for posterity and the general good.&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;&lt;strong&gt;Danger! Danger Will Robinson! Danger!&lt;/strong&gt; The postscripts and
footnotes are much longer than the main body of the reply!  And the
footnotes are longer than the text of the postscripts!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.S&lt;/strong&gt;. H., P. (and H. M., if you are interested, though I
admit this combines some of my more geeky interests and thus may be of
less interest to all of you, or for Howard and Paul, for that matter):&lt;/p&gt;
&lt;p&gt;I actually figured out how to make ebooks (to a limited degree)
because I wanted to try an ebook I made of an RPG adventure I wrote
for a currently on hiatus&lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2020/12/01/epub-files-markup-languages-and-briefly-unix/#id9" id="id1"&gt;0&lt;/a&gt; fantasy &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Savage_Worlds"&gt;Savage Worlds&lt;/a&gt; roleplaying game
campaign for my daughter &lt;a class="reference external" href="https://www.facebook.com/lily.bond.31"&gt;Lily&lt;/a&gt; and my &lt;a class="reference external" href="https://www.facebook.com/eva.atha.7"&gt;niece&lt;/a&gt; and nephews (&lt;a class="reference external" href="https://www.facebook.com/mason.atha.7"&gt;N1&lt;/a&gt;). I originally wrote the
adventure&lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2020/12/01/epub-files-markup-languages-and-briefly-unix/#id10" id="id2"&gt;1&lt;/a&gt; in three typesetting systems which use &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Markup_language"&gt;markup
languages&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/ConTeXt"&gt;ConTeXt&lt;/a&gt;, and &lt;a class="reference external" href="https://troff.org/"&gt;troff&lt;/a&gt;&lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2020/12/01/epub-files-markup-languages-and-briefly-unix/#id11" id="id3"&gt;2&lt;/a&gt; (which I usually use in its guise as
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/GNU"&gt;GNU&lt;/a&gt; &lt;a class="reference external" href="https://www.gnu.org/software/groff/"&gt;groff&lt;/a&gt;, but this time I
used &lt;span class="app"&gt;Heirloom troff&lt;/span&gt;, part of the &lt;a class="reference external" href="http://n-t-roff.github.io/heirloom/doctools.html"&gt;Heirloom Documentation
Tools&lt;/a&gt;, for its easy access to modern fonts) to compare the markup
languages and their PDF output to decide which one I prefered to
use. Later I converted it to &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;ReStructuredText&lt;/a&gt;, a lightweight markup
language&lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2020/12/01/epub-files-markup-languages-and-briefly-unix/#id12" id="id4"&gt;3&lt;/a&gt; that I use, to compare it to the other markup
languages.&lt;/p&gt;
&lt;p&gt;I have used ReStructuredText on and off for many years, but the main
drawbacks to it was that (1) the output produced by its original
&lt;a class="reference external" href="https://docutils.sourceforge.io/"&gt;docutils&lt;/a&gt; implementation was
excessively stark and difficult to customize to have a nicer
appearance, and (2) its workflow was somewhat difficult,&lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2020/12/01/epub-files-markup-languages-and-briefly-unix/#id13" id="id5"&gt;4&lt;/a&gt; Some
time ago I discovered &lt;a class="reference external" href="https://pandoc.org/"&gt;Pandoc&lt;/a&gt;, a “universal
document converter” which can read many input sources, including
ReStructuredText, and produce output in many output formats, including
PDF (via &lt;span class="app"&gt;LaTeX&lt;/span&gt;, &lt;span class="app"&gt;ConTeXt&lt;/span&gt;, or &lt;span class="app"&gt;troff&lt;/span&gt;; in ways easier
to customize the appearance of) and HTML, and, as it turns and
importantly to this story, EPUB, the most common format for ebooks! I
started using &lt;span class="app"&gt;Pandoc&lt;/span&gt; because it made it easier to generate PDF from
ReStructuredText with one command (since &lt;span class="app"&gt;Pandoc&lt;/span&gt; runs all the
intermediate steps and cleans up any temporary files needed). It
turned out that the abilities to read multiple input formats and to
more easily customize the output was important to me as well.&lt;/p&gt;
&lt;p&gt;So, having converted the adventure over to ReStructuredTexT for
comparison&lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2020/12/01/epub-files-markup-languages-and-briefly-unix/#id14" id="id6"&gt;5&lt;/a&gt; and at first using PDF through &lt;span class="app"&gt;Pandoc&lt;/span&gt;'s
&lt;code class="docutils literal"&gt;troff &lt;span class="pre"&gt;-ms&lt;/span&gt;&lt;/code&gt; output, I soon decided to take a look at &lt;span class="app"&gt;Pandoc&lt;/span&gt;'s other
output formats. I started with &lt;span class="app"&gt;LaTeX&lt;/span&gt; and &lt;span class="app"&gt;ConTeXt&lt;/span&gt;, and decided that the
PDF output via &lt;span class="app"&gt;LaTeX&lt;/span&gt; was not of much interest to me, but the PDF
output via &lt;span class="app"&gt;ConTeXt&lt;/span&gt; offered greater control over the appearance of the
final PDF output and the opportunity of adding via writing Lua filters
some features to the resulting documents that lightweight markup
languages normally don't offer, such as indexes and cross references
that are both hyperlinks and include page numbers and section names in
the PDF output, which are features that I didn't need in the adventure
document, but which I expect to need in future documents.&lt;/p&gt;
&lt;p&gt;But back to the important point, &lt;span class="app"&gt;Pandoc&lt;/span&gt; can produce EBUB output for
ebooks!  Since I already had the adventure in ReStructuredText, and
&lt;span class="app"&gt;Pandoc&lt;/span&gt; produces EPUB, and I have an ebook reader, a Kindle, it just
makes sense to figure out how to get it onto my Kindle! First I used
&lt;span class="app"&gt;Pandoc&lt;/span&gt; to generate the EPUB. That required figuring out how to
generate a reasonably attractive cover. Then wrote a small config file
for &lt;span class="app"&gt;Pandoc&lt;/span&gt;.  Then I generated the EPUB output. Then I figured out how
to convert that over to MOBI, one of the formats that the Kindle can
use.&lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2020/12/01/epub-files-markup-languages-and-briefly-unix/#id15" id="id7"&gt;6&lt;/a&gt; Then I mailed it to my Kindle's email, and it looked
reasonably good!&lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2020/12/01/epub-files-markup-languages-and-briefly-unix/#id16" id="id8"&gt;7&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hope you've enjoyed this twisty maze of passages, all different!&lt;/p&gt;
&lt;p&gt;And with a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Zork"&gt;Zork&lt;/a&gt; reference I
really must end this email!&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id9"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2020/12/01/epub-files-markup-languages-and-briefly-unix/#id1"&gt;0&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Pandemics are no fun!&lt;/p&gt;
&lt;p&gt;I originally thought I'd get through this email without footnotes, but
&lt;a class="reference external" href="https://www.worldwidewords.org/qa/qa-nee1.htm"&gt;needs must when the devil
drives&lt;/a&gt;. I rather
enjoy footnotes in email messages, but it's not as convenient in gmail
as it used to be in Emacs. And since it offered the opportunity for a
Shakespeare reference of sorts, I'm quite pleased, in general.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id10"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2020/12/01/epub-files-markup-languages-and-briefly-unix/#id2"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;As it turns out, I actually wrote &lt;strong&gt;seven&lt;/strong&gt; Savage Worlds
adventures in &lt;span class="app"&gt;troff&lt;/span&gt;, and then converted them all to
&lt;span class="app"&gt;LaTeX&lt;/span&gt; and &lt;span class="app"&gt;ConTeXt&lt;/span&gt; for comparison later. I actually
wrote the first &lt;strong&gt;three&lt;/strong&gt; adventures using &lt;a class="reference external" href="https://www.libreoffice.org/"&gt;LibreOffice&lt;/a&gt;, a conventional office suite with
a word processor, something I normally dislike but was giving
another chance. I decided after three adventures that I wasn't
going to do another in &lt;span class="app"&gt;LibreOffice&lt;/span&gt;, and started looking for
alternatives, hence comparing markup languages. I tend to like
markup languages better than &lt;a class="reference external" href="https://en.wikipedia.org/wiki/WYSIWYG"&gt;WYSIWYG&lt;/a&gt; editors; this may just be the
programmer in me liking the idea of languages over WYSIWYG, but
there did turn out to be significant advantages to switching to a
markup language in the end. The primary one was that I could put
character and creature descriptions in external files and reference
them in the main file, rather than cut and paste them from one
document to another, which meant I could just change the external
file and it would automatically be included in the updated document
next time I generated output from it. With a WYSIWYG tool I'd have
had to go back and cut and paste the changed material in every
document every time I changed it, which would be immensely tedious
and horribly error prone and all too common.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id11"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2020/12/01/epub-files-markup-languages-and-briefly-unix/#id3"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;This footnote is about &lt;span class="app"&gt;LaTeX&lt;/span&gt;, &lt;span class="app"&gt;ConTeXt&lt;/span&gt;, and
&lt;span class="app"&gt;troff&lt;/span&gt;, and peripherally about &lt;a class="reference external" href="https://en.wikipedia.org/wiki/TeX"&gt;TeX&lt;/a&gt;, the progenitor of
&lt;span class="app"&gt;LaTeX&lt;/span&gt; and &lt;span class="app"&gt;ConTeXt&lt;/span&gt;. &lt;span class="app"&gt;Troff&lt;/span&gt; was one of the
earliest computer typesetting systems, invented in 1973 as a scheme
at the computer science portion of Bell Labs to get a PDP-11 so
they could have an &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Time-sharing"&gt;time-sharing&lt;/a&gt; operating system,
like the earlier &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Multics"&gt;Multics&lt;/a&gt; that ran on much more
expensive hardware and that the researchers had worked on
previously and looked back fondly after Bell Labs pulled out of
that research. Bell Labs wouldn't just pay for a computer for the
researchers to play with, so they proposed developing a computer
typesetting system for the secretaries to use, largely for patent
submission, something Bell Labs did a lot of. Their scheme
succeeded and as a result they invented Unix and &lt;span class="app"&gt;troff&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;So, Unix was invented &lt;strong&gt;explicitly&lt;/strong&gt; to run &lt;span class="app"&gt;troff&lt;/span&gt;!&lt;/p&gt;
&lt;p&gt;&lt;span class="app"&gt;TeX&lt;/span&gt;, by contrast, was not invented until 1978, &lt;span class="app"&gt;LaTeX&lt;/span&gt; in
1985, and &lt;cite&gt;ConTeXt&lt;/cite&gt; not until 1990! (I wish I'd found out about the
latter earlier!)  &lt;span class="app"&gt;TeX&lt;/span&gt; was invented because of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Donald_Knuth"&gt;Donald
Knuth&lt;/a&gt;'s desire to produce gloriously typeset books with
mathematics for his multi-volume work &lt;a class="reference external" href="https://en.wikipedia.org/wiki/The_Art_of_Computer_Programming"&gt;The Art of Computer
Programming&lt;/a&gt;.
He finished &lt;span class="app"&gt;TeX&lt;/span&gt; long ago, but is still working on those
books.&lt;/p&gt;
&lt;p&gt;All of these typesetting systems have what are called markup
languages, where the text of the document is interspersed with
commands distinguished in some way from the regular text. For
instance, the command &lt;code class="docutils literal"&gt;\begin{document}&lt;/code&gt; from &lt;span class="app"&gt;LaTeX&lt;/span&gt; is
typical of &lt;span class="app"&gt;TeX&lt;/span&gt;, &lt;span class="app"&gt;LaTeX&lt;/span&gt;, and &lt;span class="app"&gt;ConTeXt&lt;/span&gt;, all of
which are related. &lt;span class="app"&gt;Troff&lt;/span&gt; uses backslash commands in the
middle of text and and commands on separate lines starting with
periods but historically those commands have been limited to names
of two characters, though this was relaxed in the later
&lt;span class="app"&gt;troff&lt;/span&gt; implementation &lt;span class="app"&gt;groff&lt;/span&gt;, and in the &lt;span class="app"&gt;Heirloom
troff&lt;/span&gt; implementation
which extended the second &lt;span class="app"&gt;troff&lt;/span&gt; implementation,
&lt;span class="app"&gt;ditroff&lt;/span&gt;, with similar features as gnu groff, but easier
access to modern fonts.&lt;/p&gt;
&lt;p&gt;I am particularly impressed by &lt;span class="app"&gt;troff&lt;/span&gt;'s ability to
correctly typeset documents that I wrote 30 years ago and that
others have written even earlier. It has never failed me in this
task.† This has often been a problem for me with documents from
WYSIWYG systems on the contrary, even when those documents were
more recently created, including one significant one
from 2004. (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/StarOffice"&gt;Star Office&lt;/a&gt;, I'm looking at
you!‡). &lt;span class="app"&gt;LaTeX&lt;/span&gt; is reasonably backward compatible, though it
did go through some big changes earlier it is now mostly stable. I
did experience some compatibility problems, minor with my documents
and major with complicated documents written by others.
&lt;span class="app"&gt;ConTeXt&lt;/span&gt; is generally stable, but it is developing rapidly so
has more changes, though the developers are good about backward
compatibility. The increasing sophistication of &lt;span class="app"&gt;ConTeXt&lt;/span&gt;,
which along its development has subsumed both &lt;span class="app"&gt;TeX&lt;/span&gt; and
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/MetaPost"&gt;MetaPost&lt;/a&gt; and combined and extended them with the Lua scripting
language (mentioned again below), producing something that is even
more flexible and impressive than &lt;span class="app"&gt;TeX&lt;/span&gt; and &lt;span class="app"&gt;LaTeX&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Another thing I like about markup languages is the fact that they
are &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Plain_text"&gt;plain text&lt;/a&gt;‖, and can be manipulated with any program you
want. Before the emergence of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/XML"&gt;XML&lt;/a&gt;-based WYSIWYG document formats
in &lt;span class="app"&gt;Microsoft Word&lt;/span&gt;§ and &lt;span class="app"&gt;Star Office&lt;/span&gt; this was
practically impossible. Even now the complexity of the ZIP file and
XML markup renders this much much more unpleasant to deal
with. Kicking dead whales down the beach indeed! Being able to use
any tool at all on a document is considerably more useful than
being limited to the poor extensions languages of &lt;span class="app"&gt;Microsoft
Word&lt;/span&gt; and &lt;span class="app"&gt;LibreOffice&lt;/span&gt;, and usually much simpler.&lt;/p&gt;
&lt;p&gt;† I &lt;strong&gt;have&lt;/strong&gt; had to change a few external programs I've written to
help in the build process. &lt;a class="reference external" href="https://www.perl.org/"&gt;Perl&lt;/a&gt; was a problem here. (I tried to resist
the footnote within the footnote, but again, need must when the devil
drives.)&lt;/p&gt;
&lt;p&gt;‡ Sure, the current &lt;span class="app"&gt;LibreOffice&lt;/span&gt; will open the file, but the
formatting is significantly messed up.  Earlier versions, if I
remember correctly, did not open the file correctly.&lt;/p&gt;
&lt;p&gt;§ I have never written a document in &lt;span class="app"&gt;Microsoft Word&lt;/span&gt; for my
personal use, though unfortunately I have used it often at work.&lt;/p&gt;
&lt;p&gt;‖ I have delightedly taken to using Unicode characters in my plain text
documents, as the ReStructuredText source of this document shows.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id12"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2020/12/01/epub-files-markup-languages-and-briefly-unix/#id4"&gt;3&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Lightweight markup languages, in contrast with &lt;span class="app"&gt;TeX&lt;/span&gt;,
&lt;span class="app"&gt;LaTeX&lt;/span&gt;, &lt;span class="app"&gt;ConTeXt&lt;/span&gt;, and &lt;span class="app"&gt;troff&lt;/span&gt;, are usually things
that start with the conventions like indicating *italics* by
surrounding phrases in plain text email messages and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Usenet"&gt;USENET&lt;/a&gt; posts
around them in the olden days. Most of them avoid the use of lots
of keywords and backslashes, of the sort &lt;span class="app"&gt;TeX&lt;/span&gt;, &lt;span class="app"&gt;LaTeX&lt;/span&gt;,
&lt;span class="app"&gt;ConTeXt&lt;/span&gt;, and to a partial extent &lt;span class="app"&gt;troff&lt;/span&gt; use. Instead,
they largely try to use the non-alphanumeric characters on a
standard keyboard to indicate how the text should be typeset, and
without using long command names. The lack of these long command
names (or short ones in &lt;span class="app"&gt;troff&lt;/span&gt;'s case) and the relatively
unobtrusive nature of the non-alphanumeric characters makes
documents easier to read. This is why they are called “lightweight”
markup languages. &lt;a class="reference external" href="http://Lightweight_markup_language"&gt;Wikipedia&lt;/a&gt; has a good article that
explains and compares them. Another advantage of most lightweight
markup languages is that since they don't generally use command
names, native speakers of languages other than English don't have
to learn English command names, a significant matter.&lt;/p&gt;
&lt;p&gt;I happen to prefer ReStructuredText, but Markdown is another very
popular lightweight markup language that I sometimes use.&lt;/p&gt;
&lt;p&gt;Another advantage to lightweight markup languages such as
ReStructuredText and Markdown is that they often have programs allowing
multiple kinds of output from them (PDF and HTML are typical) and since
lightweight markup languages make no pretensions to being programming
languages, which the markup languages of the original typesetting
systems do (since that was how they allowed customization and
extension), writing the programs to output multiple output types for
lightweight markup languages is simpler than than writing programs to
parse the heavy markup languages, which is the common approach that
people take to get HTML from &lt;span class="app"&gt;LaTeX&lt;/span&gt;, for instance. The fact that heavy
markup languages are usually &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Turing_completeness"&gt;Turing
complete&lt;/a&gt; and so
can be extensively (and definitely are in practice) extended and often
have programmable syntax makes processing them with other tools
difficult and usually require much hand conversion. It is my impression
that while &lt;span class="app"&gt;LaTeX&lt;/span&gt; to HTML translators like
&lt;a class="reference external" href="https://tug.org/tex4ht/"&gt;TeXht&lt;/a&gt; and
&lt;a class="reference external" href="http://hevea.inria.fr/"&gt;HEVEA&lt;/a&gt; are very good for documents that only
use the standard features of &lt;span class="app"&gt;LaTeX&lt;/span&gt; they can't deal easily with heavily
programmed documents, since that would require more semantic
understanding of the original &lt;span class="app"&gt;LaTeX&lt;/span&gt; source.&lt;/p&gt;
&lt;p&gt;One interesting attempt in this direction for &lt;span class="app"&gt;troff&lt;/span&gt; was the &lt;a class="reference external" href="http://www-rn.informatik.uni-bremen.de/software/unroff/"&gt;unroff&lt;/a&gt;
program, written in &lt;a class="reference external" href="http://sam.zoy.org/elk/"&gt;Elk Scheme&lt;/a&gt;. It
took the approach of implementing a complete &lt;span class="app"&gt;troff&lt;/span&gt; parser and
proving Scheme as an extension language so you could completely
customize the output.  It provided a complete implementation for
the &lt;code class="docutils literal"&gt;troff &lt;span class="pre"&gt;-ms&lt;/span&gt;&lt;/code&gt; macros, and I was easily able to extend those to
handle cross references and indexes that I had extended that &lt;span class="app"&gt;troff&lt;/span&gt;
document's build process to provide, in 170 lines of Scheme.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id13"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2020/12/01/epub-files-markup-languages-and-briefly-unix/#id5"&gt;4&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;In particular, there was no standard name for the commands used
to generate various kinds of output; on some operating systems it
was rst2latex, and on others it was rst2latex.py. Also, the
&lt;span class="app"&gt;docutils&lt;/span&gt; toolchain for producing PDF output generated
intermediate &lt;span class="app"&gt;LaTeX&lt;/span&gt; files which necessitated processing with
further tools, which usually necessitated writing a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Makefile"&gt;Makefile&lt;/a&gt; so I didn't have to
retype multiple commands whenever I regenerated the output
document. For a simple document that was considerable hassle and
overhead, even when worth it for a more complicated
document. (Makefiles are well worth it for complicated documents
with complicated build processes, of course.  I have lots of those.)&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id14"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2020/12/01/epub-files-markup-languages-and-briefly-unix/#id6"&gt;5&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;As a result of the comparison, I decided that I greatly
prefered ReStructuredText and &lt;span class="app"&gt;pandoc&lt;/span&gt; for the tool to process
it. &lt;span class="app"&gt;Pandoc&lt;/span&gt;'s ability to customize its output using
&lt;a class="reference external" href="https://pandoc.org/lua-filters.html"&gt;filters&lt;/a&gt; written in the
programming language &lt;a class="reference external" href="https://www.lua.org/"&gt;Lua&lt;/a&gt; was
particularly appealing, as was the ability to customize its default
templates for generating output using the &lt;code class="docutils literal"&gt;troff &lt;span class="pre"&gt;-ms&lt;/span&gt;&lt;/code&gt; macros and
&lt;span class="app"&gt;ConTeXt&lt;/span&gt;. I see a use for both of those, since the -ms output
is easier to customize for things that the base -ms provides, but
the &lt;span class="app"&gt;ConTeXt&lt;/span&gt; output offers greater control over the final
appearance, though often at the cost of greater effort. For
instance, I have a moderately long document† that is currently in
&lt;a class="reference external" href="https://docbook.org/"&gt;DocBook&lt;/a&gt; 5.0 XML format, and I now find
it tedious to edit and the open source tool for generating PDF from
it has serious flaws. (I'm resisting another footnote in a
footnote. Be impressed that I succeeded!) I can see how I can
convert it to ReStructuredText (or Markdown, for that matter) and
use &lt;span class="app"&gt;Pandoc&lt;/span&gt;'s &lt;span class="app"&gt;ConTeXt&lt;/span&gt; output to produce a nicer, more
attractive PDF. Now I just need the time to write the lua filter
and do the conversion. (&lt;span class="app"&gt;Pandoc&lt;/span&gt; will convert it from DocBook, but
will lose the indexing information, which I would have to do all
over again, a task with more work than I want to contemplate at the
moment.)&lt;/p&gt;
&lt;p&gt;I still find uses for &lt;span class="app"&gt;troff&lt;/span&gt; and &lt;span class="app"&gt;ConTeXt&lt;/span&gt;. In
particular, if I have to use complicated tables in a document I
find that the either &lt;span class="app"&gt;troff&lt;/span&gt; or &lt;span class="app"&gt;ConTeXt&lt;/span&gt; works
better. (Simple tables for either are OK from ReStructuredText
output, but complicated ones…!)&lt;/p&gt;
&lt;p&gt;† The DocBook version of the document was derived from the &lt;code class="docutils literal"&gt;troff &lt;span class="pre"&gt;-ms&lt;/span&gt;&lt;/code&gt;
source mentioned previously, though by the time the
conversion happened I vaguely recall I no longer had access to a working
&lt;span class="app"&gt;unroff&lt;/span&gt;, I think because of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Software_rot"&gt;bitrot&lt;/a&gt;. &lt;a class="reference external" href="http://netbsd.org/"&gt;NetBSD&lt;/a&gt; has an &lt;span class="app"&gt;unroff&lt;/span&gt;
&lt;a class="reference external" href="https://pkgsrc.se/textproc/unroff"&gt;package&lt;/a&gt; in its pkgsrc
collection of program, and I could install it now on my NetBSD
machine, but when I tried to process the document &lt;span class="app"&gt;unroff&lt;/span&gt; exited
complaining about a syntax error in one of its Scheme files. So bitrot
seems to prevail.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id15"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2020/12/01/epub-files-markup-languages-and-briefly-unix/#id7"&gt;6&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;Using an open source command line utility provided with
&lt;a class="reference external" href="https://calibre-ebook.com/"&gt;Calibre&lt;/a&gt; ebook reader, of course!&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id16"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2020/12/01/epub-files-markup-languages-and-briefly-unix/#id8"&gt;7&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;There are some oddities in the current build with the conversion to
mobi complaining about fonts not being found in the right places and
being deleted from the result, but I don't know enough about ebooks to
debug it at this time. Besides, I've hit the auspicious footnote number
seven (though it's not the seventh footnote, as it is actually the
eighth!) and should really finish this email now.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;strong&gt;P.P.S.&lt;/strong&gt; &lt;em&gt;Omitted for irrelevance&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;P.P.P.S.&lt;/strong&gt; Sorry, no deeply nested parenthetical expressions this
time!&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Here's an addendum with two Apple &lt;span class="app"&gt;Messenger&lt;/span&gt; messages to P.,
reflecting on converting this from an HTML email into a blog post:&lt;/p&gt;
&lt;p&gt;The HTML dialect Google uses in its MIME emails is very odd.  It
doesn’t use &lt;code class="docutils literal"&gt;&amp;lt;p&amp;gt;&lt;/code&gt; elements, using instead &lt;code class="docutils literal"&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements.
Unfortunately, &lt;span class="app"&gt;pandoc&lt;/span&gt; converts those into containers, and nests
them according to the nesting of the &lt;code class="docutils literal"&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements.  To fix this
I hand edited the HTML to remove the outer &lt;code class="docutils literal"&gt;&amp;lt;div&amp;gt;&lt;/code&gt; elements and
convert the remaining ones into &amp;lt;p&amp;gt;s.  Also, for some reason when I
ran the documents through HTML tidy it converted the unicode
characters into incorrect HTML character entities.  I see now that it
has a &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-utf8&lt;/span&gt;&lt;/code&gt; switch, which I’ll have to remember for the next time
I do this.  (There will inevitably be a next time.)&lt;/p&gt;
&lt;p&gt;OMG, now I have have to put that in the blog post!  How many &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Saving_throw"&gt;saving
throws&lt;/a&gt; am I going to fail today anyway?&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Last edited: 2020-12-28 11:11:54 EST&lt;/em&gt;&lt;/p&gt;
&lt;!-- Local Variables:
time-stamp-format: "%04y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "\\*Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
time-stamp-line-limit: -20
End: --&gt;&lt;/div&gt;</description><category>context</category><category>epub</category><category>latex</category><category>lightweight markup languages</category><category>markup languages</category><category>tex</category><category>troff</category><category>unix</category><guid>https://tkurtbond.github.io/posts/2020/12/01/epub-files-markup-languages-and-briefly-unix/</guid><pubDate>Tue, 01 Dec 2020 20:56:13 GMT</pubDate></item><item><title>SRFI-159 Supersedes Alix Shinn's fmt package</title><link>https://tkurtbond.github.io/posts/2020/11/13/srfi-159-supersedes-alix-shinns-fmt-package/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a note to help me remember to use &lt;a class="reference external" href="https://srfi.schemers.org/srfi-159/srfi-159.html"&gt;SRFI-159&lt;/a&gt; instead of &lt;a class="reference external" href="-http://wiki.call-cc.org/eggref/5/fmt"&gt;fmt&lt;/a&gt;
when I can.&lt;/p&gt;
&lt;p&gt;The scheme &lt;a class="reference external" href="https://srfi.schemers.org/srfi-159/srfi-159.html"&gt;SRFI-159&lt;/a&gt; is similar to the &lt;a class="reference external" href="http://call-cc.org/"&gt;Chicken Scheme&lt;/a&gt; &lt;a class="reference external" href="-http://wiki.call-cc.org/eggref/5/fmt"&gt;fmt&lt;/a&gt; egg
and is written by Alex Shinn and references his original &lt;a class="reference external" href="http://synthcode.com/scheme/fmt/"&gt;fmt -
Combinator Formating&lt;/a&gt; code on which the egg is based but it doesn’t
seem to be implemented for Chicken Scheme.  It does explain why there
isn’t a version of fmt for &lt;a class="reference external" href="https://github.com/ashinn/chibi-scheme"&gt;Chibi Scheme&lt;/a&gt;, since Chibi Scheme
includes an &lt;a class="reference external" href="https://github.com/ashinn/chibi-scheme/tree/master/lib/srfi/159"&gt;implementation&lt;/a&gt; of SRFI-159 already.  There doesn't seem
to be a &lt;a class="reference external" href="http://snow-fort.org/"&gt;Snow&lt;/a&gt; version either.&lt;/p&gt;&lt;/div&gt;</description><category>Alex Shinn</category><category>fmt</category><category>scheme</category><category>SRFI-159</category><guid>https://tkurtbond.github.io/posts/2020/11/13/srfi-159-supersedes-alix-shinns-fmt-package/</guid><pubDate>Fri, 13 Nov 2020 19:21:48 GMT</pubDate></item><item><title>Having Emacs time-stamps at the end of files</title><link>https://tkurtbond.github.io/posts/2020/08/05/having-emacs-time-stamps-at-the-end-of-files/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;Do you ever use &lt;span class="app"&gt;Emacs&lt;/span&gt; time stamp functionality (type &lt;span class="key"&gt;C-h
f time-stamp&lt;/span&gt; in &lt;span class="app"&gt;Emacs&lt;/span&gt; to learn about that) to insert the
current date time stamp into your file when you save it?  I use this
frequently in documents I write, for my blog or standalone.  For the
longest time I thought you had to have the time stamp at the beginning
of the file.  But I wanted it at the end of blog posts because it’s
really an afterthought to most readers.  (Sometimes I go back and edit
posts some time after first posting them — perhaps they were
incomplete, or they had errors that needed correcting, etc.)  It turns
out that you can do that — if you set the variable
&lt;code&gt;time-stamp-line-limit&lt;/code&gt; to a negative number it will look
backwards from the end of the file for the timestamp.  I often set the
time stamp variables in a &lt;code class="docutils literal"&gt;Local Variables:&lt;/code&gt; comment at the end of
the file.&lt;/p&gt;
&lt;p&gt;Here's the &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;reST&lt;/a&gt; fragment I insert into my blog posts that uses
&lt;code&gt;time-stamp&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code ReST"&gt;&lt;a name="rest_code_83ae74b2da5c4a7f995d7b297cce5e43-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;role&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; app
&lt;a name="rest_code_83ae74b2da5c4a7f995d7b297cce5e43-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;role&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; file
&lt;a name="rest_code_83ae74b2da5c4a7f995d7b297cce5e43-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;role&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; command
&lt;a name="rest_code_83ae74b2da5c4a7f995d7b297cce5e43-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;role&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; key
&lt;a name="rest_code_83ae74b2da5c4a7f995d7b297cce5e43-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_83ae74b2da5c4a7f995d7b297cce5e43-6"&gt;&lt;/a&gt;&lt;span class="cp"&gt;.. *Last edited: 2020-08-05 17:03:37 EDT*&lt;/span&gt;
&lt;a name="rest_code_83ae74b2da5c4a7f995d7b297cce5e43-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_83ae74b2da5c4a7f995d7b297cce5e43-8"&gt;&lt;/a&gt;&lt;span class="cp"&gt;..&lt;/span&gt;
&lt;a name="rest_code_83ae74b2da5c4a7f995d7b297cce5e43-9"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   Local Variables:&lt;/span&gt;
&lt;a name="rest_code_83ae74b2da5c4a7f995d7b297cce5e43-10"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   time-stamp-format: "%04y-%02m-%02d %02H:%02M:%02S %Z"&lt;/span&gt;
&lt;a name="rest_code_83ae74b2da5c4a7f995d7b297cce5e43-11"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   time-stamp-start: "Last edited:[ \t]+\\\\?"&lt;/span&gt;
&lt;a name="rest_code_83ae74b2da5c4a7f995d7b297cce5e43-12"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   time-stamp-end: "\\*\\\\?\n"&lt;/span&gt;
&lt;a name="rest_code_83ae74b2da5c4a7f995d7b297cce5e43-13"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   time-stamp-line-limit: -20&lt;/span&gt;
&lt;a name="rest_code_83ae74b2da5c4a7f995d7b297cce5e43-14"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   End:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>emacs</category><category>time-stamp</category><guid>https://tkurtbond.github.io/posts/2020/08/05/having-emacs-time-stamps-at-the-end-of-files/</guid><pubDate>Wed, 05 Aug 2020 20:34:22 GMT</pubDate></item><item><title>How I author e-mails to pandoc-discuss and issues on the pandoc repo</title><link>https://tkurtbond.github.io/posts/2020/08/05/how-i-author-e-mails-to-pandoc-discuss-and-issues-on-the-pandoc-repo/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;To submit an issue to the &lt;a class="reference external" href="https://pandoc.org"&gt;pandoc&lt;/a&gt; GitHub &lt;a class="reference external" href="https://github.com/jgm/pandoc"&gt;repository&lt;/a&gt; or an e-mail to
the &lt;a class="reference external" href="https://groups.google.com/forum/#!forum/pandoc-discuss"&gt;pandoc-discuss&lt;/a&gt; Google group when it is complicated I write a
reStructuredText (&lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;reST&lt;/a&gt;) file that shows the problem and a &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;reST&lt;/a&gt; file
that explains the problem that prompted the issue/e-mail and include
the pandoc and os version information and includes the problem &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;reST&lt;/a&gt;
file and sometimes the resulting output files.  I process these files
with &lt;a class="reference external" href="https://pandoc.org"&gt;pandoc&lt;/a&gt;, of course.  If it is going to the mailing list I format
it to HTML with a fancy style and cut and paste it from Chrome into
gmail.  If it is going to be an issue report on GitHub I format it
into &lt;span class="file"&gt;.gfm&lt;/span&gt; (Github Flavored Markdown: &lt;a class="reference external" href="https://github.github.com/gfm/"&gt;GFM&lt;/a&gt;) file because that’s
what you write GitHub issues in and also format it into HTML to check
that the &lt;span class="file"&gt;.gfm&lt;/span&gt; is formed properly.  Typically when I’m writing the
issue &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;reST&lt;/a&gt; file I don’t use language names on code blocks for the
syntax highlighting because that doesn’t seem to come out right in
GFM.&lt;/p&gt;
&lt;p&gt;For example, here is a &lt;a class="reference external" href="https://groups.google.com/d/msg/pandoc-discuss/U44h5Uo7qgQ/xDBRWwERBAAJ"&gt;post&lt;/a&gt;, “RST to RST Conversion Loses Interpreted
Text Roles”, to &lt;a class="reference external" href="https://groups.google.com/forum/#!forum/pandoc-discuss"&gt;pandoc-discuss&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here is the problem &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;reST&lt;/a&gt; source:&lt;/p&gt;
&lt;pre class="code ReST"&gt;&lt;a name="rest_code_77cc80e9c44e4d579698f1a7301b7163-1"&gt;&lt;/a&gt;RST to RST Conversion Looses Interpreted Text Roles
&lt;a name="rest_code_77cc80e9c44e4d579698f1a7301b7163-2"&gt;&lt;/a&gt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
&lt;a name="rest_code_77cc80e9c44e4d579698f1a7301b7163-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_77cc80e9c44e4d579698f1a7301b7163-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;role&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; app
&lt;a name="rest_code_77cc80e9c44e4d579698f1a7301b7163-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_77cc80e9c44e4d579698f1a7301b7163-6"&gt;&lt;/a&gt;&lt;span class="na"&gt;:app:&lt;/span&gt;&lt;span class="nv"&gt;`GNU Emacs`&lt;/span&gt; is an app.  So is &lt;span class="na"&gt;:app:&lt;/span&gt;&lt;span class="nv"&gt;`Eclipse`&lt;/span&gt;.
&lt;/pre&gt;&lt;p&gt;Here is the e-mail &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;reST&lt;/a&gt; source:&lt;/p&gt;
&lt;pre class="code ReST"&gt;&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-1"&gt;&lt;/a&gt;RST to RST Conversion Loses Interpreted Text Roles
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-2"&gt;&lt;/a&gt;@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;role&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; file(literal)
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;role&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; app
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-7"&gt;&lt;/a&gt;It turns out that when you use &lt;span class="na"&gt;:app:&lt;/span&gt;&lt;span class="nv"&gt;`pandoc`&lt;/span&gt; to convert from &lt;span class="s"&gt;``rst``&lt;/span&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-8"&gt;&lt;/a&gt;to &lt;span class="s"&gt;``rst``&lt;/span&gt; the process loses interpreted text roles.
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-10"&gt;&lt;/a&gt;My &lt;span class="na"&gt;:app:&lt;/span&gt;&lt;span class="nv"&gt;`pandoc`&lt;/span&gt; version is:
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;include&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; pandoc.version
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-13"&gt;&lt;/a&gt;   &lt;span class="nc"&gt;:code:&lt;/span&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-15"&gt;&lt;/a&gt;My OS information is:
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-17"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;include&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; os.version
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-18"&gt;&lt;/a&gt;   &lt;span class="nc"&gt;:code:&lt;/span&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-20"&gt;&lt;/a&gt;I generated the outputs to check with the following commands:
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-22"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;code&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-24"&gt;&lt;/a&gt;   pandoc -r rst -w rst -o r2rclitr-out.rst r2rclitr-in.rst
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-25"&gt;&lt;/a&gt;   pandoc -r rst -w native --output=r2rclitr-in.native r2rclitr-in.rst
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-26"&gt;&lt;/a&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-27"&gt;&lt;/a&gt;So, for the ReStructuredText input (file &lt;span class="na"&gt;:file:&lt;/span&gt;&lt;span class="nv"&gt;`r2rclitr-in.rst`&lt;/span&gt;):
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-28"&gt;&lt;/a&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-29"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;include&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; r2rclitr-in.rst
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-30"&gt;&lt;/a&gt;   &lt;span class="nc"&gt;:code:&lt;/span&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-32"&gt;&lt;/a&gt;the resulting &lt;span class="s"&gt;``rst``&lt;/span&gt; output (&lt;span class="na"&gt;:file:&lt;/span&gt;&lt;span class="nv"&gt;`r2rclitr-out.rst`&lt;/span&gt;) is generated:
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-33"&gt;&lt;/a&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-34"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;include&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; r2rclitr-out.rst
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-35"&gt;&lt;/a&gt;   &lt;span class="nc"&gt;:code:&lt;/span&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-36"&gt;&lt;/a&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-37"&gt;&lt;/a&gt;And the &lt;span class="s"&gt;``native``&lt;/span&gt; output (&lt;span class="na"&gt;:file:&lt;/span&gt;&lt;span class="nv"&gt;`r2rclitr-in.native`&lt;/span&gt;) generated:
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-38"&gt;&lt;/a&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-39"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;include&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; r2rclitr-in.native
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-40"&gt;&lt;/a&gt;   &lt;span class="nc"&gt;:code:&lt;/span&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-41"&gt;&lt;/a&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-42"&gt;&lt;/a&gt;has &lt;span class="s"&gt;``Span``&lt;/span&gt; elements with classes, so it should be possible to turn
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-43"&gt;&lt;/a&gt;those back into interpreted text roles in &lt;span class="s"&gt;``rst``&lt;/span&gt; output.  I suppose
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-44"&gt;&lt;/a&gt;you'd have to write out at the beginning of the RST output file a list
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-45"&gt;&lt;/a&gt;of
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-46"&gt;&lt;/a&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-47"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;code&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-48"&gt;&lt;/a&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-49"&gt;&lt;/a&gt;&lt;span class="p"&gt;   ..&lt;/span&gt; &lt;span class="ow"&gt;role&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; rolename
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-50"&gt;&lt;/a&gt;
&lt;a name="rest_code_b4273e0aa1444d83bdec3561ec5a54f7-51"&gt;&lt;/a&gt;lines for every class &lt;span class="s"&gt;``rolename``&lt;/span&gt; in a span.  Would this be possible?
&lt;/pre&gt;&lt;p&gt;Here is the &lt;span class="file"&gt;GNUmakefile&lt;/span&gt; for it:&lt;/p&gt;
&lt;pre class="code makefile"&gt;&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-1"&gt;&lt;/a&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;2&lt;span class="n"&gt;rclitr&lt;/span&gt;-&lt;span class="n"&gt;email&lt;/span&gt;.&lt;span class="n"&gt;html&lt;/span&gt;
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-3"&gt;&lt;/a&gt;&lt;span class="nf"&gt;r2rclitr-email.html&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;pandoc&lt;/span&gt;.&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;.&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="n"&gt;pandoc&lt;/span&gt;.&lt;span class="n"&gt;style&lt;/span&gt; \
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-4"&gt;&lt;/a&gt;        &lt;span class="n"&gt;r&lt;/span&gt;2&lt;span class="n"&gt;rclitr&lt;/span&gt;-&lt;span class="n"&gt;in&lt;/span&gt;.&lt;span class="n"&gt;rst&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;2&lt;span class="n"&gt;rclitr&lt;/span&gt;-&lt;span class="n"&gt;out&lt;/span&gt;.&lt;span class="n"&gt;rst&lt;/span&gt;  &lt;span class="n"&gt;r&lt;/span&gt;2&lt;span class="n"&gt;rclitr&lt;/span&gt;-&lt;span class="n"&gt;in&lt;/span&gt;.&lt;span class="n"&gt;native&lt;/span&gt;
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-6"&gt;&lt;/a&gt;&lt;span class="nf"&gt;pandoc.version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;shell&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt; &lt;span class="nv"&gt;-p&lt;/span&gt; &lt;span class="nv"&gt;pandoc&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-7"&gt;&lt;/a&gt;        pandoc --version &lt;span class="p"&gt;|&lt;/span&gt; head -2 &amp;gt;&lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-8"&gt;&lt;/a&gt;&lt;span class="nf"&gt;os.version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-9"&gt;&lt;/a&gt;        osinfo &amp;gt;&lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-11"&gt;&lt;/a&gt;&lt;span class="c"&gt;# ReST input&lt;/span&gt;
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-12"&gt;&lt;/a&gt;&lt;span class="nf"&gt;%-out.rst&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %-&lt;span class="n"&gt;in&lt;/span&gt;.&lt;span class="n"&gt;rst&lt;/span&gt;
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-13"&gt;&lt;/a&gt;        pandoc -r rst -w rst -o &lt;span class="nv"&gt;$@&lt;/span&gt; $&amp;lt;
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-14"&gt;&lt;/a&gt;&lt;span class="nf"&gt;%.html &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;rst&lt;/span&gt;
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-15"&gt;&lt;/a&gt;        pandoc -r rst -w html --include-in-header&lt;span class="o"&gt;=&lt;/span&gt;pandoc.style --output&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt; $&amp;lt;
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-16"&gt;&lt;/a&gt;&lt;span class="nf"&gt;%.native &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;rst&lt;/span&gt;
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-17"&gt;&lt;/a&gt;        pandoc -r rst -w native --output&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt; $&amp;lt;
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-19"&gt;&lt;/a&gt;&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-21"&gt;&lt;/a&gt;&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_87bbe20157d3488abd9cfb281e176f52-22"&gt;&lt;/a&gt;        -rm *.pdf *.html *.ms *.ctx *.ltx *.native os.version *-out.rst
&lt;/pre&gt;&lt;p&gt;When I'm doing an issue the result is a &lt;a class="reference external" href="https://github.github.com/gfm/"&gt;GFM&lt;/a&gt; file that I can cut and
paste into the editor used for issues on GitHub, which expects &lt;a class="reference external" href="https://github.github.com/gfm/"&gt;GFM&lt;/a&gt;.
I write it in &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;reST&lt;/a&gt; because that can include files and processing from
&lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;reST&lt;/a&gt; to &lt;a class="reference external" href="https://github.github.com/gfm/"&gt;GFM&lt;/a&gt; does the inclusion, so I don't have to do it by hand.&lt;/p&gt;
&lt;p&gt;Here's an example &lt;a class="reference external" href="https://github.com/jgm/pandoc/issues/6592"&gt;issue&lt;/a&gt;, "Reference Not Found Error #6592" on the
pandoc &lt;a class="reference external" href="https://github.com/jgm/pandoc"&gt;repository&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The problem &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;reST&lt;/a&gt; file &lt;span class="file"&gt;rnf.rst&lt;/span&gt; is&lt;/p&gt;
&lt;pre class="code ReST"&gt;&lt;a name="rest_code_0c84ade239494e4699c54d0171459f90-1"&gt;&lt;/a&gt;​﻿   &lt;span class="gs"&gt;**Option:**&lt;/span&gt; Arachnaurs' webs are made with a neurotoxin_ that can
&lt;a name="rest_code_0c84ade239494e4699c54d0171459f90-2"&gt;&lt;/a&gt;​   quickly paralyze their prey!  When wrapped in a web, make a Vigor
&lt;a name="rest_code_0c84ade239494e4699c54d0171459f90-3"&gt;&lt;/a&gt;​   roll or quickly lose consciousness.
&lt;a name="rest_code_0c84ade239494e4699c54d0171459f90-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_0c84ade239494e4699c54d0171459f90-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;   ..&lt;/span&gt; &lt;span class="nt"&gt;_neurotoxin:&lt;/span&gt; https://www.sciencenews.org/article/spiders-poisonous-webs-neuro-toxins-genes
&lt;/pre&gt;&lt;p&gt;(The contents of the actual file are all indented 3 spaces, but I had
to prefix all the lines in the code block in this source with the
Unicode &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Zero-width_space"&gt;ZERO WIDTH SPACE&lt;/a&gt; so the indentation would show.)&lt;/p&gt;
&lt;p&gt;The issue &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;reST&lt;/a&gt; file &lt;span class="file"&gt;rnf-issue.rst&lt;/span&gt; is&lt;/p&gt;
&lt;pre class="code ReST"&gt;&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-1"&gt;&lt;/a&gt;Reference Not Found Error
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-2"&gt;&lt;/a&gt;@@@@@@@@@@@@@@@@@@@@@@@@@
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-4"&gt;&lt;/a&gt;When I process the following reST file (notice it the whole file is
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-5"&gt;&lt;/a&gt;indented 3 spaces)
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;include&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; rnf.rst
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-8"&gt;&lt;/a&gt;   &lt;span class="nc"&gt;:code:&lt;/span&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-9"&gt;&lt;/a&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-10"&gt;&lt;/a&gt;into &lt;span class="s"&gt;``ms``&lt;/span&gt; or PDF via &lt;span class="s"&gt;``ms``&lt;/span&gt; output with the command
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-11"&gt;&lt;/a&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;code&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-14"&gt;&lt;/a&gt;   pandoc -s -r rst -w ms -o rnf.ms.pdf rnf.rst
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-15"&gt;&lt;/a&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-17"&gt;&lt;/a&gt;I get the errors
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-19"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;code&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-20"&gt;&lt;/a&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-21"&gt;&lt;/a&gt;   [WARNING] Reference not found for 'neurotoxin' at chunk line 1 column 57
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-22"&gt;&lt;/a&gt;   &amp;lt;standard input&amp;gt;:70: macro error: pdfhref has no destination
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-23"&gt;&lt;/a&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-24"&gt;&lt;/a&gt;and the resulting output PDF file and &lt;span class="s"&gt;``.ms``&lt;/span&gt; file indeed do not
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-25"&gt;&lt;/a&gt;have the link.
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-26"&gt;&lt;/a&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-27"&gt;&lt;/a&gt;Here's the &lt;span class="s"&gt;``.ms``&lt;/span&gt; file that was generated:
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-28"&gt;&lt;/a&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-29"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;include&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; rnf.ms
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-30"&gt;&lt;/a&gt;   &lt;span class="nc"&gt;:code:&lt;/span&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-32"&gt;&lt;/a&gt;I'm using the following version of Pandoc:
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-33"&gt;&lt;/a&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-34"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;include&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; pandoc.version
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-35"&gt;&lt;/a&gt;   &lt;span class="nc"&gt;:code:&lt;/span&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-36"&gt;&lt;/a&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-37"&gt;&lt;/a&gt;My OS information is:
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-38"&gt;&lt;/a&gt;
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-39"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;include&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; os.version
&lt;a name="rest_code_f5980808d8304ae983c7bb187ba43f1c-40"&gt;&lt;/a&gt;   &lt;span class="nc"&gt;:code:&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;The generated &lt;a class="reference external" href="https://github.github.com/gfm/"&gt;GFM&lt;/a&gt; is&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-1"&gt;&lt;/a&gt;Reference Not Found Error
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-2"&gt;&lt;/a&gt;=========================
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-3"&gt;&lt;/a&gt;
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-4"&gt;&lt;/a&gt;When I process the following reST file (notice it the whole file is
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-5"&gt;&lt;/a&gt;indented 3 spaces)
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-6"&gt;&lt;/a&gt;
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-7"&gt;&lt;/a&gt;       **Option:** Arachnaurs' webs are made with a neurotoxin_ that can
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-8"&gt;&lt;/a&gt;       quickly paralyze their prey!  When wrapped in a web, make a Vigor
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-9"&gt;&lt;/a&gt;       roll or quickly lose consciousness.
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-10"&gt;&lt;/a&gt;
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-11"&gt;&lt;/a&gt;       .. _neurotoxin: https://www.sciencenews.org/article/spiders-poisonous-webs-neuro-toxins-genes
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-12"&gt;&lt;/a&gt;
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-13"&gt;&lt;/a&gt;into `ms` or PDF via `ms` output with the command
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-14"&gt;&lt;/a&gt;
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-15"&gt;&lt;/a&gt;    pandoc -s -r rst -w ms -o rnf.ms.pdf rnf.rst
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-17"&gt;&lt;/a&gt;I get the errors
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-18"&gt;&lt;/a&gt;
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-19"&gt;&lt;/a&gt;    [WARNING] Reference not found for 'neurotoxin' at chunk line 1 column 57
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-20"&gt;&lt;/a&gt;    &amp;lt;standard input&amp;gt;:70: macro error: pdfhref has no destination
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-21"&gt;&lt;/a&gt;
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-22"&gt;&lt;/a&gt;and the resulting output PDF file and `.ms` file indeed do not have the
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-23"&gt;&lt;/a&gt;link.
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-24"&gt;&lt;/a&gt;
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-25"&gt;&lt;/a&gt;Here's the `.ms` file that was generated:
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-26"&gt;&lt;/a&gt;
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-27"&gt;&lt;/a&gt;    .QS
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-28"&gt;&lt;/a&gt;    .LP
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-29"&gt;&lt;/a&gt;    \f[B]Option:\f[R] Arachnaurs\[aq] webs are made with a \c
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-30"&gt;&lt;/a&gt;    .pdfhref W -D "" -A "\c" \
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-31"&gt;&lt;/a&gt;     -- "neurotoxin"
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-32"&gt;&lt;/a&gt;    \&amp;amp; that can quickly paralyze their prey! When wrapped in a web, make a
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-33"&gt;&lt;/a&gt;    Vigor roll or quickly lose consciousness.
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-34"&gt;&lt;/a&gt;    .QE
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-35"&gt;&lt;/a&gt;
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-36"&gt;&lt;/a&gt;I'm using the following version of Pandoc:
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-37"&gt;&lt;/a&gt;
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-38"&gt;&lt;/a&gt;    pandoc 2.10.1
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-39"&gt;&lt;/a&gt;    Compiled with pandoc-types 1.21, texmath 0.12.0.2, skylighting 0.8.5
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-40"&gt;&lt;/a&gt;
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-41"&gt;&lt;/a&gt;My OS information is:
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-42"&gt;&lt;/a&gt;
&lt;a name="rest_code_8202531ca92249958cde01dce87f11bf-43"&gt;&lt;/a&gt;    Mac OS X, Version 10.15.6, Build 19G73
&lt;/pre&gt;&lt;p&gt;Here is the &lt;span class="file"&gt;GNUmakefile&lt;/span&gt; for it:&lt;/p&gt;
&lt;pre class="code makefile"&gt;&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-1"&gt;&lt;/a&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rnf&lt;/span&gt;-&lt;span class="n"&gt;issue&lt;/span&gt;.&lt;span class="n"&gt;gfm&lt;/span&gt; &lt;span class="n"&gt;rnf&lt;/span&gt;-&lt;span class="n"&gt;issue&lt;/span&gt;.&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;rnf&lt;/span&gt;-&lt;span class="n"&gt;issue&lt;/span&gt;.&lt;span class="n"&gt;gfm&lt;/span&gt;.&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="n"&gt;rnf&lt;/span&gt;.&lt;span class="n"&gt;ms&lt;/span&gt;.&lt;span class="n"&gt;pdf&lt;/span&gt; &lt;span class="n"&gt;rnf&lt;/span&gt;.&lt;span class="n"&gt;ms&lt;/span&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-3"&gt;&lt;/a&gt;&lt;span class="nf"&gt;rnf-issue.html rnf-issue.gfm rnf-issue.gfm.html&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rnf&lt;/span&gt;.&lt;span class="n"&gt;rst&lt;/span&gt; \
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-4"&gt;&lt;/a&gt;        &lt;span class="n"&gt;pandoc&lt;/span&gt;.&lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;.&lt;span class="n"&gt;version&lt;/span&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-6"&gt;&lt;/a&gt;&lt;span class="nf"&gt;.PRECIOUS&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rnf&lt;/span&gt;-&lt;span class="n"&gt;issue&lt;/span&gt;.&lt;span class="n"&gt;gfm&lt;/span&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-7"&gt;&lt;/a&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-8"&gt;&lt;/a&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-9"&gt;&lt;/a&gt;&lt;span class="nf"&gt;pandoc.version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;&lt;span class="nv"&gt;shell&lt;/span&gt; &lt;span class="nv"&gt;type&lt;/span&gt; &lt;span class="nv"&gt;-p&lt;/span&gt; &lt;span class="nv"&gt;pandoc&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-10"&gt;&lt;/a&gt;        pandoc --version &lt;span class="p"&gt;|&lt;/span&gt; head -2 &amp;gt;&lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-11"&gt;&lt;/a&gt;&lt;span class="nf"&gt;os.version&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-12"&gt;&lt;/a&gt;        osinfo &amp;gt;&lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-13"&gt;&lt;/a&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-14"&gt;&lt;/a&gt;&lt;span class="nf"&gt;%.ms &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;rst&lt;/span&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-15"&gt;&lt;/a&gt;        pandoc -r rst -w ms -o &lt;span class="nv"&gt;$@&lt;/span&gt; $&amp;lt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-16"&gt;&lt;/a&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-17"&gt;&lt;/a&gt;&lt;span class="nf"&gt;%.ms.pdf &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;rst&lt;/span&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-18"&gt;&lt;/a&gt;        pandoc -s -r rst -w ms -o &lt;span class="nv"&gt;$@&lt;/span&gt; $&amp;lt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-19"&gt;&lt;/a&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-20"&gt;&lt;/a&gt;&lt;span class="nf"&gt;%.html &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;rst&lt;/span&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-21"&gt;&lt;/a&gt;        pandoc -s -r rst -w html -H fancy.style --output&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt; $&amp;lt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-22"&gt;&lt;/a&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-23"&gt;&lt;/a&gt;&lt;span class="nf"&gt;%-pandoc.html &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;rst&lt;/span&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-24"&gt;&lt;/a&gt;        pandoc -r rst -w html --output&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nv"&gt;$@&lt;/span&gt; $&amp;lt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-25"&gt;&lt;/a&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-26"&gt;&lt;/a&gt;&lt;span class="nf"&gt;%-docutils.html&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;rst&lt;/span&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-27"&gt;&lt;/a&gt;        rst2html.py $&amp;lt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;'1,/^&amp;lt;div class="document"&amp;gt;/d'&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed -e &lt;span class="s1"&gt;'1,2d'&lt;/span&gt; -e &lt;span class="s1"&gt;'\%&amp;lt;/div&amp;gt;%,$$d'&lt;/span&gt; &amp;gt;&lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-28"&gt;&lt;/a&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-29"&gt;&lt;/a&gt;&lt;span class="nf"&gt;%.gfm &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;rst&lt;/span&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-30"&gt;&lt;/a&gt;        pandoc -r rst -w gfm -o &lt;span class="nv"&gt;$@&lt;/span&gt; $&amp;lt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-31"&gt;&lt;/a&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-32"&gt;&lt;/a&gt;&lt;span class="nf"&gt;%.gfm.html &lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; %.&lt;span class="n"&gt;gfm&lt;/span&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-33"&gt;&lt;/a&gt;        pandoc -s -r gfm -w html -H fancy.style -o &lt;span class="nv"&gt;$@&lt;/span&gt; $&amp;lt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-34"&gt;&lt;/a&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-35"&gt;&lt;/a&gt;&lt;span class="nf"&gt;.PHONY&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;clean&lt;/span&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-36"&gt;&lt;/a&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-37"&gt;&lt;/a&gt;&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-38"&gt;&lt;/a&gt;        -rm *.html *.native os.version pandoc.version docutils.version *.gfm
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-39"&gt;&lt;/a&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-40"&gt;&lt;/a&gt;&lt;span class="nf"&gt;.depend&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;rnf&lt;/span&gt;-&lt;span class="n"&gt;issue&lt;/span&gt;.&lt;span class="n"&gt;rst&lt;/span&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-41"&gt;&lt;/a&gt;        rst-depends rnf-issue.rst &amp;gt;&lt;span class="nv"&gt;$@&lt;/span&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-42"&gt;&lt;/a&gt;
&lt;a name="rest_code_cb4beb298499477b86223ace999e2bc6-43"&gt;&lt;/a&gt;&lt;span class="cp"&gt;include .depend&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;This may seem complex, but in practice I use templates to start out
all the files and by building it all with &lt;span class="program"&gt;make&lt;/span&gt; and &lt;a class="reference external" href="https://pandoc.org"&gt;pandoc&lt;/a&gt;
using the &lt;code class="docutils literal"&gt;include&lt;/code&gt; directive of &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;reST&lt;/a&gt; I ensure that the contents of
the message are correctly built from the various included files.&lt;/p&gt;&lt;/div&gt;</description><category>gfm</category><category>github flavored markdown</category><category>issues</category><category>pandoc</category><category>pandoc-discuss</category><category>restructuredtext</category><category>rst</category><guid>https://tkurtbond.github.io/posts/2020/08/05/how-i-author-e-mails-to-pandoc-discuss-and-issues-on-the-pandoc-repo/</guid><pubDate>Wed, 05 Aug 2020 18:40:53 GMT</pubDate></item><item><title>Compiling s7 scheme on macOS</title><link>https://tkurtbond.github.io/posts/2020/08/03/compiling-s7-scheme-on-macos/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;To compile &lt;a class="reference external" href="https://ccrma.stanford.edu/software/snd/snd/s7.html"&gt;s7 scheme&lt;/a&gt; with a standalone &lt;a class="reference external" href="https://tkurtbond.github.io/pages/computer-vocabulary/#REPL"&gt;REPL&lt;/a&gt;, s7's home page says to
add the empty file &lt;span class="file"&gt;mus-config.h&lt;/span&gt; to the source directory, then
(in Linux):&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_806e9b518c114127aa96c2060516b50d-1"&gt;&lt;/a&gt;gcc s7.c -o repl -DWITH_MAIN -I. -O2 -g -ldl -lm -Wl,-export-dynamic
&lt;/pre&gt;&lt;p&gt;It turns out that on macOS, whose &lt;span class="command"&gt;ld&lt;/span&gt; (from clang) doesn't
understand &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-export-dynamic&lt;/span&gt;&lt;/code&gt;, you have to do&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_fd5dddb8f2854bacb00dd8b92fdad43a-1"&gt;&lt;/a&gt;gcc s7.c -o repl -DWITH_MAIN -I. -O2 -g -ldl -lm -Wl,-dynamic
&lt;/pre&gt;&lt;p&gt;Then you need to do&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_49b59ba8053040b9b1faf71cd33ae961-1"&gt;&lt;/a&gt;./repl libc.scm
&lt;/pre&gt;&lt;p&gt;which seems to generate &lt;span class="file"&gt;libc_s7.c&lt;/span&gt; and compile it into
&lt;span class="file"&gt;libc_s.so&lt;/span&gt;.   Then you can run the &lt;a class="reference external" href="https://tkurtbond.github.io/pages/computer-vocabulary/#REPL"&gt;REPL&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a name="rest_code_a83b2eba3d014fcba2562aa3f9a57e4d-1"&gt;&lt;/a&gt;./repl
&lt;/pre&gt;&lt;p&gt;which, from looking at &lt;span class="file"&gt;s7.c&lt;/span&gt;, loads &lt;span class="file"&gt;repl.scm&lt;/span&gt;.
Unfortunately, I don't understand the repl commands, except for
&lt;code class="docutils literal"&gt;pwd&lt;/code&gt; and &lt;code class="docutils literal"&gt;cd&lt;/code&gt;.  Oh, and &lt;code class="docutils literal"&gt;(exit)&lt;/code&gt; exits the repl.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Last edited: 2020-08-03 16:03:57 EDT&lt;/em&gt;&lt;/p&gt;
&lt;!-- Local Variables:
time-stamp-format: "%04y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
time-stamp-line-limit: -20
End: --&gt;&lt;/div&gt;</description><category>ld</category><category>macsOS</category><category>s7</category><category>scheme</category><guid>https://tkurtbond.github.io/posts/2020/08/03/compiling-s7-scheme-on-macos/</guid><pubDate>Mon, 03 Aug 2020 18:17:15 GMT</pubDate></item><item><title>Paragraph Justification in groff and TeX</title><link>https://tkurtbond.github.io/posts/2020/07/31/paragraph-justification-in-groff-and-tex/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;An interesting message thread developed on the groff &lt;a class="reference external" href="https://lists.gnu.org/archive/html/groff/"&gt;mailing list&lt;/a&gt;
about various features of &lt;span class="app"&gt;Groff&lt;/span&gt; and &lt;span class="app"&gt;Heirloom Troff&lt;/span&gt;, with
a mention of &lt;span class="app"&gt;neatroff&lt;/span&gt;.  In particular, Steve Izma's post (&lt;a class="reference external" href="https://lists.gnu.org/archive/html/groff/2020-07/msg00092.html"&gt;P1&lt;/a&gt;)
discussed how he found &lt;span class="app"&gt;TeX&lt;/span&gt;'s paragraph-at-a-time justification
required as much tweaking as groff's simpler paragraph justification.
That lead to Peter Schaffter's post (&lt;a class="reference external" href="https://lists.gnu.org/archive/html/groff/2020-07/msg00101.html"&gt;P2&lt;/a&gt;) linking to an earlier post
(&lt;a class="reference external" href="https://lists.gnu.org/archive/html/groff/2014-03/msg00322.html"&gt;P3&lt;/a&gt;) where he proposed a simpler algorithm to improve &lt;span class="app"&gt;Groff&lt;/span&gt;'s
line-breaking and justification than the full Knuth-Plass
Line-Breaking Algorithm (&lt;a class="reference external" href="http://www.eprg.org/G53DOC/pdfs/knuth-plass-breaking.pdf"&gt;KP1&lt;/a&gt;, &lt;a class="reference external" href="http://litherum.blogspot.com/2015/07/knuth-plass-line-breaking-algorithm.html"&gt;D1&lt;/a&gt;) that &lt;span class="app"&gt;TeX&lt;/span&gt; uses. While
writing this post I ran across another paper, “Global multiple
objective line breaking” by Alex Holkner (&lt;a class="reference external" href="https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.585.8487"&gt;GMOLB1&lt;/a&gt;, &lt;a class="reference external" href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.585.8487&amp;amp;rep=rep1&amp;amp;type=pdf"&gt;GMOLB2&lt;/a&gt;) that explores
another line breaking algorithm and references some of the other
papers on the subject.&lt;/p&gt;</description><category>groff</category><category>heirloom troff</category><category>knuth-plass line-breaking algorithm</category><category>neatroff</category><category>tex</category><guid>https://tkurtbond.github.io/posts/2020/07/31/paragraph-justification-in-groff-and-tex/</guid><pubDate>Sat, 01 Aug 2020 02:42:15 GMT</pubDate></item><item><title>Need to specify a file in a GNUmakefile that starts with ~?</title><link>https://tkurtbond.github.io/posts/2020/07/08/need-to-specify-a-file-in-a-gnumakefile-that-starts-with/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;Like on macOS Catalina where you can't have directories outside your
home directory any more, so need to refer to the directory you
manually installed some software to?  You can't just include the raw
&lt;span class="file"&gt;~/where/ever&lt;/span&gt; in that PATH in the GNUmakefile because the
&lt;code&gt;~&lt;/code&gt; prefix won't be translated into the user's home directory.
That substitution is done by the shell when a command is executed, but
the shells expect that tilde to have been expanded in the command that
sets the path.  It doesn't do “Tilde Expansion” on each part of the
PATH when it goes looking things up in the path.  So, you have to get
that expansion done manually if you set it in a GNUmakefile.&lt;/p&gt;
&lt;p&gt;Anyway, This ugly hack works:&lt;/p&gt;
&lt;pre class="code makefile"&gt;&lt;a name="rest_code_66f1cc04bd77410890daf2c0ed9c09b6-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;shell &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="nv"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'~/sw/versions/heirloom-doctools/git/ucb'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_66f1cc04bd77410890daf2c0ed9c09b6-2"&gt;&lt;/a&gt;                 &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$$&lt;/span&gt;dir&lt;span class="o"&gt;)&lt;/span&gt;:&lt;span class="k"&gt;$(&lt;/span&gt;PATH&lt;span class="k"&gt;)&lt;/span&gt;
&lt;a name="rest_code_66f1cc04bd77410890daf2c0ed9c09b6-3"&gt;&lt;/a&gt;&lt;span class="k"&gt;export &lt;/span&gt;&lt;span class="nv"&gt;TROFFFONTS&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;shell &lt;span class="nb"&gt;eval&lt;/span&gt; &lt;span class="nv"&gt;dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'~/Library/Fonts'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;a name="rest_code_66f1cc04bd77410890daf2c0ed9c09b6-4"&gt;&lt;/a&gt;        &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="nv"&gt;$$&lt;/span&gt;dir&lt;span class="o"&gt;)&lt;/span&gt;:/Library/Fonts
&lt;a name="rest_code_66f1cc04bd77410890daf2c0ed9c09b6-5"&gt;&lt;/a&gt;
&lt;a name="rest_code_66f1cc04bd77410890daf2c0ed9c09b6-6"&gt;&lt;/a&gt;&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
&lt;a name="rest_code_66f1cc04bd77410890daf2c0ed9c09b6-7"&gt;&lt;/a&gt;        @echo &lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;a name="rest_code_66f1cc04bd77410890daf2c0ed9c09b6-8"&gt;&lt;/a&gt;        @echo
&lt;a name="rest_code_66f1cc04bd77410890daf2c0ed9c09b6-9"&gt;&lt;/a&gt;        @echo &lt;span class="nv"&gt;TROFFFONTS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="si"&gt;${&lt;/span&gt;&lt;span class="nv"&gt;TROFFFONTS&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;
&lt;a name="rest_code_66f1cc04bd77410890daf2c0ed9c09b6-10"&gt;&lt;/a&gt;        @echo
&lt;a name="rest_code_66f1cc04bd77410890daf2c0ed9c09b6-11"&gt;&lt;/a&gt;        @echo -n &lt;span class="s1"&gt;'"type troff" returns '&lt;/span&gt;
&lt;a name="rest_code_66f1cc04bd77410890daf2c0ed9c09b6-12"&gt;&lt;/a&gt;        @type troff
&lt;/pre&gt;&lt;p&gt;Put this in a file somewhere and invoke &lt;span class="app"&gt;GNU make&lt;/span&gt; on it and it prints:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a name="rest_code_bd4c21d5af174d2084cc7f3a17fc250f-1"&gt;&lt;/a&gt;PATH=/Users/tkb/sw/versions/heirloom-doctools/git/ucb:/Users/tkb/local/rndbin:/Users/tkb/.cargo/bin:/Users/tkb/.nimble/bin:/usr/local/opt/libxslt/bin:/usr/local/opt/libxml2/bin:/Users/tkb/sw/versions/mew/git/bin:/Users/tkb/sw/versions/groff-git/bin:/Users/tkb/sw/versions/chibi-scheme/git/bin:/usr/local/opt/tcl-tk/bin:/usr/local/opt/expat/bin:/Users/tkb/.opam/default/bin:/usr/local/opt/texinfo/bin:/usr/local/opt/gnu-sed/libexec/gnubin:/usr/local/opt/findutils/libexec/gnubin:/usr/local/opt/curl/bin:/usr/local/opt/coreutils/libexec/gnubin:/Users/tkb/.local/bin:/Users/tkb/context-osx-64/tex/texmf-osx-64/bin:/Applications/Emacs.app/Contents/MacOS/bin:/Users/tkb/local/unix/bin:/Users/tkb/local/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/TeX/texbin:/opt/X11/bin:/Users/tkb/local/unix/rndbin:/Applications/Racket v7.5/bin:/Users/tkb/go/bin:/Applications/Emacs.app/Contents/MacOS/bin-x86_64-10_14:/Applications/Emacs.app/Contents/MacOS/libexec-x86_64-10_14
&lt;a name="rest_code_bd4c21d5af174d2084cc7f3a17fc250f-2"&gt;&lt;/a&gt;
&lt;a name="rest_code_bd4c21d5af174d2084cc7f3a17fc250f-3"&gt;&lt;/a&gt;TROFFFONTS=/Users/tkb/Library/Fonts:/Library/Fonts
&lt;a name="rest_code_bd4c21d5af174d2084cc7f3a17fc250f-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_bd4c21d5af174d2084cc7f3a17fc250f-5"&gt;&lt;/a&gt;"type troff" returns troff is /Users/tkb/sw/versions/heirloom-doctools/git/ucb/troff
&lt;/pre&gt;&lt;p&gt;(Yes, my path may be a little excessive.)&lt;/p&gt;
&lt;p&gt;Unfortunately I haven't figured out how to do this with the &lt;span class="app"&gt;BSD make&lt;/span&gt;s.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Last edited: 2020-08-03 16:03:19 EDT&lt;/em&gt;&lt;/p&gt;
&lt;!-- Local Variables:
time-stamp-format: "%04y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
time-stamp-line-limit: -20
End: --&gt;&lt;/div&gt;</description><category>gnu make</category><category>macos catalina</category><guid>https://tkurtbond.github.io/posts/2020/07/08/need-to-specify-a-file-in-a-gnumakefile-that-starts-with/</guid><pubDate>Wed, 08 Jul 2020 10:09:38 GMT</pubDate></item><item><title>Text Subtleties</title><link>https://tkurtbond.github.io/posts/2020/07/07/text-subtleties/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;I just noticed that when &lt;a class="reference external" href="https://www.gnu.org/software/wget/"&gt;wget&lt;/a&gt; tells you the filename of file it just
saved, if your &lt;code class="docutils literal"&gt;LANG=C&lt;/code&gt; then it surrounds it with apostrophes ('), but
if your &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;LANG=en_US.UTF-8&lt;/span&gt;&lt;/code&gt; then it surrounds it with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Unicode"&gt;Unicode&lt;/a&gt; LEFT SINGLE
QUOTATION MARK (‘)and RIGHT SINGLE QUOTATION MARK (’).  I appreciate
little subtleties like that.&lt;/p&gt;
&lt;p&gt;I use Unicode characters in most of the writing I do.  For &lt;a class="reference external" href="https://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt;,
which I rarely use these days, I use &lt;a class="reference external" href="https://en.wikipedia.org/wiki/XeTeX"&gt;XeTeX&lt;/a&gt;, which understands UTF-8
natively.  &lt;a class="reference external" href="https://en.wikipedia.org/wiki/ConTeXt"&gt;ConTeXt&lt;/a&gt;, which I do use regularly, also understands UTF-8
natively.  For &lt;a class="reference external" href="https://www.gnu.org/software/groff/"&gt;groff&lt;/a&gt; I use the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-k&lt;/span&gt;&lt;/code&gt; switch, which preprocesses the
text with &lt;span class="command"&gt;preconv&lt;/span&gt; (which is part of &lt;a class="reference external" href="https://www.gnu.org/software/groff/"&gt;groff&lt;/a&gt;), converting the
UTF-8 characters into &lt;a class="reference external" href="https://www.gnu.org/software/groff/"&gt;groff&lt;/a&gt; character escapes, since &lt;a class="reference external" href="https://www.gnu.org/software/groff/"&gt;groff&lt;/a&gt; &lt;em&gt;doesn't&lt;/em&gt;
understand UTF-8 natively.  Of course, if it is &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;ReStructuredText&lt;/a&gt; that
I'm working with then &lt;a class="reference external" href="https://pandoc.org/"&gt;pandoc&lt;/a&gt; can be configured to use any one of
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/ConTeXt"&gt;ConTeXt&lt;/a&gt;, and &lt;a class="reference external" href="https://www.gnu.org/software/groff/"&gt;groff&lt;/a&gt; for creating PDF output, and since
&lt;span class="command"&gt;rst2html.py&lt;/span&gt; just produces &lt;a class="reference external" href="https://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt; that includes any
character you put in your source you can just use &lt;span class="command"&gt;xelatex&lt;/span&gt;
as part of your commands to turn it into PDF.  And sometimes, when I'm
feeling whimsical, I use &lt;span class="app"&gt;Heirloom Troff&lt;/span&gt;, from the &lt;a class="reference external" href="https://n-t-roff.github.io/heirloom/doctools.html"&gt;Heirloom
Documentation Tools&lt;/a&gt;, which understands UTF-8 natively.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Last edited: 2020-08-03 16:02:52 EDT&lt;/em&gt;&lt;/p&gt;
&lt;!-- Local Variables:
time-stamp-format: "%04y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "\\*Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
time-stamp-line-limit: -20
End: --&gt;&lt;/div&gt;</description><category>context</category><category>groff</category><category>heirloom troff</category><category>text</category><category>unicode</category><category>utf-8</category><category>xelatex</category><guid>https://tkurtbond.github.io/posts/2020/07/07/text-subtleties/</guid><pubDate>Tue, 07 Jul 2020 23:05:13 GMT</pubDate></item></channel></rss>