<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lacking Natural Simplicity (Posts about programming)</title><link>https://tkurtbond.github.io/</link><description></description><atom:link href="https://tkurtbond.github.io/categories/programming.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2021 &lt;a href="mailto:tkurtbond@gmail.com"&gt;T. Kurt Bond&lt;/a&gt; </copyright><lastBuildDate>Thu, 10 Jun 2021 18:16:42 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Multics Emacs programmed by secretaries</title><link>https://tkurtbond.github.io/posts/2012/06/15/multics-emacs-programmed-by-secretaries/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;RMS &lt;a class="reference external" href="http://www.gnu.org/gnu/rms-lisp.html"&gt;relates&lt;/a&gt; how programming Multics Emacs was so convenient that secretaries started to learn to use it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;… The language that you build your extensions on shouldn't be
thought of as a programming language in afterthought; it should be
designed as a programming language. In fact, we discovered that
the best programming language for that purpose was Lisp.&lt;/p&gt;
&lt;p&gt;It was Bernie Greenberg, who discovered that it was (5). He wrote
a version of Emacs in Multics MacLisp, and he wrote his commands
in MacLisp in a straightforward fashion. The editor itself was
written entirely in Lisp. Multics Emacs proved to be a great
success — programming new editing commands was so convenient that
even the secretaries in his office started learning how to use
it. They used a manual someone had written which showed how to
extend Emacs, but didn't say it was a programming. So the
secretaries, who believed they couldn't do programming, weren't
scared off. They read the manual, discovered they could do useful
things and they learned to program.&lt;/p&gt;
&lt;p&gt;So Bernie saw that an application — a program that does something
useful for you — which has Lisp inside it and which you could
extend by rewriting the Lisp programs, is actually a very good way
for people to learn programming. It gives them a chance to write
small programs that are useful for them, which in most arenas you
can't possibly do. They can get encouragement for their own
practical use — at the stage where it's the hardest — where they
don't believe they can program, until they get to the point where
they are programmers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- Wasn't troff also used by secretaries? --&gt;&lt;/div&gt;</description><category>emacs</category><category>lisp</category><category>programming</category><guid>https://tkurtbond.github.io/posts/2012/06/15/multics-emacs-programmed-by-secretaries/</guid><pubDate>Fri, 15 Jun 2012 14:10:09 GMT</pubDate></item><item><title>sqlite implements table constraints</title><link>https://tkurtbond.github.io/posts/2009/12/17/sqlite-implements-table-constraints/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;It's nice to see SQLite supports table constraints:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ sqlite3 test.db
SQLite version 3.6.19
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite&amp;gt; create table t1
   ...&amp;gt; (k int,
   ...&amp;gt;  s int,
   ...&amp;gt;  e int,
   ...&amp;gt;  d int,
   ...&amp;gt;  constraint se_or_duration check
   ...&amp;gt;    ((s is not null and e is not null) or d is not null));
sqlite&amp;gt; insert into t1 values (1, 8, 4, null);
sqlite&amp;gt; insert into t1 values (2, null, null, 8);
sqlite&amp;gt; insert into t1 values (3, null, null, null);
SQL error: constraint failed
sqlite&amp;gt;&lt;/pre&gt;&lt;/div&gt;</description><category>programming</category><category>sql</category><category>sqlite</category><guid>https://tkurtbond.github.io/posts/2009/12/17/sqlite-implements-table-constraints/</guid><pubDate>Thu, 17 Dec 2009 22:02:04 GMT</pubDate></item><item><title>I want a Dis-Integrated-Development-Environment</title><link>https://tkurtbond.github.io/posts/2008/10/22/i-want-a-dis-integrated-development-environment/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;C.P. said: “I want a &lt;em&gt;dis&lt;/em&gt;-integrated development envronment, not an
integrated development environment.”  I agree.&lt;/p&gt;
&lt;p&gt;Microsoft's IDEs have always been about you adapting your working
style to their rigid idea of how that work should be done using their
monolithic tools.  Eclipse promises to let you add whatever
functionality you want to Eclipse, as long as you use their API (and
tools) and are willing to write a million lines of code.&lt;/p&gt;
&lt;p&gt;That's not what I want.&lt;/p&gt;
&lt;p&gt;I want to use the tools I find suitable to the job, and stitch them
together easily.  I want tools that work together, not get pasted
together.&lt;/p&gt;
&lt;!--  --&gt;
&lt;blockquote&gt;
&lt;p&gt;Lucid's compiler suite with their IPC&lt;/p&gt;
&lt;p&gt;I like emacs, but I have no problem with acme.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/div&gt;</description><category>programming</category><category>software</category><guid>https://tkurtbond.github.io/posts/2008/10/22/i-want-a-dis-integrated-development-environment/</guid><pubDate>Wed, 22 Oct 2008 19:20:54 GMT</pubDate></item><item><title>Factor 0.90</title><link>https://tkurtbond.github.io/posts/2007/08/25/factor-0.90/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;It's been a while since I've looked at &lt;a class="reference external" href="http://factorcode.org/"&gt;Factor&lt;/a&gt;, and things are looking good.&lt;/p&gt;
&lt;p&gt;When using emacs with Factor under Microsoft Windows, remember to make
sure before you start Factor that &lt;code class="docutils literal"&gt;emacsclient&lt;/code&gt; is in your path, and
then do:&lt;/p&gt;
&lt;pre class="literal-block"&gt;"editors.emacs" require&lt;/pre&gt;
&lt;p&gt;to tell Factor your going to use emacs.  After that, make sure that
you've started the server in emacs with &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;server-start&lt;/span&gt;&lt;/code&gt; and try
something like:&lt;/p&gt;
&lt;pre class="literal-block"&gt;\ . edit&lt;/pre&gt;
&lt;p&gt;to see the definition of the &lt;code class="docutils literal"&gt;.&lt;/code&gt; word.&lt;/p&gt;
&lt;div class="admonition note"&gt;
&lt;p class="admonition-title"&gt;Note&lt;/p&gt;
&lt;p&gt;This is a &lt;a class="reference external" href="https://tkurtbond.github.io/posts/2008/07/07/new-blog-first-post/"&gt;timewarp&lt;/a&gt; post.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>factor</category><category>programming</category><category>timewarp</category><guid>https://tkurtbond.github.io/posts/2007/08/25/factor-0.90/</guid><pubDate>Sat, 25 Aug 2007 15:08:33 GMT</pubDate></item></channel></rss>