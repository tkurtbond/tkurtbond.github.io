<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lacking Natural Simplicity (Posts about poise)</title><link>https://tkurtbond.github.io/</link><description></description><atom:link href="https://tkurtbond.github.io/categories/poise.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2021 &lt;a href="mailto:tkurtbond@gmail.com"&gt;T. Kurt Bond&lt;/a&gt; </copyright><lastBuildDate>Fri, 23 Jul 2021 05:45:46 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>POISE DMS-PLus</title><link>https://tkurtbond.github.io/posts/2014/11/23/poise-dms-plus/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;I found a &lt;a class="reference external" href="http://www2.esp-tulsa.com/products.htm#dmsplus"&gt;web page&lt;/a&gt; that lists all the POISE products, now known as the
Jenzabar PX Administrative Information Systems, including the POISE
DMS-Plus.&lt;/p&gt;</description><category>dms-plus</category><category>jenzabar px</category><category>poise</category><guid>https://tkurtbond.github.io/posts/2014/11/23/poise-dms-plus/</guid><pubDate>Sun, 23 Nov 2014 06:48:58 GMT</pubDate></item><item><title>FILETAP</title><link>https://tkurtbond.github.io/posts/2004/01/09/2004-01-09/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;I had to do some maintenance on the &lt;span class="app"&gt;FILETAP&lt;/span&gt; program today.
I last worked on it in 1988, as far as I can tell.  The last time it
was compiled was in 1990 (going by the file dates) but I doubt that
anybody had changed the code since 1988 when I last worked on it.
It's written to use the POISE SPL API, the Support Procedure Library.&lt;/p&gt;
&lt;p&gt;As it turned out, the only reason it needed recompiled now is that one
of MPL's POISE users finally found a use for field-and-record level
security and the enhanced security features only work if the program
is linked against the shared library (&lt;span class="file"&gt;.EXE&lt;/span&gt;) and not the statically
linked library (&lt;span class="file"&gt;.OLB&lt;/span&gt;).  And the program required no code changes to
get it to work.&lt;/p&gt;
&lt;p&gt;So where's the maintenance? It turns out that there are actually two
version of this program, &lt;span class="app"&gt;TFILETAP&lt;/span&gt; and &lt;span class="app"&gt;FILETAP&lt;/span&gt;,
and it's not obvious &lt;em&gt;why&lt;/em&gt; there are two versions.  &lt;span class="app"&gt;FILETAP&lt;/span&gt;
is the version that appears to be used the most, but
&lt;span class="app"&gt;TFILETAP&lt;/span&gt; is slightly different (mostly because it opens the
key file for exclusive access).  Unfortunately, as I've lamented
several times in the past, we weren't using any sort of revision
control back then, much less configuration control, so there is no
history of changes, much less an explicit reason for the changes.  Oh
well.  I guess I'll have to look at it some more later.&lt;/p&gt;&lt;/div&gt;</description><category>dms-plus</category><category>filetap</category><category>old blog</category><category>poise</category><category>spl</category><category>vms</category><guid>https://tkurtbond.github.io/posts/2004/01/09/2004-01-09/</guid><pubDate>Fri, 09 Jan 2004 05:00:00 GMT</pubDate></item><item><title>VMS Code from the Past</title><link>https://tkurtbond.github.io/posts/2003/05/08/2003-05-08-vms-code-from-the-past/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;Listening to: Hawkwind, &lt;a class="reference external" href="http://www.freedb.org/freedb_search_fmt.php?cat=rock&amp;amp;id=d50ba50e"&gt;Chronicle of the Black Sword&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;I've been reading a lot of VMS BASIC &lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2003/05/08/2003-05-08-vms-code-from-the-past/#id3" id="id1"&gt;1&lt;/a&gt; source code from the early
1990s &lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2003/05/08/2003-05-08-vms-code-from-the-past/#id4" id="id2"&gt;2&lt;/a&gt; recently, and the one lesson it has taught me is that
refactoring source code is vital for maintainability.  Much of this
source code originated in one program that was copied and edited
whenever a new program was needed, so each new program generally ended
up with a lot of rag-tag odds-and-ends code from the original program
that was not actually needed for the functionality of the new program.
Unfortunately, when one is trying to change some existing
functionality one has to look at each and every program &lt;em&gt;and figure
out if that functionality is actually implemented and used in that
program&lt;/em&gt;, and to do this you have to mentally trace the execution of
the code! The moral? When you copy code, delete everything you don't
actually use! Refactor, refactor, refactor!&lt;/p&gt;
&lt;p&gt;And why didn't we use &lt;code class="docutils literal"&gt;%INCLUDE&lt;/code&gt; more? There are hundress of lines of
external function declarations that are used time and again in several
programs; we should have put them in a couple of include files.&lt;/p&gt;
&lt;p&gt;I really wish VMS Basic allowed &lt;a class="reference external" href="http://groups.google.com/groups?q=tkb+group:comp.os.vms&amp;amp;hl=en&amp;amp;lr=&amp;amp;ie=UTF-8&amp;amp;oe=UTF-8&amp;amp;selm=a3db6b24.0305081211.6f867ad0%40posting.google.com&amp;amp;rnum=1"&gt;redimensioning array formal
parameters&lt;/a&gt;, but I understand why it's not allowed.  (Perhaps
there should have been a specific descriptor for arrays that can be
redimensioned?)&lt;/p&gt;
&lt;p&gt;I was shocked to rediscover that there was no way of reliably building
the system from the source code.  MMS was too expensive for us at the
time and if &lt;a class="reference external" href="http://www.madgoat.com/mmk.html"&gt;MMK&lt;/a&gt; existed we
didn't know about it.  We used a bunch of ad-hoc DCL command
procecudures to compile whatever program we were working on (most of
them were all in one source file, and linked against one library of
utility routines) and these were never collected.  So, you couldn't
easily tell if the current set of executables was actually built from
up-to-date source.  Since I've been doing the odd bit of maintenance on
this system every six months or so I finally broke down and created
&lt;code class="docutils literal"&gt;DESCRIP.MMS&lt;/code&gt; files for use with MMK, and I'm much easier in my mind
now.&lt;/p&gt;
&lt;p&gt;There were a number of things in this system that I think were well
done, though, so it hasn't been all pain looking at it again.&lt;/p&gt;
&lt;dl class="footnote brackets"&gt;
&lt;dt class="label" id="id3"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2003/05/08/2003-05-08-vms-code-from-the-past/#id1"&gt;1&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;I'm working with it on an Alpha so I can't call it VAX BASIC
anymore.&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class="label" id="id4"&gt;&lt;span class="brackets"&gt;&lt;a class="fn-backref" href="https://tkurtbond.github.io/posts/2003/05/08/2003-05-08-vms-code-from-the-past/#id2"&gt;2&lt;/a&gt;&lt;/span&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;p&gt;The original version of this system ran on PDP-11 running RSTS/E.
I've been involved in two major conversions of systems running on
PDP-11 RSTS/E to VAX/VMS, both using the POISE DMS-Plus on both RSTS/E and
VMS, with extensive homegrown applications written in VMS BASIC and
using the POISE SPL API.&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;section id="id5"&gt;
&lt;h2&gt;2014-11-03&lt;/h2&gt;
&lt;p&gt;Here's the text of my post to comp.os.vms:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The BASIC for OpenVMS Reference Manual says, in the fifth item of the
Remarks section:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The executable DIM statement cannot be used to dimension virtual arrays,
arrays received as formal parameters, or arrays declared in COMMON, MAP,
or nonexecutable DIM statements.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://h71000.www7.hp.com/doc/73final/cobol/bas_ref_013.htm#noisn"&gt;http://h71000.www7.hp.com/doc/73final/cobol/bas_ref_013.htm#noisn&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The "no formal parameters" rule is inconvienent.  It means that you
can't pass an array to a function, redimension it, fill it with values,
and then use LBOUND and UBOUND in the caller to find out its new size.&lt;/p&gt;
&lt;p&gt;Presumably it is illegal because there is no way at compile time to
know if the function will be called with a dynamic array created with
the executable DIM statement or a static array created with a
non-executable DIM statement.&lt;/p&gt;
&lt;p&gt;However, the programmer &lt;em&gt;can&lt;/em&gt; know, so it ought to be safe to
redimension the array directly when the programmer knows it was
created by an executable DIM statement.&lt;/p&gt;
&lt;p&gt;Using Alpha BASIC V1.4-000 under OpenVMS V7.2 and looking at the
listing of some code with some executable dimension statements
compiled with /LIST/MACHINE revealed the existance of DBASIC$RT_DIM
and after a little experimentation lead to a program that used
DBASIC$RT_DIM directly to redimension dynamically dimensioned arrays
in functions, included below.&lt;/p&gt;
&lt;p&gt;DBASIC$RT_DIM is not documented for users (probably by design) and
could &lt;em&gt;theoretically&lt;/em&gt; lead to flying monkeys and access violations,
and is probably bad style.  However, are there any &lt;em&gt;practical&lt;/em&gt;
reasons why this wouldn't work safely?  Are there any
conditions under which this hack would fail to work?&lt;/p&gt;
&lt;p&gt;Here is an example program:&lt;/p&gt;
&lt;pre class="code text"&gt;&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-1" name="rest_code_dac8c84c49e04f8788198dbc05448350-1"&gt;&lt;/a&gt;program redim
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-2" name="rest_code_dac8c84c49e04f8788198dbc05448350-2"&gt;&lt;/a&gt;    option type = explicit, constant type = integer, &amp;amp;
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-3" name="rest_code_dac8c84c49e04f8788198dbc05448350-3"&gt;&lt;/a&gt;        size = integer long, size = real double
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-4" name="rest_code_dac8c84c49e04f8788198dbc05448350-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-5" name="rest_code_dac8c84c49e04f8788198dbc05448350-5"&gt;&lt;/a&gt;    external sub redim_in_sub (string dim())
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-6" name="rest_code_dac8c84c49e04f8788198dbc05448350-6"&gt;&lt;/a&gt;    external long function my_redim (string dim(), long)
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-7" name="rest_code_dac8c84c49e04f8788198dbc05448350-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-8" name="rest_code_dac8c84c49e04f8788198dbc05448350-8"&gt;&lt;/a&gt;    declare long i, r
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-9" name="rest_code_dac8c84c49e04f8788198dbc05448350-9"&gt;&lt;/a&gt;
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-10" name="rest_code_dac8c84c49e04f8788198dbc05448350-10"&gt;&lt;/a&gt;    i = 10
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-11" name="rest_code_dac8c84c49e04f8788198dbc05448350-11"&gt;&lt;/a&gt;    dim string vs(i) ! has to be a variable to make it an executable dim.
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-12" name="rest_code_dac8c84c49e04f8788198dbc05448350-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-13" name="rest_code_dac8c84c49e04f8788198dbc05448350-13"&gt;&lt;/a&gt;    r = my_redim (vs(), 30)
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-14" name="rest_code_dac8c84c49e04f8788198dbc05448350-14"&gt;&lt;/a&gt;    print "ubound(vs):"; ubound(vs)
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-15" name="rest_code_dac8c84c49e04f8788198dbc05448350-15"&gt;&lt;/a&gt;    for i = lbound(vs) to ubound(vs) \ vs(i) = "vs 30-" + num1$(i) \ next i
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-16" name="rest_code_dac8c84c49e04f8788198dbc05448350-16"&gt;&lt;/a&gt;    gosub print_vs
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-17" name="rest_code_dac8c84c49e04f8788198dbc05448350-17"&gt;&lt;/a&gt;
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-18" name="rest_code_dac8c84c49e04f8788198dbc05448350-18"&gt;&lt;/a&gt;    call redim_in_sub (vs())
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-19" name="rest_code_dac8c84c49e04f8788198dbc05448350-19"&gt;&lt;/a&gt;    print "ubound(vs):"; ubound(vs)
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-20" name="rest_code_dac8c84c49e04f8788198dbc05448350-20"&gt;&lt;/a&gt;    gosub print_Vs
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-21" name="rest_code_dac8c84c49e04f8788198dbc05448350-21"&gt;&lt;/a&gt;
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-22" name="rest_code_dac8c84c49e04f8788198dbc05448350-22"&gt;&lt;/a&gt;    exit program
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-23" name="rest_code_dac8c84c49e04f8788198dbc05448350-23"&gt;&lt;/a&gt;
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-24" name="rest_code_dac8c84c49e04f8788198dbc05448350-24"&gt;&lt;/a&gt;print_vs:
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-25" name="rest_code_dac8c84c49e04f8788198dbc05448350-25"&gt;&lt;/a&gt;    for i = lbound(vs) to ubound(vs) \ print i; ": "; vs(i) \ next i
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-26" name="rest_code_dac8c84c49e04f8788198dbc05448350-26"&gt;&lt;/a&gt;    return ! from print_vs
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-27" name="rest_code_dac8c84c49e04f8788198dbc05448350-27"&gt;&lt;/a&gt;
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-28" name="rest_code_dac8c84c49e04f8788198dbc05448350-28"&gt;&lt;/a&gt;end program ! redim
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-29" name="rest_code_dac8c84c49e04f8788198dbc05448350-29"&gt;&lt;/a&gt;
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-30" name="rest_code_dac8c84c49e04f8788198dbc05448350-30"&gt;&lt;/a&gt;function long my_redim (long s by value, long n)
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-31" name="rest_code_dac8c84c49e04f8788198dbc05448350-31"&gt;&lt;/a&gt;    option type = explicit, constant type = integer, &amp;amp;
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-32" name="rest_code_dac8c84c49e04f8788198dbc05448350-32"&gt;&lt;/a&gt;        size = integer long, size = real double
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-33" name="rest_code_dac8c84c49e04f8788198dbc05448350-33"&gt;&lt;/a&gt;    declare long r
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-34" name="rest_code_dac8c84c49e04f8788198dbc05448350-34"&gt;&lt;/a&gt;    external long function dbasic$rt_dim (long by value, long by value)
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-35" name="rest_code_dac8c84c49e04f8788198dbc05448350-35"&gt;&lt;/a&gt;    r = dbasic$rt_dim (s, n)
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-36" name="rest_code_dac8c84c49e04f8788198dbc05448350-36"&gt;&lt;/a&gt;end function r ! my_redim
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-37" name="rest_code_dac8c84c49e04f8788198dbc05448350-37"&gt;&lt;/a&gt;
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-38" name="rest_code_dac8c84c49e04f8788198dbc05448350-38"&gt;&lt;/a&gt;sub redim_in_sub (string s())
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-39" name="rest_code_dac8c84c49e04f8788198dbc05448350-39"&gt;&lt;/a&gt;    option type = explicit, constant type = integer, &amp;amp;
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-40" name="rest_code_dac8c84c49e04f8788198dbc05448350-40"&gt;&lt;/a&gt;        size = integer long, size = real double
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-41" name="rest_code_dac8c84c49e04f8788198dbc05448350-41"&gt;&lt;/a&gt;    external sub set_strings (string dim(), string)
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-42" name="rest_code_dac8c84c49e04f8788198dbc05448350-42"&gt;&lt;/a&gt;    declare long i
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-43" name="rest_code_dac8c84c49e04f8788198dbc05448350-43"&gt;&lt;/a&gt;    call my_redim (s(), 40)
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-44" name="rest_code_dac8c84c49e04f8788198dbc05448350-44"&gt;&lt;/a&gt;    for i = 0 to 40 \ s(i) = "redim in sub " + num1$(i) \ next i
&lt;a id="rest_code_dac8c84c49e04f8788198dbc05448350-45" name="rest_code_dac8c84c49e04f8788198dbc05448350-45"&gt;&lt;/a&gt;end sub ! redim_in_sub
&lt;/pre&gt;&lt;p&gt;(Interestingly, a slightly different approach was necessary using VAX
BASIC V3.5 under VMS V5.5-2: using BY VALUE in function
definition statements is not allowed by this version of VAX BASIC,
and BAS$RT_DIM had to be used instead of DBASIC$RT_DIM, of course.)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/section&gt;&lt;/div&gt;</description><category>basic</category><category>dms-plus</category><category>mmk</category><category>old blog</category><category>poise</category><category>vms</category><guid>https://tkurtbond.github.io/posts/2003/05/08/2003-05-08-vms-code-from-the-past/</guid><pubDate>Thu, 08 May 2003 05:00:00 GMT</pubDate></item></channel></rss>