<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="https://tkurtbond.github.io/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>Lacking Natural Simplicity (Posts about common lisp)</title>
  <id>https://tkurtbond.github.io/categories/common-lisp.atom</id>
  <updated>2022-02-25T15:17:58Z</updated>
  <author>
    <name>T. Kurt Bond</name>
  </author>
  <link rel="self" type="application/atom+xml" href="https://tkurtbond.github.io/categories/common-lisp.atom"/>
  <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/categories/common-lisp/"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>Gitub repo for Arrow Macros for Emacs</title>
    <id>https://tkurtbond.github.io/posts/2021/09/07/gitub-repo-for-arrow-macros-for-emacs/</id>
    <updated>2021-09-07T12:07:48-04:00</updated>
    <published>2021-09-07T12:07:48-04:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2021/09/07/gitub-repo-for-arrow-macros-for-emacs/"/>
    <summary type="html">&lt;p&gt;I've added a &lt;a class="reference external" href="https://github.com/tkurtbond/arrow-macros-for-emacs"&gt;Github repository&lt;/a&gt; for my port of &lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;CL-Arrows&lt;/a&gt; to
Emacs Lisp (&lt;a class="reference external" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/"&gt;original post&lt;/a&gt;), at the insistence of CPB.&lt;/p&gt;</summary>
    <category term="arrow-macros" label="arrow macros"/>
    <category term="clojure" label="clojure"/>
    <category term="common-lisp" label="common lisp"/>
    <category term="emacs" label="emacs"/>
    <category term="emacs-lisp" label="emacs lisp"/>
  </entry>
  <entry>
    <title>Arrow Macros in Emacs Lisp</title>
    <id>https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/</id>
    <updated>2020-07-03T14:11:16-04:00</updated>
    <published>2020-07-03T14:11:16-04:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/"/>
    <summary type="html">&lt;p&gt;Are you familiar with arrow macros?  (They have nothing to do with
&lt;a class="reference external" href="https://en.wikibooks.org/wiki/Haskell/Understanding_arrows"&gt;arrows in Haskell&lt;/a&gt;.) They started out in &lt;a class="reference external" href="https://clojure.org/"&gt;Clojure&lt;/a&gt;, I think, and have
been ported to &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_Lisp"&gt;Common Lisp&lt;/a&gt; and probably other Lisps, though I didn't
find one for &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt;.  I think the &lt;a class="reference external" href="https://github.com/Harleqin/arrows"&gt;arrows&lt;/a&gt; package is the most up
to date in &lt;a class="reference external" href="https://www.quicklisp.org/"&gt;Quicklisp&lt;/a&gt; for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_Lisp"&gt;Common Lisp&lt;/a&gt;, but I found the &lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;
package first so that's the one I converted to &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; today.&lt;/p&gt;
&lt;p&gt;There were two slightly tricky parts to the port&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;I needed to use lexical binding for the source file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;'s test suite used fractions, but &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; doesn't
have them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyway, I think they're very useful.  If you have a value and
you want it to be processed by several functions in a chain you
can use an arrow macro instead of using lots of nested function
calls. For instance,&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_5d0186180fb54fd1868ce99557d078f4-1" name="rest_code_5d0186180fb54fd1868ce99557d078f4-1" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_5d0186180fb54fd1868ce99557d078f4-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.+"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.-"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-\\."&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;is annoying and hard to read on one line.  If you split it into multiple lines&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-1" name="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-1" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_5ac58e5c28014b2ab1979d8227ef75b2-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-2" name="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-2" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_5ac58e5c28014b2ab1979d8227ef75b2-2"&gt;&lt;/a&gt; &lt;span class="s"&gt;"-+$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;a id="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-3" name="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-3" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_5ac58e5c28014b2ab1979d8227ef75b2-3"&gt;&lt;/a&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-4" name="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-4" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_5ac58e5c28014b2ab1979d8227ef75b2-4"&gt;&lt;/a&gt;  &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;a id="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-5" name="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-5" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_5ac58e5c28014b2ab1979d8227ef75b2-5"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-6" name="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-6" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_5ac58e5c28014b2ab1979d8227ef75b2-6"&gt;&lt;/a&gt;   &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;a id="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-7" name="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-7" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_5ac58e5c28014b2ab1979d8227ef75b2-7"&gt;&lt;/a&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-8" name="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-8" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_5ac58e5c28014b2ab1979d8227ef75b2-8"&gt;&lt;/a&gt;    &lt;span class="s"&gt;"\\.+"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;
&lt;a id="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-9" name="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-9" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_5ac58e5c28014b2ab1979d8227ef75b2-9"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-10" name="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-10" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_5ac58e5c28014b2ab1979d8227ef75b2-10"&gt;&lt;/a&gt;     &lt;span class="s"&gt;"\\.-"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;
&lt;a id="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-11" name="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-11" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_5ac58e5c28014b2ab1979d8227ef75b2-11"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-12" name="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-12" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_5ac58e5c28014b2ab1979d8227ef75b2-12"&gt;&lt;/a&gt;      &lt;span class="s"&gt;"-\\."&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;
&lt;a id="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-13" name="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-13" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_5ac58e5c28014b2ab1979d8227ef75b2-13"&gt;&lt;/a&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-14" name="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-14" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_5ac58e5c28014b2ab1979d8227ef75b2-14"&gt;&lt;/a&gt;       &lt;span class="s"&gt;"-+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;
&lt;a id="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-15" name="rest_code_5ac58e5c28014b2ab1979d8227ef75b2-15" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_5ac58e5c28014b2ab1979d8227ef75b2-15"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;that's also pretty horrible.  To read it you have to skip to the end,
figure out that function call, then skip back to the next function
call, and so forth, until you get back to the last function call,
reading it from inside out.  It looks much better if you use the
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; arrow macro, which substitutes the value you are passing along
as the last argument to the functions you are calling:&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_1579a53899dd4730aa69494ac454a8cc-1" name="rest_code_1579a53899dd4730aa69494ac454a8cc-1" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_1579a53899dd4730aa69494ac454a8cc-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;
&lt;a id="rest_code_1579a53899dd4730aa69494ac454a8cc-2" name="rest_code_1579a53899dd4730aa69494ac454a8cc-2" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_1579a53899dd4730aa69494ac454a8cc-2"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_1579a53899dd4730aa69494ac454a8cc-3" name="rest_code_1579a53899dd4730aa69494ac454a8cc-3" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_1579a53899dd4730aa69494ac454a8cc-3"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_1579a53899dd4730aa69494ac454a8cc-4" name="rest_code_1579a53899dd4730aa69494ac454a8cc-4" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_1579a53899dd4730aa69494ac454a8cc-4"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-\\."&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_1579a53899dd4730aa69494ac454a8cc-5" name="rest_code_1579a53899dd4730aa69494ac454a8cc-5" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_1579a53899dd4730aa69494ac454a8cc-5"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.-"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_1579a53899dd4730aa69494ac454a8cc-6" name="rest_code_1579a53899dd4730aa69494ac454a8cc-6" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_1579a53899dd4730aa69494ac454a8cc-6"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.+"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_1579a53899dd4730aa69494ac454a8cc-7" name="rest_code_1579a53899dd4730aa69494ac454a8cc-7" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_1579a53899dd4730aa69494ac454a8cc-7"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_1579a53899dd4730aa69494ac454a8cc-8" name="rest_code_1579a53899dd4730aa69494ac454a8cc-8" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_1579a53899dd4730aa69494ac454a8cc-8"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I also think it is more understandable than the highly nested calls,
since you can follow along in from start to finish, rather than from
inside out: you've got the value, you pass it to the first function,
then to the second, and so forth.&lt;/p&gt;
&lt;p&gt;There are also macros to insert the value at the front of the argument
list (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt;&lt;/code&gt;) and to insert the value where a &lt;code class="docutils literal"&gt;&amp;lt;&amp;gt;&lt;/code&gt; symbol is found
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I wrote some &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; code with the last expression above today, and
I think it makes a good example of why they are useful.&lt;/p&gt;
&lt;p&gt;Here's the use case that inspired me to port them to &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs
Lisp&lt;/a&gt;.  When I save things from the internet I often want to
create a directory to save them in based on the filename or
some text on a web page or something, but usually there are
spaces or special characters in that text, so I have to
sanitize the text to make it a safe and simple filename.  So I
need to replace all special characters with dashes.  But I
don't want dashes repeated multiple times, just a single dash,
and I don't want dashes followed or preceded by periods, only
the period.&lt;/p&gt;
&lt;p&gt;Here' s some code to do that:&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-1" name="rest_code_00107ff931bf496d8409cf6bd7d67224-1" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;tkb-sanitize-for-filename&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-2" name="rest_code_00107ff931bf496d8409cf6bd7d67224-2" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-2"&gt;&lt;/a&gt;  &lt;span class="s"&gt;"Clean up characters in STRING that aren't good for&lt;/span&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-3" name="rest_code_00107ff931bf496d8409cf6bd7d67224-3" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-3"&gt;&lt;/a&gt;&lt;span class="s"&gt;filenames."&lt;/span&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-4" name="rest_code_00107ff931bf496d8409cf6bd7d67224-4" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-4"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-5" name="rest_code_00107ff931bf496d8409cf6bd7d67224-5" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-5"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-6" name="rest_code_00107ff931bf496d8409cf6bd7d67224-6" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-6"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-7" name="rest_code_00107ff931bf496d8409cf6bd7d67224-7" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-7"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-\\."&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-8" name="rest_code_00107ff931bf496d8409cf6bd7d67224-8" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-8"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.-"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-9" name="rest_code_00107ff931bf496d8409cf6bd7d67224-9" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-9"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.+"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-10" name="rest_code_00107ff931bf496d8409cf6bd7d67224-10" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-10"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-11" name="rest_code_00107ff931bf496d8409cf6bd7d67224-11" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-11"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-12" name="rest_code_00107ff931bf496d8409cf6bd7d67224-12" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-13" name="rest_code_00107ff931bf496d8409cf6bd7d67224-13" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;tkb-sanitize-kill-for-filename&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-14" name="rest_code_00107ff931bf496d8409cf6bd7d67224-14" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-14"&gt;&lt;/a&gt;  &lt;span class="s"&gt;"Clean up characters that aren't good for filenames in the&lt;/span&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-15" name="rest_code_00107ff931bf496d8409cf6bd7d67224-15" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-15"&gt;&lt;/a&gt;&lt;span class="s"&gt;top of the kill&lt;/span&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-16" name="rest_code_00107ff931bf496d8409cf6bd7d67224-16" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-16"&gt;&lt;/a&gt;&lt;span class="s"&gt;ring and put the result on the top of the kill ring."&lt;/span&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-17" name="rest_code_00107ff931bf496d8409cf6bd7d67224-17" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-17"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;;; gets the kill or the system clipboard if it is new.&lt;/span&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-18" name="rest_code_00107ff931bf496d8409cf6bd7d67224-18" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-18"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interactive&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-kill&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-19" name="rest_code_00107ff931bf496d8409cf6bd7d67224-19" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-19"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;new-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;tkb-sanitize-for-filename&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-20" name="rest_code_00107ff931bf496d8409cf6bd7d67224-20" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-20"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt; &lt;span class="s"&gt;"Old string: %s\nNew String: %s"&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;new-string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-21" name="rest_code_00107ff931bf496d8409cf6bd7d67224-21" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-21"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kill-new&lt;/span&gt; &lt;span class="nv"&gt;new-string&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-22" name="rest_code_00107ff931bf496d8409cf6bd7d67224-22" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-22"&gt;&lt;/a&gt;
&lt;a id="rest_code_00107ff931bf496d8409cf6bd7d67224-23" name="rest_code_00107ff931bf496d8409cf6bd7d67224-23" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_00107ff931bf496d8409cf6bd7d67224-23"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c k S"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'tkb-sanitize-kill-for-filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Note that the function &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;tkb-sanitize-kill-for-filename&lt;/span&gt;&lt;/code&gt; that I use
interactively gets uses &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(current-kill&lt;/span&gt; 0 t)&lt;/code&gt; because it either
returns the top of the kill ring, or if the system clipboard is newer
it puts that on top of the kill ring and returns it.  (The docstring
of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;current-kill&lt;/span&gt;&lt;/code&gt; makes that a little difficult to figure out.)&lt;/p&gt;
&lt;p&gt;So if I have the name of a product as
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;"***Flashy####Product%%%%Name!!!!"&lt;/span&gt;&lt;/code&gt; I copy that to the clipboard
with &lt;span class="key"&gt;⌘-C&lt;/span&gt;, switch to emacs, do &lt;span class="key"&gt;C-c k S&lt;/span&gt;, switch back to
whatever program is saving the file, and use the generated,
sanitized name &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Flashy-Product-Name&lt;/span&gt;&lt;/code&gt; with &lt;span class="key"&gt;⌘-V&lt;/span&gt;.  Nifty!&lt;/p&gt;
&lt;p&gt;(And if you've ever wondered what the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Unicode"&gt;Unicode&lt;/a&gt; character for the Mac
keyboard &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Command_key"&gt;Command key&lt;/a&gt; (⌘) is, it is the PLACE OF INTEREST SIGN, and
you can enter it in &lt;span class="app"&gt;Emacs&lt;/span&gt; by &lt;span class="key"&gt;C-x 8 RETURN PLACE OF
INTEREST SIGN⏎&lt;/span&gt;.  The symbol they use for for the key labeled alt and
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Option_key"&gt;option&lt;/a&gt; (⌥) is the Unicode OPTION KEY, and the symbol they use for
the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Shift_key"&gt;Shift Key&lt;/a&gt; (⇧) is UPWARDS WHITE ARROW.  I'm surprised they
don't have a special symbol for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Control_key"&gt;Control&lt;/a&gt;, but it looks like they just
use the plain ASCII ^, known in Unicode as CIRCUMFLEX ACCENT.)&lt;/p&gt;
&lt;p&gt;Anyway, &lt;a class="reference external" href="https://tkurtbond.github.io/arrows-for-emacs.zip"&gt;here&lt;/a&gt;'s a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Info-ZIP"&gt;ZIP&lt;/a&gt; file with the Emacs Lisp source for the arrow
macros so you can use them if you've been convinced of their
usefulness by this post.  It also has some minimal documentation in
the &lt;span class="file"&gt;README.md&lt;/span&gt; that came from the &lt;span class="file"&gt;README.md&lt;/span&gt; from
&lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;, which seems to repeat the information from the
docstrings for the macros.&lt;/p&gt;
&lt;section id="section-1"&gt;
&lt;h2&gt;2021-09-07&lt;/h2&gt;
&lt;p&gt;Now in a &lt;a class="reference external" href="https://github.com/tkurtbond/arrow-macros-for-emacs"&gt;Gitub repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Last edited: 2021-09-07 13:25:09 EDT&lt;/em&gt;&lt;/p&gt;
&lt;!-- Local Variables:
time-stamp-format: "%Y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "\\*Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
time-stamp-line-limit: -20
End: --&gt;
&lt;/section&gt;</summary>
    <category term="arrow-macros" label="arrow macros"/>
    <category term="clojure" label="clojure"/>
    <category term="common-lisp" label="common lisp"/>
    <category term="emacs" label="emacs"/>
    <category term="emacs-lisp" label="emacs lisp"/>
    <category term="unicode" label="unicode"/>
  </entry>
  <entry>
    <title>Distributing ASDF systems with ABCL, sorta</title>
    <id>https://tkurtbond.github.io/posts/2020/06/29/distributing-asdf-systems-with-abcl-sorta/</id>
    <updated>2020-06-29T16:30:21-04:00</updated>
    <published>2020-06-29T16:30:21-04:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2020/06/29/distributing-asdf-systems-with-abcl-sorta/"/>
    <summary type="html">&lt;p&gt;The Reddit thread &lt;a class="reference external" href="https://www.reddit.com/r/lisp/comments/2u7m4k/how_do_you_compile_a_runnable_deployable_jar_with/"&gt;How do you compile a runnable, deployable JAR with
ABCL?&lt;/a&gt; doesn't offer a solution, unfortunately. &lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2020/06/29/distributing-asdf-systems-with-abcl-sorta/#footnote-1" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt; But it leads to
an &lt;a class="reference external" href="https://abcl.org/"&gt;Armed Bear Common Lisp (ABCL)&lt;/a&gt; TRAC ticket (&lt;a class="reference external" href="https://abcl.org/trac/ticket/383"&gt;T1&lt;/a&gt;) which leads to
another (&lt;a class="reference external" href="https://abcl.org/trac/ticket/442"&gt;T2&lt;/a&gt;) which leads some documentation on package ABCL for
distribution (&lt;a class="reference external" href="https://github.com/armedbear/abcl/blob/master/doc/packaging-abcl.org"&gt;D1&lt;/a&gt;) which talks about how the &lt;a class="reference external" href="https://github.com/armedbear/abcl/blob/master/doc/packaging-abcl.org#abcl-aio"&gt;abcl-aio.jar&lt;/a&gt; target is
used to package &lt;span class="file"&gt;abcl.jar&lt;/span&gt; and &lt;span class="file"&gt;abcl-contrib.jar&lt;/span&gt; for
distribution, then describes a way it might be done in the section
&lt;a class="reference external" href="https://github.com/armedbear/abcl/blob/master/doc/packaging-abcl.org#current-hack"&gt;Current Hack&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Basically, it says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Current hack&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Ideally, we would like allow the AIO mechanism to include
additional ASDF systems in the single jar artifact.&lt;/p&gt;
&lt;p&gt;Currently one can hack this together by:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;&lt;p&gt;Manually extracting the abcl-aio.jar artifact to a file-system.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Placing the necessary ASDF systems in the resulting “contrib”
directory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Recreating the single archive from the file-system
contents.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;aside class="footnote brackets" id="footnote-1" role="note"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://tkurtbond.github.io/posts/2020/06/29/distributing-asdf-systems-with-abcl-sorta/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;Though it does talking about distributing an ABCL application
as a servlet and WAR file.&lt;/p&gt;
&lt;/aside&gt;</summary>
    <category term="abcl" label="abcl"/>
    <category term="asdf" label="asdf"/>
    <category term="common-lisp" label="common lisp"/>
  </entry>
  <entry>
    <title>Binding a symbol defined with DEFCONSTANT with LET is not portable in Common Lisp</title>
    <id>https://tkurtbond.github.io/posts/2020/04/24/binding-a-symbol-defined-with-defconstant-with-let-is-not-portable-in-common-lisp/</id>
    <updated>2020-04-24T23:46:39-04:00</updated>
    <published>2020-04-24T23:46:39-04:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2020/04/24/binding-a-symbol-defined-with-defconstant-with-let-is-not-portable-in-common-lisp/"/>
    <summary type="html">&lt;p&gt;&lt;a class="reference external" href="http://www.sbcl.org/"&gt;SBCL&lt;/a&gt; and &lt;a class="reference external" href="https://ccl.clozure.com/"&gt;CCL&lt;/a&gt; and &lt;a class="reference external" href="https://clisp.sourceforge.io/"&gt;CLISP&lt;/a&gt; think binding a symbol defined with &lt;code class="docutils literal"&gt;defconstant&lt;/code&gt;
is an error, so if you do&lt;/p&gt;
&lt;pre class="code common-lisp"&gt;&lt;a id="rest_code_b55ea677845e45d79cee317b90950eba-1" name="rest_code_b55ea677845e45d79cee317b90950eba-1" href="https://tkurtbond.github.io/posts/2020/04/24/binding-a-symbol-defined-with-defconstant-with-let-is-not-portable-in-common-lisp/#rest_code_b55ea677845e45d79cee317b90950eba-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defconstant&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt; &lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b55ea677845e45d79cee317b90950eba-2" name="rest_code_b55ea677845e45d79cee317b90950eba-2" href="https://tkurtbond.github.io/posts/2020/04/24/binding-a-symbol-defined-with-defconstant-with-let-is-not-portable-in-common-lisp/#rest_code_b55ea677845e45d79cee317b90950eba-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt; &lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;you get an error.  But in &lt;a class="reference external" href="https://abcl.org/"&gt;ABCL&lt;/a&gt; and &lt;a class="reference external" href="https://common-lisp.net/project/ecl/"&gt;ECL&lt;/a&gt; you don’t.&lt;/p&gt;
&lt;p&gt;If you try&lt;/p&gt;
&lt;pre class="code common-lisp"&gt;&lt;a id="rest_code_3b7e229341e54fc0a6fbb53ad67ec00e-1" name="rest_code_3b7e229341e54fc0a6fbb53ad67ec00e-1" href="https://tkurtbond.github.io/posts/2020/04/24/binding-a-symbol-defined-with-defconstant-with-let-is-not-portable-in-common-lisp/#rest_code_3b7e229341e54fc0a6fbb53ad67ec00e-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt; &lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;in SBCL and CCL you get an error when the function is compiled.
In SBCL the function is defined, but always gives an error when run.
In CCL the function does not get defined.&lt;/p&gt;</summary>
    <category term="abcl" label="abcl"/>
    <category term="ccl" label="ccl"/>
    <category term="clisp" label="clisp"/>
    <category term="common-lisp" label="common lisp"/>
    <category term="ecl" label="ecl"/>
    <category term="sbcl" label="sbcl"/>
  </entry>
  <entry>
    <title>Playing with Hashlife</title>
    <id>https://tkurtbond.github.io/posts/2019/11/08/playing-with-hashlife/</id>
    <updated>2019-11-08T09:43:19-05:00</updated>
    <published>2019-11-08T09:43:19-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2019/11/08/playing-with-hashlife/"/>
    <summary type="html">&lt;p&gt;C.P. found &lt;a class="reference external" href="https://github.com/stylewarning"&gt;Robert Smith&lt;/a&gt;'s &lt;a class="reference external" href="https://github.com/stylewarning/lisp-random/tree/master/hashlife"&gt;implementation&lt;/a&gt; of Bill Gosper's HASHLIFE
algorithm and wanted my help with running it.  I cloned the &lt;a class="reference external" href="https://github.com/stylewarning/lisp-random"&gt;repo&lt;/a&gt; it
was in and ran &lt;code class="docutils literal"&gt;sbcl&lt;/code&gt; in the &lt;code class="docutils literal"&gt;hashlife&lt;/code&gt; directory.  Then I
entered:&lt;/p&gt;
&lt;pre class="code lisp"&gt;&lt;a id="rest_code_09bd633bd83b48479551338e2ff20ca7-1" name="rest_code_09bd633bd83b48479551338e2ff20ca7-1" href="https://tkurtbond.github.io/posts/2019/11/08/playing-with-hashlife/#rest_code_09bd633bd83b48479551338e2ff20ca7-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;asdf:operate&lt;/span&gt; &lt;span class="ss"&gt;'asdf:load-op&lt;/span&gt; &lt;span class="ss"&gt;'charmlife&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;That resulted in a &lt;code class="docutils literal"&gt;Component CHARMLIFE not found&lt;/code&gt; error in sbcl.  I
thought that was odd — it was right there in the current directory.  I
looked at &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;asdf:*central-registry*&lt;/span&gt;&lt;/code&gt;, and the only thing in it was
the quicklisp directory.  The ASDF &lt;a class="reference external" href="https://common-lisp.net/~mmommer/asdf-howto.shtml#sec11"&gt;howto&lt;/a&gt; showed an example of setting
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;asdf:*central-registry*&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code lisp"&gt;&lt;a id="rest_code_88e2a382387c4f038774a6ca4c61162e-1" name="rest_code_88e2a382387c4f038774a6ca4c61162e-1" href="https://tkurtbond.github.io/posts/2019/11/08/playing-with-hashlife/#rest_code_88e2a382387c4f038774a6ca4c61162e-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;setf&lt;/span&gt; &lt;span class="nv"&gt;asdf:*central-registry*&lt;/span&gt;
&lt;a id="rest_code_88e2a382387c4f038774a6ca4c61162e-2" name="rest_code_88e2a382387c4f038774a6ca4c61162e-2" href="https://tkurtbond.github.io/posts/2019/11/08/playing-with-hashlife/#rest_code_88e2a382387c4f038774a6ca4c61162e-2"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;;; Default directories, usually just the ``current directory''&lt;/span&gt;
&lt;a id="rest_code_88e2a382387c4f038774a6ca4c61162e-3" name="rest_code_88e2a382387c4f038774a6ca4c61162e-3" href="https://tkurtbond.github.io/posts/2019/11/08/playing-with-hashlife/#rest_code_88e2a382387c4f038774a6ca4c61162e-3"&gt;&lt;/a&gt;  &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;*default-pathname-defaults*&lt;/span&gt;
&lt;a id="rest_code_88e2a382387c4f038774a6ca4c61162e-4" name="rest_code_88e2a382387c4f038774a6ca4c61162e-4" href="https://tkurtbond.github.io/posts/2019/11/08/playing-with-hashlife/#rest_code_88e2a382387c4f038774a6ca4c61162e-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_88e2a382387c4f038774a6ca4c61162e-5" name="rest_code_88e2a382387c4f038774a6ca4c61162e-5" href="https://tkurtbond.github.io/posts/2019/11/08/playing-with-hashlife/#rest_code_88e2a382387c4f038774a6ca4c61162e-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;;; Additional places where ASDF can find&lt;/span&gt;
&lt;a id="rest_code_88e2a382387c4f038774a6ca4c61162e-6" name="rest_code_88e2a382387c4f038774a6ca4c61162e-6" href="https://tkurtbond.github.io/posts/2019/11/08/playing-with-hashlife/#rest_code_88e2a382387c4f038774a6ca4c61162e-6"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;;; system definition files&lt;/span&gt;
&lt;a id="rest_code_88e2a382387c4f038774a6ca4c61162e-7" name="rest_code_88e2a382387c4f038774a6ca4c61162e-7" href="https://tkurtbond.github.io/posts/2019/11/08/playing-with-hashlife/#rest_code_88e2a382387c4f038774a6ca4c61162e-7"&gt;&lt;/a&gt;    &lt;span class="l l-Other"&gt;#p"/home/foo/lisp/systems/"&lt;/span&gt;
&lt;a id="rest_code_88e2a382387c4f038774a6ca4c61162e-8" name="rest_code_88e2a382387c4f038774a6ca4c61162e-8" href="https://tkurtbond.github.io/posts/2019/11/08/playing-with-hashlife/#rest_code_88e2a382387c4f038774a6ca4c61162e-8"&gt;&lt;/a&gt;    &lt;span class="l l-Other"&gt;#p"/usr/share/common-lisp/systems/"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Noticing that it had the symbol &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;*default-pathname-defaults*&lt;/span&gt;&lt;/code&gt; in the
new value, I guessed that it being missing from mine caused ASDF to
not find the system in the current directory.  So I added it and tried
again.  This time ASDF couldn't find &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cl-charms&lt;/span&gt;&lt;/code&gt;.  I guessed and
used &lt;a class="reference external" href="https://www.quicklisp.org/"&gt;Quicklisp&lt;/a&gt; to load it.  That worked.  Then I looked at
&lt;code class="docutils literal"&gt;charmlife.lisp&lt;/code&gt; and looked at the &lt;code class="docutils literal"&gt;main&lt;/code&gt; function and figured out
how to run it and how to interact with the program when it was running.&lt;/p&gt;
&lt;p&gt;Here's what I had to do:&lt;/p&gt;
&lt;pre class="code lisp"&gt;&lt;a id="rest_code_9e8ffa8cc20a46f4b8d36bc389ba2120-1" name="rest_code_9e8ffa8cc20a46f4b8d36bc389ba2120-1" href="https://tkurtbond.github.io/posts/2019/11/08/playing-with-hashlife/#rest_code_9e8ffa8cc20a46f4b8d36bc389ba2120-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;setf&lt;/span&gt; &lt;span class="nv"&gt;asdf:*central-registry*&lt;/span&gt;
&lt;a id="rest_code_9e8ffa8cc20a46f4b8d36bc389ba2120-2" name="rest_code_9e8ffa8cc20a46f4b8d36bc389ba2120-2" href="https://tkurtbond.github.io/posts/2019/11/08/playing-with-hashlife/#rest_code_9e8ffa8cc20a46f4b8d36bc389ba2120-2"&gt;&lt;/a&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cons&lt;/span&gt; &lt;span class="ss"&gt;'*default-pathname-defaults*&lt;/span&gt;
&lt;a id="rest_code_9e8ffa8cc20a46f4b8d36bc389ba2120-3" name="rest_code_9e8ffa8cc20a46f4b8d36bc389ba2120-3" href="https://tkurtbond.github.io/posts/2019/11/08/playing-with-hashlife/#rest_code_9e8ffa8cc20a46f4b8d36bc389ba2120-3"&gt;&lt;/a&gt;            &lt;span class="nv"&gt;asdf:*central-registry*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_9e8ffa8cc20a46f4b8d36bc389ba2120-4" name="rest_code_9e8ffa8cc20a46f4b8d36bc389ba2120-4" href="https://tkurtbond.github.io/posts/2019/11/08/playing-with-hashlife/#rest_code_9e8ffa8cc20a46f4b8d36bc389ba2120-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ql:quickload&lt;/span&gt; &lt;span class="s"&gt;"cl-charms"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_9e8ffa8cc20a46f4b8d36bc389ba2120-5" name="rest_code_9e8ffa8cc20a46f4b8d36bc389ba2120-5" href="https://tkurtbond.github.io/posts/2019/11/08/playing-with-hashlife/#rest_code_9e8ffa8cc20a46f4b8d36bc389ba2120-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;asdf:operate&lt;/span&gt; &lt;span class="ss"&gt;'asdf:load-op&lt;/span&gt; &lt;span class="ss"&gt;'charmlife&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_9e8ffa8cc20a46f4b8d36bc389ba2120-6" name="rest_code_9e8ffa8cc20a46f4b8d36bc389ba2120-6" href="https://tkurtbond.github.io/posts/2019/11/08/playing-with-hashlife/#rest_code_9e8ffa8cc20a46f4b8d36bc389ba2120-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;charmlife:main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;</summary>
    <category term="common-lisp" label="common lisp"/>
    <category term="hashlife" label="hashlife"/>
    <category term="life" label="life"/>
  </entry>
  <entry>
    <title>Fun with Lisp: notf and cdrf</title>
    <id>https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/</id>
    <updated>2008-08-15T18:59:36-05:00</updated>
    <published>2008-08-15T18:59:36-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/"/>
    <summary type="html">&lt;p&gt;I actually use these in Emacs Lisp, for which you'd need a
&lt;code&gt;(require 'cl))&lt;/code&gt;, but the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;define-modify-macro&lt;/span&gt;&lt;/code&gt; is
originally from Common Lisp.&lt;/p&gt;
&lt;p&gt;These are trivial, but useful.&lt;/p&gt;
&lt;pre class="code common-lisp"&gt;&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-1" name="rest_code_683a9c4934004921ad47011d4f442e74-1" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;define-modify-macro&lt;/span&gt; &lt;span class="nv"&gt;notf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&amp;amp;rest&lt;/span&gt; &lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;not&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-2" name="rest_code_683a9c4934004921ad47011d4f442e74-2" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-3" name="rest_code_683a9c4934004921ad47011d4f442e74-3" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notf&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-4" name="rest_code_683a9c4934004921ad47011d4f442e74-4" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-4"&gt;&lt;/a&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;;;=&amp;gt; t&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-5" name="rest_code_683a9c4934004921ad47011d4f442e74-5" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notf&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-6" name="rest_code_683a9c4934004921ad47011d4f442e74-6" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-6"&gt;&lt;/a&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;;;=&amp;gt; nil&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-7" name="rest_code_683a9c4934004921ad47011d4f442e74-7" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-7"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-8" name="rest_code_683a9c4934004921ad47011d4f442e74-8" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cdr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cadadr&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-9" name="rest_code_683a9c4934004921ad47011d4f442e74-9" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-9"&gt;&lt;/a&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;;;=&amp;gt; (a (b (c nil)))&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-10" name="rest_code_683a9c4934004921ad47011d4f442e74-10" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cdr&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cadadr&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-11" name="rest_code_683a9c4934004921ad47011d4f442e74-11" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-11"&gt;&lt;/a&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;;;=&amp;gt; (a (b (c t)))&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-12" name="rest_code_683a9c4934004921ad47011d4f442e74-12" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;[1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt; &lt;span class="nv"&gt;5]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-13" name="rest_code_683a9c4934004921ad47011d4f442e74-13" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;aref&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-14" name="rest_code_683a9c4934004921ad47011d4f442e74-14" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-14"&gt;&lt;/a&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;;;=&amp;gt; [1 2 3 nil 5]&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-15" name="rest_code_683a9c4934004921ad47011d4f442e74-15" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-15"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;notf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;aref&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-16" name="rest_code_683a9c4934004921ad47011d4f442e74-16" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-16"&gt;&lt;/a&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;;;=&amp;gt; [1 2 3 t 5]&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-17" name="rest_code_683a9c4934004921ad47011d4f442e74-17" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-17"&gt;&lt;/a&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-18" name="rest_code_683a9c4934004921ad47011d4f442e74-18" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-18"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;define-modify-macro&lt;/span&gt; &lt;span class="nv"&gt;cdrf&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;&amp;amp;rest&lt;/span&gt; &lt;span class="nv"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nb"&gt;cdr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-19" name="rest_code_683a9c4934004921ad47011d4f442e74-19" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-19"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:a&lt;/span&gt; &lt;span class="ss"&gt;:b&lt;/span&gt; &lt;span class="ss"&gt;:c&lt;/span&gt; &lt;span class="ss"&gt;:d&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-20" name="rest_code_683a9c4934004921ad47011d4f442e74-20" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-20"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;frob&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;keyword&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="nv"&gt;nothing-now&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-21" name="rest_code_683a9c4934004921ad47011d4f442e74-21" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-21"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;member&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="ss"&gt;:a&lt;/span&gt; &lt;span class="ss"&gt;:b&lt;/span&gt; &lt;span class="ss"&gt;:c&lt;/span&gt; &lt;span class="ss"&gt;:d&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-22" name="rest_code_683a9c4934004921ad47011d4f442e74-22" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-22"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;frob&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;car&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-23" name="rest_code_683a9c4934004921ad47011d4f442e74-23" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-23"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;cdrf&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_683a9c4934004921ad47011d4f442e74-24" name="rest_code_683a9c4934004921ad47011d4f442e74-24" href="https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/#rest_code_683a9c4934004921ad47011d4f442e74-24"&gt;&lt;/a&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="c1"&gt;;;=&amp;gt; (1 2 3)&lt;/span&gt;
&lt;/pre&gt;</summary>
    <category term="common-lisp" label="common lisp"/>
    <category term="emacs-lisp" label="emacs lisp"/>
  </entry>
  <entry>
    <title>Slime Oddity</title>
    <id>https://tkurtbond.github.io/posts/2005/10/05/2005-10-05/</id>
    <updated>2005-10-05T00:00:00-05:00</updated>
    <published>2005-10-05T00:00:00-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2005/10/05/2005-10-05/"/>
    <summary type="html">&lt;p&gt;For some reason, clisp version 2.35 installed from the FreeBSD ports
doesn't have &lt;code class="docutils literal"&gt;:PC386&lt;/code&gt; in &lt;code class="docutils literal"&gt;*FEATURES*&lt;/code&gt;; without this, Slime from CVS
stops with a continuable error:&lt;/p&gt;
&lt;pre class="literal-block"&gt;** - Continuable Error
INTERN("*DOCUMENTATION*"): #&amp;lt;PACKAGE SYSTEM&amp;gt; is locked
If you continue (by typing 'continue'): Ignore the lock and proceed
The following restarts are also available:
SKIP           :R1      skip (COMPILE-FILES-IF-NEEDED-SERIALLY #)
STOP           :R2      stop loading file
/extra/sw/src/slime/swank-loader.lisp
ABORT          :R3      ABORT&lt;/pre&gt;
&lt;p&gt;And after that, even if you continue slime is never able to connect to
swank.&lt;/p&gt;</summary>
    <category term="common-lisp" label="common lisp"/>
    <category term="old-blog" label="old blog"/>
    <category term="slime" label="slime"/>
  </entry>
  <entry>
    <title>Common Lisp, SBCL, and CLIM; Recent Reading</title>
    <id>https://tkurtbond.github.io/posts/2003/11/22/2003-11-22-sbcl-author-of-the-century/</id>
    <updated>2003-11-22T00:00:00-05:00</updated>
    <published>2003-11-22T00:00:00-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2003/11/22/2003-11-22-sbcl-author-of-the-century/"/>
    <summary type="html">&lt;section id="common-lisp-sbcl-and-clim"&gt;
&lt;h2&gt;Common Lisp, SBCL, and CLIM&lt;/h2&gt;
&lt;p&gt;I finally took the time to figure out how to install &lt;a class="reference external" href="http://clim.mikemac.com/"&gt;McCLIM&lt;/a&gt; under FreeBSD.  The first thing to do was
install &lt;a class="reference external" href="http://sbcl.sourceforge.net/"&gt;SBCL&lt;/a&gt; from scratch; the
FreeBSD port doesn't install all the SBCL extras, but they're needed
to build McCLIM, especially ASDF.  The other things I needed to do were
described in the &lt;code class="docutils literal"&gt;INSTALL.SBCL&lt;/code&gt; from the McCLIM release.  I had to
install &lt;a class="reference external" href="http://www.cliki.net/CLX"&gt;CLX&lt;/a&gt; for SBCL using ASDF.  This
proceeded with only one hitch: I needed a &lt;cite&gt;~/.sbcl/trusted-uids.lisp&lt;/cite&gt;
for some reason.  Once that was done it was easy to build McCLIM for
SBCL and run the demo applications.  Now that I know how to build
McCLIM I'll be able to investigate CLIM.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="recent-reading"&gt;
&lt;h2&gt;Recent Reading&lt;/h2&gt;
&lt;ul class="simple" id="author-of-the-century"&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;J.R.R. Tolkien: Author of the Century&lt;/cite&gt;, by Tom Shippey.  I think I
must have read &lt;cite&gt;The Hobbit&lt;/cite&gt; and &lt;cite&gt;The Lord of the Rings&lt;/cite&gt; for the first
time in 1977, when I was still quite young, and like many was
captivated immediately.  I read it again many times and enjoyed it just
as much each time.  It's one of those books that I return to and re-
read every few years.  I would not, however, have thought of Tolkien as
the “Author of the Century”, but in this book and &lt;cite&gt;The Road to
Middle-Earth&lt;/cite&gt; Shippey makes a very persuasive argument for just that,
pointing out that Tolkien may well have been the person with the
&lt;em&gt;deepest&lt;/em&gt; understanding of the English &lt;em&gt;language&lt;/em&gt; in this century, and
showing how his professional background as a philologist and language
scholar formed his fiction.  In any case, both books made me appreciate
much better the subtlety and depth of Tolkien's fiction and has the
best possible outcome for literary analysis: it made me want to read
the books again, as well as look further into the books edited by
J.R.R Tolkien's son, Christopher Tolkien.  I've read the &lt;cite&gt;The
Silmarillion&lt;/cite&gt; and &lt;cite&gt;Unfinished Tales of Númenor and Middle Earth&lt;/cite&gt;, but
I've not read any of the twelve volume of &lt;cite&gt;The History of Middle
Earth&lt;/cite&gt;, and I think after this it would be interesting to do so.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;</summary>
    <category term="clim" label="clim"/>
    <category term="common-lisp" label="common lisp"/>
    <category term="old-blog" label="old blog"/>
    <category term="recent-reading" label="recent reading"/>
    <category term="sbcl" label="sbcl"/>
  </entry>
</feed>
