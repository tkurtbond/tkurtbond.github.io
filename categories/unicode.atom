<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="https://tkurtbond.github.io/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>Lacking Natural Simplicity (Posts about unicode)</title>
  <id>https://tkurtbond.github.io/categories/unicode.atom</id>
  <updated>2023-02-06T15:22:07Z</updated>
  <author>
    <name>T. Kurt Bond</name>
  </author>
  <link rel="self" type="application/atom+xml" href="https://tkurtbond.github.io/categories/unicode.atom"/>
  <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/categories/unicode/"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>Text Subtleties</title>
    <id>https://tkurtbond.github.io/posts/2020/07/07/text-subtleties/</id>
    <updated>2020-07-07T19:05:13-04:00</updated>
    <published>2020-07-07T19:05:13-04:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2020/07/07/text-subtleties/"/>
    <summary type="html">&lt;p&gt;I just noticed that when &lt;a class="reference external" href="https://www.gnu.org/software/wget/"&gt;wget&lt;/a&gt; tells you the filename of file it just
saved, if your &lt;code class="docutils literal"&gt;LANG=C&lt;/code&gt; then it surrounds it with apostrophes ('), but
if your &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;LANG=en_US.UTF-8&lt;/span&gt;&lt;/code&gt; then it surrounds it with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Unicode"&gt;Unicode&lt;/a&gt; LEFT SINGLE
QUOTATION MARK (‘)and RIGHT SINGLE QUOTATION MARK (’).  I appreciate
little subtleties like that.&lt;/p&gt;
&lt;p&gt;I use Unicode characters in most of the writing I do.  For &lt;a class="reference external" href="https://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt;,
which I rarely use these days, I use &lt;a class="reference external" href="https://en.wikipedia.org/wiki/XeTeX"&gt;XeTeX&lt;/a&gt;, which understands UTF-8
natively.  &lt;a class="reference external" href="https://en.wikipedia.org/wiki/ConTeXt"&gt;ConTeXt&lt;/a&gt;, which I do use regularly, also understands UTF-8
natively.  For &lt;a class="reference external" href="https://www.gnu.org/software/groff/"&gt;groff&lt;/a&gt; I use the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-k&lt;/span&gt;&lt;/code&gt; switch, which preprocesses the
text with &lt;span class="command"&gt;preconv&lt;/span&gt; (which is part of &lt;a class="reference external" href="https://www.gnu.org/software/groff/"&gt;groff&lt;/a&gt;), converting the
UTF-8 characters into &lt;a class="reference external" href="https://www.gnu.org/software/groff/"&gt;groff&lt;/a&gt; character escapes, since &lt;a class="reference external" href="https://www.gnu.org/software/groff/"&gt;groff&lt;/a&gt; &lt;em&gt;doesn't&lt;/em&gt;
understand UTF-8 natively.  Of course, if it is &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;ReStructuredText&lt;/a&gt; that
I'm working with then &lt;a class="reference external" href="https://pandoc.org/"&gt;pandoc&lt;/a&gt; can be configured to use any one of
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/ConTeXt"&gt;ConTeXt&lt;/a&gt;, and &lt;a class="reference external" href="https://www.gnu.org/software/groff/"&gt;groff&lt;/a&gt; for creating PDF output, and since
&lt;span class="command"&gt;rst2html.py&lt;/span&gt; just produces &lt;a class="reference external" href="https://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt; that includes any
character you put in your source you can just use &lt;span class="command"&gt;xelatex&lt;/span&gt;
as part of your commands to turn it into PDF.  And sometimes, when I'm
feeling whimsical, I use &lt;span class="app"&gt;Heirloom Troff&lt;/span&gt;, from the &lt;a class="reference external" href="https://n-t-roff.github.io/heirloom/doctools.html"&gt;Heirloom
Documentation Tools&lt;/a&gt;, which understands UTF-8 natively.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Last edited: 2020-08-03 16:02:52 EDT&lt;/em&gt;&lt;/p&gt;
&lt;!-- Local Variables:
time-stamp-format: "%04y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "\\*Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
time-stamp-line-limit: -20
End: --&gt;</summary>
    <category term="context" label="context"/>
    <category term="groff" label="groff"/>
    <category term="heirloom-troff" label="heirloom troff"/>
    <category term="text" label="text"/>
    <category term="unicode" label="unicode"/>
    <category term="utf-8" label="utf-8"/>
    <category term="xelatex" label="xelatex"/>
  </entry>
  <entry>
    <title>Arrow Macros in Emacs Lisp</title>
    <id>https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/</id>
    <updated>2020-07-03T14:11:16-04:00</updated>
    <published>2020-07-03T14:11:16-04:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/"/>
    <summary type="html">&lt;p&gt;Are you familiar with arrow macros?  (They have nothing to do with
&lt;a class="reference external" href="https://en.wikibooks.org/wiki/Haskell/Understanding_arrows"&gt;arrows in Haskell&lt;/a&gt;.) They started out in &lt;a class="reference external" href="https://clojure.org/"&gt;Clojure&lt;/a&gt;, I think, and have
been ported to &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_Lisp"&gt;Common Lisp&lt;/a&gt; and probably other Lisps, though I didn't
find one for &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt;.  I think the &lt;a class="reference external" href="https://github.com/Harleqin/arrows"&gt;arrows&lt;/a&gt; package is the most up
to date in &lt;a class="reference external" href="https://www.quicklisp.org/"&gt;Quicklisp&lt;/a&gt; for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_Lisp"&gt;Common Lisp&lt;/a&gt;, but I found the &lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;
package first so that's the one I converted to &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; today.&lt;/p&gt;
&lt;p&gt;There were two slightly tricky parts to the port&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;I needed to use lexical binding for the source file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;'s test suite used fractions, but &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; doesn't
have them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyway, I think they're very useful.  If you have a value and
you want it to be processed by several functions in a chain you
can use an arrow macro instead of using lots of nested function
calls. For instance,&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_043138e37b6c47c595fd1a682279bda3-1" name="rest_code_043138e37b6c47c595fd1a682279bda3-1" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_043138e37b6c47c595fd1a682279bda3-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"^-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"^-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-\\."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;is annoying and hard to read on one line.  If you split it into multiple lines&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-1" name="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-1" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-2" name="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-2" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-2"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-3" name="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-3" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-3"&gt;&lt;/a&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-4" name="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-4" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"^-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-5" name="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-5" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-6" name="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-6" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="s"&gt;"^-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-7" name="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-7" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;   &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-8" name="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-8" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="s"&gt;"\\.+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-9" name="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-9" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-10" name="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-10" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="s"&gt;"\\.-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-11" name="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-11" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-12" name="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-12" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="s"&gt;"-\\."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-13" name="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-13" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-13"&gt;&lt;/a&gt;&lt;span class="w"&gt;      &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-14" name="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-14" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="s"&gt;"-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-15" name="rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-15" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_a587fa6fd14747aa90ad1305bcd3d6e6-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;that's also pretty horrible.  To read it you have to skip to the end,
figure out that function call, then skip back to the next function
call, and so forth, until you get back to the last function call,
reading it from inside out.  It looks much better if you use the
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; arrow macro, which substitutes the value you are passing along
as the last argument to the functions you are calling:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_982506fca0524928a6ea6e12de6dcaed-1" name="rest_code_982506fca0524928a6ea6e12de6dcaed-1" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_982506fca0524928a6ea6e12de6dcaed-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_982506fca0524928a6ea6e12de6dcaed-2" name="rest_code_982506fca0524928a6ea6e12de6dcaed-2" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_982506fca0524928a6ea6e12de6dcaed-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_982506fca0524928a6ea6e12de6dcaed-3" name="rest_code_982506fca0524928a6ea6e12de6dcaed-3" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_982506fca0524928a6ea6e12de6dcaed-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_982506fca0524928a6ea6e12de6dcaed-4" name="rest_code_982506fca0524928a6ea6e12de6dcaed-4" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_982506fca0524928a6ea6e12de6dcaed-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-\\."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_982506fca0524928a6ea6e12de6dcaed-5" name="rest_code_982506fca0524928a6ea6e12de6dcaed-5" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_982506fca0524928a6ea6e12de6dcaed-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_982506fca0524928a6ea6e12de6dcaed-6" name="rest_code_982506fca0524928a6ea6e12de6dcaed-6" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_982506fca0524928a6ea6e12de6dcaed-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_982506fca0524928a6ea6e12de6dcaed-7" name="rest_code_982506fca0524928a6ea6e12de6dcaed-7" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_982506fca0524928a6ea6e12de6dcaed-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"^-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_982506fca0524928a6ea6e12de6dcaed-8" name="rest_code_982506fca0524928a6ea6e12de6dcaed-8" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_982506fca0524928a6ea6e12de6dcaed-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;     &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I also think it is more understandable than the highly nested calls,
since you can follow along in from start to finish, rather than from
inside out: you've got the value, you pass it to the first function,
then to the second, and so forth.&lt;/p&gt;
&lt;p&gt;There are also macros to insert the value at the front of the argument
list (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt;&lt;/code&gt;) and to insert the value where a &lt;code class="docutils literal"&gt;&amp;lt;&amp;gt;&lt;/code&gt; symbol is found
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I wrote some &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; code with the last expression above today, and
I think it makes a good example of why they are useful.&lt;/p&gt;
&lt;p&gt;Here's the use case that inspired me to port them to &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs
Lisp&lt;/a&gt;.  When I save things from the internet I often want to
create a directory to save them in based on the filename or
some text on a web page or something, but usually there are
spaces or special characters in that text, so I have to
sanitize the text to make it a safe and simple filename.  So I
need to replace all special characters with dashes.  But I
don't want dashes repeated multiple times, just a single dash,
and I don't want dashes followed or preceded by periods, only
the period.&lt;/p&gt;
&lt;p&gt;Here' s some code to do that:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-1" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-1" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tkb-sanitize-for-filename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-2" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-2" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"Clean up characters in STRING that aren't good for&lt;/span&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-3" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-3" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-3"&gt;&lt;/a&gt;&lt;span class="s"&gt;filenames."&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-4" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-4" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-5" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-5" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-6" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-6" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-7" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-7" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-\\."&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-8" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-8" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.-"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-9" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-9" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-10" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-10" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"^-+"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-11" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-11" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;       &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"-+$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-12" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-12" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-13" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-13" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;tkb-sanitize-kill-for-filename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-14" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-14" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-14"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s"&gt;"Clean up characters that aren't good for filenames in the&lt;/span&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-15" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-15" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-15"&gt;&lt;/a&gt;&lt;span class="s"&gt;top of the kill&lt;/span&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-16" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-16" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-16"&gt;&lt;/a&gt;&lt;span class="s"&gt;ring and put the result on the top of the kill ring."&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-17" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-17" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="c1"&gt;;; gets the kill or the system clipboard if it is new.&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-18" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-18" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-18"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interactive&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-kill&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-19" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-19" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-19"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;new-string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;tkb-sanitize-for-filename&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-20" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-20" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-20"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"Old string: %s\nNew String: %s"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;new-string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-21" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-21" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-21"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kill-new&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;new-string&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-22" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-22" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-22"&gt;&lt;/a&gt;
&lt;a id="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-23" name="rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-23" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/#rest_code_e4ca9f20aa5f4b1c9a2834ced0c92cdf-23"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"C-c k S"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'tkb-sanitize-kill-for-filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that the function &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;tkb-sanitize-kill-for-filename&lt;/span&gt;&lt;/code&gt; that I use
interactively gets uses &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(current-kill&lt;/span&gt; 0 t)&lt;/code&gt; because it either
returns the top of the kill ring, or if the system clipboard is newer
it puts that on top of the kill ring and returns it.  (The docstring
of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;current-kill&lt;/span&gt;&lt;/code&gt; makes that a little difficult to figure out.)&lt;/p&gt;
&lt;p&gt;So if I have the name of a product as
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;"***Flashy####Product%%%%Name!!!!"&lt;/span&gt;&lt;/code&gt; I copy that to the clipboard
with &lt;span class="key"&gt;⌘-C&lt;/span&gt;, switch to emacs, do &lt;span class="key"&gt;C-c k S&lt;/span&gt;, switch back to
whatever program is saving the file, and use the generated,
sanitized name &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Flashy-Product-Name&lt;/span&gt;&lt;/code&gt; with &lt;span class="key"&gt;⌘-V&lt;/span&gt;.  Nifty!&lt;/p&gt;
&lt;p&gt;(And if you've ever wondered what the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Unicode"&gt;Unicode&lt;/a&gt; character for the Mac
keyboard &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Command_key"&gt;Command key&lt;/a&gt; (⌘) is, it is the PLACE OF INTEREST SIGN, and
you can enter it in &lt;span class="app"&gt;Emacs&lt;/span&gt; by &lt;span class="key"&gt;C-x 8 RETURN PLACE OF
INTEREST SIGN⏎&lt;/span&gt;.  The symbol they use for for the key labeled alt and
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Option_key"&gt;option&lt;/a&gt; (⌥) is the Unicode OPTION KEY, and the symbol they use for
the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Shift_key"&gt;Shift Key&lt;/a&gt; (⇧) is UPWARDS WHITE ARROW.  I'm surprised they
don't have a special symbol for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Control_key"&gt;Control&lt;/a&gt;, but it looks like they just
use the plain ASCII ^, known in Unicode as CIRCUMFLEX ACCENT.)&lt;/p&gt;
&lt;p&gt;Anyway, &lt;a class="reference external" href="https://tkurtbond.github.io/arrows-for-emacs.zip"&gt;here&lt;/a&gt;'s a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Info-ZIP"&gt;ZIP&lt;/a&gt; file with the Emacs Lisp source for the arrow
macros so you can use them if you've been convinced of their
usefulness by this post.  It also has some minimal documentation in
the &lt;span class="file"&gt;README.md&lt;/span&gt; that came from the &lt;span class="file"&gt;README.md&lt;/span&gt; from
&lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;, which seems to repeat the information from the
docstrings for the macros.&lt;/p&gt;
&lt;section id="section-1"&gt;
&lt;h2&gt;2021-09-07&lt;/h2&gt;
&lt;p&gt;Now in a &lt;a class="reference external" href="https://github.com/tkurtbond/arrow-macros-for-emacs"&gt;Gitub repo&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Last edited: 2021-09-07 13:25:09 EDT&lt;/em&gt;&lt;/p&gt;
&lt;!-- Local Variables:
time-stamp-format: "%Y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "\\*Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
time-stamp-line-limit: -20
End: --&gt;
&lt;/section&gt;</summary>
    <category term="arrow-macros" label="arrow macros"/>
    <category term="clojure" label="clojure"/>
    <category term="common-lisp" label="common lisp"/>
    <category term="emacs" label="emacs"/>
    <category term="emacs-lisp" label="emacs lisp"/>
    <category term="unicode" label="unicode"/>
  </entry>
  <entry>
    <title>Defining keys in the C-x 8 prefix keymap</title>
    <id>https://tkurtbond.github.io/posts/2012/10/03/defining-keys-in-the-c-x-8-prefix-keymap/</id>
    <updated>2012-10-03T23:54:40-05:00</updated>
    <published>2012-10-03T23:54:40-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2012/10/03/defining-keys-in-the-c-x-8-prefix-keymap/"/>
    <summary type="html">&lt;p&gt;Yay!  I finally found it!&lt;/p&gt;
&lt;p&gt;Suppose you hate typing “C-x 8 RET GREEK SMALL LETTER LAMBDA” to
insert a lowercase lambda character in emacs (perhaps because you have
a dull American keyboard and aren't very savvy to input methods).  You
can add a key definition to the “C-x 8 prefix keymap”, say “gl”, so
you can type “C-x 8 g l” and insert a lowercase lambda.&lt;/p&gt;
&lt;p&gt;Here's how you might do it for “λ”, “Λ”, and “§”:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(load-library "iso-transl.el")
(iso-transl-define-keys '(("gl" . [?λ])   ; greek lowercase lambda
                          ("gL" . [?Λ])   ; greek uppercase lambda
                          ("ps" . [?§]))) ; punctuation SECTION SIGN&lt;/pre&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="emacs-lisp" label="emacs lisp"/>
    <category term="key-translation" label="key translation"/>
    <category term="unicode" label="unicode"/>
  </entry>
</feed>
