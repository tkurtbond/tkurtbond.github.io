<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lacking Natural Simplicity (Posts about ada)</title><link>https://tkurtbond.github.io/</link><description></description><atom:link href="https://tkurtbond.github.io/categories/ada.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2024 &lt;a href="mailto:tkurtbond@gmail.com"&gt;T. Kurt Bond&lt;/a&gt; </copyright><lastBuildDate>Mon, 15 Jul 2024 18:30:43 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Maintaining the old ada-mode.el formerly distributed with Emacs</title><link>https://tkurtbond.github.io/posts/2022/12/06/maintaining-the-old-ada-modeel-formerly-distributed-with-emacs/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;I wrote a &lt;a class="reference external" href="https://tkurtbond.github.io/posts/2022/07/09/using-the-old-version-of-ada-mode-for-emacs/"&gt;post&lt;/a&gt; about using the old ada-mode.el that used to be
distributed with &lt;span class="app"&gt;Emacs&lt;/span&gt; because I couldn't get the newer,
separate package &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_mono/ada-mode.html"&gt;version&lt;/a&gt; to work for me.&lt;/p&gt;
&lt;p&gt;Well, this morning when I pulled up an Ada file in &lt;span class="app"&gt;Emacs&lt;/span&gt; version
28 there were two problems:&lt;/p&gt;
&lt;ol class="arabic"&gt;
&lt;li&gt;&lt;p&gt;The information to invoke ada-mode on Ada files was not in the
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;auto-mode-alist&lt;/span&gt;&lt;/code&gt; variable in &lt;span class="app"&gt;Emacs&lt;/span&gt;.  That was easy
enough to fix: add &lt;span class="file"&gt;.ada&lt;/span&gt;, &lt;span class="file"&gt;.ads&lt;/span&gt;, and &lt;span class="file"&gt;.adb&lt;/span&gt; to
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;auto-mode-alist&lt;/span&gt;&lt;/code&gt; (and &lt;span class="file"&gt;.gpr&lt;/span&gt;, too, since Ada mode works
for &lt;span class="app"&gt;gprbuild&lt;/span&gt; files as well):&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_3171fdf25a0346d4b76c694574cb6c14-1" name="rest_code_3171fdf25a0346d4b76c694574cb6c14-1" href="https://tkurtbond.github.io/posts/2022/12/06/maintaining-the-old-ada-modeel-formerly-distributed-with-emacs/#rest_code_3171fdf25a0346d4b76c694574cb6c14-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cl-loop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ext&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"\\.gpr$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.ada$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.ads$"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"\\.adb$"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_3171fdf25a0346d4b76c694574cb6c14-2" name="rest_code_3171fdf25a0346d4b76c694574cb6c14-2" href="https://tkurtbond.github.io/posts/2022/12/06/maintaining-the-old-ada-modeel-formerly-distributed-with-emacs/#rest_code_3171fdf25a0346d4b76c694574cb6c14-2"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nb"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;add-to-list&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'auto-mode-alist&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cons&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;ext&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;'ada-mode&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That was easy enough.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;When I tried to do any indentation &lt;span class="command"&gt;emacs&lt;/span&gt; reported an error,
with the error message “End position is smaller than start
position”.  Eventually I tracked this down to a call to
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;parse-partial-sexp&lt;/span&gt;&lt;/code&gt; in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ada-in-open-paren-p&lt;/span&gt;&lt;/code&gt;.  It turns out
that somewhere after &lt;span class="app"&gt;Emacs&lt;/span&gt; version 27.2 was released the
&lt;span class="app"&gt;Emacs&lt;/span&gt; developers added a check to &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;parse-partial-sexp&lt;/span&gt;&lt;/code&gt; to
ensure that the &lt;code class="docutils literal"&gt;FROM&lt;/code&gt; argument (which indicates where in the
buffer to start parsing) was less than the &lt;code class="docutils literal"&gt;TO&lt;/code&gt; argument (which
indicates where in the buffer to &lt;strong&gt;stop&lt;/strong&gt; parsing).&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Drat.  Drat.  Drat.  Well, looking at the code it was clear that
since &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ada-in-open-paren-p&lt;/span&gt;&lt;/code&gt; is explicitly searching backwards
that &lt;code class="docutils literal"&gt;TO&lt;/code&gt; would &lt;strong&gt;always&lt;/strong&gt; be smaller than &lt;code class="docutils literal"&gt;FROM&lt;/code&gt;.  So I could
just transpose the s-expressions that found those two values.  I
tried it, and it worked!&lt;/p&gt;
&lt;p&gt;At that point I realized that I had committed to maintain the old
version of ada-mode, at least for myself, and that I'd already talked
about it on my blog and it was small step from there to setting up a
GitHub &lt;a class="reference external" href="https://github.com/tkurtbond/old-ada-mode"&gt;repository&lt;/a&gt; with the old code, adding an &lt;a class="reference external" href="https://github.com/tkurtbond/old-ada-mode/issues/1"&gt;issue&lt;/a&gt; describing the
problem, adding a &lt;a class="reference external" href="https://github.com/tkurtbond/old-ada-mode/commit/7ee6fe55862ec615c7fe23d881adfee2d0094770"&gt;commit&lt;/a&gt; with the fix, and then writing this blog
post.&lt;/p&gt;
&lt;p&gt;Somewhere, someone is laughing and enjoying the schadenfreude.  Maybe
this will help someone else.&lt;/p&gt;
&lt;p&gt;And since I already have a GitHub &lt;a class="reference external" href="https://github.com/tkurtbond/old-ada-mode"&gt;repository&lt;/a&gt;, I ought to document the
first &lt;a class="reference external" href="https://github.com/tkurtbond/old-ada-mode/issues/2"&gt;problem&lt;/a&gt; and since it is a documentation problem, put a mention
in the &lt;a class="reference external" href="https://github.com/tkurtbond/old-ada-mode/commit/67a79caacd851120fee2bca4704938a2f27e1bba"&gt;README&lt;/a&gt;.&lt;/p&gt;</description><category>ada</category><category>ada-mode</category><category>ada-mode.el</category><category>emacs</category><guid>https://tkurtbond.github.io/posts/2022/12/06/maintaining-the-old-ada-modeel-formerly-distributed-with-emacs/</guid><pubDate>Tue, 06 Dec 2022 18:28:59 GMT</pubDate></item><item><title>Splitting Strings on a Delimiter in the Ada Programming Language</title><link>https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;&lt;em&gt;Last edited: 2022-12-06 13:30:34 EST&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;When I did a search for “splitting strings on a delimiter in the Ada
programming language” recently I did not get many useful results.
Eventually I stumbled over &lt;a class="reference external" href="https://gcc.gnu.org/onlinedocs/gcc-12.1.0/gnat_rm/GNAT-String_005fSplit-g-strspl-ads.html#GNAT-String_005fSplit-g-strspl-ads"&gt;GNAT.String_Split&lt;/a&gt; which is an
instantiation of the generic package &lt;a class="reference external" href="https://gcc.gnu.org/onlinedocs/gcc-12.1.0/gnat_rm/GNAT-Array_005fSplit-g-arrspl-ads.html#GNAT-Array_005fSplit-g-arrspl-ads"&gt;GNAT.Array_Split&lt;/a&gt;.  I also
finally &lt;a class="reference external" href="https://blog.adacore.com/new-strings-package-in-gnatcoll"&gt;found&lt;/a&gt; &lt;a class="reference external" href="https://github.com/AdaCore/gnatcoll-core/blob/master/src/gnatcoll-strings_impl.ads"&gt;GNATCOLL.Strings_Impl&lt;/a&gt; and &lt;a class="reference external" href="https://github.com/AdaCore/gnatcoll-core/blob/master/src/gnatcoll-strings.ads"&gt;GNATCOLL.Strings&lt;/a&gt;, its
default instantiation, which looks especially interesting, contains
a split implementation, and which seems to be designed to be a more
efficient string implementation than  than &lt;code class="docutils literal"&gt;Ada.Strings.Unbounded&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;However, those are all a little complicated, so it might be
appropriate to show a simpler implementation.&lt;/p&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;String&lt;/code&gt; type in Ada is a array of characters.  Once
declared, a &lt;code class="docutils literal"&gt;String&lt;/code&gt; variable always has the same length.  That
means that all the strings in an array of strings have to be the same
length.  However, an &lt;code class="docutils literal"&gt;access&lt;/code&gt; (Ada's version of a
pointer) to a &lt;code class="docutils literal"&gt;String&lt;/code&gt; can point to a string of any length, so for
this version we'll return an array of pointers to &lt;code class="docutils literal"&gt;String&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Operations on &lt;code class="docutils literal"&gt;String&lt;/code&gt; are defined in &lt;a class="reference external" href="http://www.ada-auth.org/standards/rm12_w_tc1/html/RM-A-4-3.html"&gt;Ada.Strings.Fixed&lt;/a&gt;.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code ada"&gt;&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-1" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-1" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Strings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Strings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-2" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-2" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Strings.Fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Strings.Fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-3" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-3" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-4" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-4" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-4"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Integer_Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Integer_Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-5" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-5" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-5"&gt;&lt;/a&gt;&lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;split_fixed&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-6" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-6" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-6"&gt;&lt;/a&gt;   &lt;span class="c1"&gt;-- Ada.Text_IO contains a type, Count, that would conflict with&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-7" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-7" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-7"&gt;&lt;/a&gt;   &lt;span class="c1"&gt;-- the function Ada.Strings.Fixed.Count, so don't "use Ada.Text_IO;"&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-8" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-8" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-8"&gt;&lt;/a&gt;   &lt;span class="c1"&gt;-- instead, make a package the gives it a shorter name, and use all its&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-9" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-9" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-9"&gt;&lt;/a&gt;   &lt;span class="c1"&gt;-- procedures with that as the prefix.&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-10" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-10" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-10"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;package&lt;/span&gt; &lt;span class="nc"&gt;ATIO&lt;/span&gt; &lt;span class="kr"&gt;renames&lt;/span&gt; &lt;span class="nc"&gt;Ada.Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-11" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-11" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-11"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;String_Ptr&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt; &lt;span class="kr"&gt;access&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-12" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-12" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-12"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Vector&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt; &lt;span class="kr"&gt;array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Natural&lt;/span&gt; &lt;span class="kr"&gt;range&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;)&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt; &lt;span class="n"&gt;String_Ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-13" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-13" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-13"&gt;&lt;/a&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-14" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-14" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-14"&gt;&lt;/a&gt;   &lt;span class="c1"&gt;-- Allocate a new String in a storage pool, initializing it to S, and&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-15" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-15" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-15"&gt;&lt;/a&gt;   &lt;span class="c1"&gt;-- returning an access to it (a pointer).&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-16" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-16" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-16"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;"+"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Source&lt;/span&gt; &lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;String_Ptr&lt;/span&gt;  &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-17" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-17" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-17"&gt;&lt;/a&gt;      &lt;span class="n"&gt;SP&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;String_Ptr&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="kr"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;'(&lt;/span&gt;&lt;span class="n"&gt;Source&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-18" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-18" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-18"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-19" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-19" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-19"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;SP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-20" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-20" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-20"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;"+"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-21" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-21" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-21"&gt;&lt;/a&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-22" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-22" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-22"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-23" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-23" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-23"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Positive&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-24" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-24" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-24"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-25" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-25" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-25"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Num_Parts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="kt"&gt;Count&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-26" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-26" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-26"&gt;&lt;/a&gt;      &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;Num_Parts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-27" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-27" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-27"&gt;&lt;/a&gt;      &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-28" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-28" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-28"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-29" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-29" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-29"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;while&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Length&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-30" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-30" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-30"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Index&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-31" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-31" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-31"&gt;&lt;/a&gt;         &lt;span class="kr"&gt;exit&lt;/span&gt; &lt;span class="kr"&gt;when&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-32" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-32" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-32"&gt;&lt;/a&gt;         &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-33" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-33" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-33"&gt;&lt;/a&gt;         &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="n"&gt;Position&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-34" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-34" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-34"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;-- The pattern can be longer than one character.&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-35" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-35" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-35"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-36" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-36" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-36"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-37" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-37" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-37"&gt;&lt;/a&gt;      &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-38" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-38" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-38"&gt;&lt;/a&gt;      &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;..&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Last&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-39" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-39" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-39"&gt;&lt;/a&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-40" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-40" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-40"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-41" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-41" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-41"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-42" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-42" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-42"&gt;&lt;/a&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-43" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-43" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-43"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;V&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;Vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-44" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-44" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-44"&gt;&lt;/a&gt;      &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-45" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-45" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-45"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-46" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-46" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-46"&gt;&lt;/a&gt;      &lt;span class="n"&gt;ATIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put_Line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s"&gt;": """&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s"&gt;""""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-47" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-47" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-47"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;First&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Last&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-48" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-48" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-48"&gt;&lt;/a&gt;         &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-49" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-49" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-49"&gt;&lt;/a&gt;         &lt;span class="n"&gt;ATIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"    Part "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;ATIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;": """&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-50" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-50" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-50"&gt;&lt;/a&gt;         &lt;span class="n"&gt;ATIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="kr"&gt;all&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-51" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-51" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-51"&gt;&lt;/a&gt;         &lt;span class="n"&gt;ATIO&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Put_Line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-52" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-52" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-52"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-53" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-53" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-53"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;Print_Vector&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-54" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-54" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-54"&gt;&lt;/a&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-55" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-55" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-55"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"Hello, World!|I am fine!|How are you?"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-56" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-56" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-56"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-57" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-57" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-57"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                    &lt;span class="c1"&gt;--  Empty string.&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-58" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-58" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-58"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-59" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-59" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-59"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                   &lt;span class="c1"&gt;--  Just one  of pattern.&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-60" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-60" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-60"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-61" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-61" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-61"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"||"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                  &lt;span class="c1"&gt;--  Just two of pattern.&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-62" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-62" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-62"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-63" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-63" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-63"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;                 &lt;span class="c1"&gt;--  Just one part.&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-64" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-64" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-64"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-65" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-65" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-65"&gt;&lt;/a&gt;   &lt;span class="c1"&gt;-- The delimiter doesn't have to be one character.&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-66" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-66" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-66"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="s"&gt;"foo&amp;lt;=&amp;gt;bar"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-67" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-67" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-67"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;=&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-68" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-68" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-68"&gt;&lt;/a&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-69" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-69" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-69"&gt;&lt;/a&gt;&lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-70" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-70" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-70"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-71" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-71" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-71"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-72" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-72" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-72"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-73" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-73" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-73"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-74" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-74" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-74"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-75" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-75" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-75"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_3a17d3b427fa447ba8c0d81882e579c6-76" name="rest_code_3a17d3b427fa447ba8c0d81882e579c6-76" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_3a17d3b427fa447ba8c0d81882e579c6-76"&gt;&lt;/a&gt;&lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;split_fixed&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's the output:&lt;/p&gt;
&lt;pre class="literal-block"&gt;S1: "Hello, World!|I am fine!|How are you?"
    Part 1: "Hello, World!"
    Part 2: "I am fine!"
    Part 3: "How are you?"
S2: ""
    Part 1: ""
S3: "|"
    Part 1: ""
    Part 2: ""
S4: "||"
    Part 1: ""
    Part 2: ""
    Part 3: ""
S5: "one"
    Part 1: "one"
S6: "foo&amp;lt;=&amp;gt;bar"
    Part 1: "foo"
    Part 2: "bar"
&lt;/pre&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;Bounded_String&lt;/code&gt; type in Ada has a maximum capacity and a
current length.  You instantiate a new package for each different
maximum capacity that you want, producing a different type for each.
You can assign any string smaller than or equal to the maximum length,
and the current length is recorded.&lt;/p&gt;
&lt;p&gt;Operations on &lt;code class="docutils literal"&gt;Bounded_String&lt;/code&gt; are defined in
&lt;a class="reference external" href="http://www.ada-auth.org/standards/rm12_w_tc1/html/RM-A-4-4.html"&gt;Ada.Strings.Bounded&lt;/a&gt;.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code ada"&gt;&lt;a id="rest_code_66d697c13a22462c96763600443f7607-1" name="rest_code_66d697c13a22462c96763600443f7607-1" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Strings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Strings&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-2" name="rest_code_66d697c13a22462c96763600443f7607-2" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Strings.Bounded&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Strings.Bounded&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-3" name="rest_code_66d697c13a22462c96763600443f7607-3" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO.Bounded_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-4" name="rest_code_66d697c13a22462c96763600443f7607-4" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-4"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-5" name="rest_code_66d697c13a22462c96763600443f7607-5" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-5"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Integer_Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Integer_Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-6" name="rest_code_66d697c13a22462c96763600443f7607-6" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-6"&gt;&lt;/a&gt;&lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;split_bounded&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-7" name="rest_code_66d697c13a22462c96763600443f7607-7" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-7"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;package&lt;/span&gt; &lt;span class="nc"&gt;B_String&lt;/span&gt; &lt;span class="kr"&gt;is new&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-8" name="rest_code_66d697c13a22462c96763600443f7607-8" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-8"&gt;&lt;/a&gt;     &lt;span class="nc"&gt;Ada.Strings.Bounded.Generic_Bounded_Length&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Max&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt; 128&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-9" name="rest_code_66d697c13a22462c96763600443f7607-9" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-9"&gt;&lt;/a&gt;   &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;B_String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-10" name="rest_code_66d697c13a22462c96763600443f7607-10" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-10"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;package&lt;/span&gt; &lt;span class="nc"&gt;B_String_IO&lt;/span&gt; &lt;span class="kr"&gt;is new&lt;/span&gt; &lt;span class="nc"&gt;Bounded_IO&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;B_String&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;B_String_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-11" name="rest_code_66d697c13a22462c96763600443f7607-11" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-11"&gt;&lt;/a&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-12" name="rest_code_66d697c13a22462c96763600443f7607-12" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-12"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Vector&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt; &lt;span class="kr"&gt;array&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;Natural&lt;/span&gt; &lt;span class="kr"&gt;range&lt;/span&gt; &lt;span class="p"&gt;&amp;lt;&amp;gt;)&lt;/span&gt; &lt;span class="kr"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Bounded_String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-13" name="rest_code_66d697c13a22462c96763600443f7607-13" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-13"&gt;&lt;/a&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-14" name="rest_code_66d697c13a22462c96763600443f7607-14" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-14"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;Bounded_String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-15" name="rest_code_66d697c13a22462c96763600443f7607-15" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-15"&gt;&lt;/a&gt;                  &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-16" name="rest_code_66d697c13a22462c96763600443f7607-16" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-16"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Positive&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-17" name="rest_code_66d697c13a22462c96763600443f7607-17" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-17"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-18" name="rest_code_66d697c13a22462c96763600443f7607-18" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-18"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Num_Parts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;B_String&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kt"&gt;Count&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-19" name="rest_code_66d697c13a22462c96763600443f7607-19" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-19"&gt;&lt;/a&gt;      &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="n"&gt;Num_Parts&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-20" name="rest_code_66d697c13a22462c96763600443f7607-20" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-20"&gt;&lt;/a&gt;      &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-21" name="rest_code_66d697c13a22462c96763600443f7607-21" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-21"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-22" name="rest_code_66d697c13a22462c96763600443f7607-22" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-22"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;while&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-23" name="rest_code_66d697c13a22462c96763600443f7607-23" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-23"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Index&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-24" name="rest_code_66d697c13a22462c96763600443f7607-24" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-24"&gt;&lt;/a&gt;         &lt;span class="kr"&gt;exit&lt;/span&gt; &lt;span class="kr"&gt;when&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-25" name="rest_code_66d697c13a22462c96763600443f7607-25" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-25"&gt;&lt;/a&gt;         &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-26" name="rest_code_66d697c13a22462c96763600443f7607-26" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-26"&gt;&lt;/a&gt;         &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Bounded_Slice&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-27" name="rest_code_66d697c13a22462c96763600443f7607-27" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-27"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;-- The pattern can be longer than one character.&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-28" name="rest_code_66d697c13a22462c96763600443f7607-28" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-28"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-29" name="rest_code_66d697c13a22462c96763600443f7607-29" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-29"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-30" name="rest_code_66d697c13a22462c96763600443f7607-30" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-30"&gt;&lt;/a&gt;      &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-31" name="rest_code_66d697c13a22462c96763600443f7607-31" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-31"&gt;&lt;/a&gt;      &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Bounded_Slice&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-32" name="rest_code_66d697c13a22462c96763600443f7607-32" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-32"&gt;&lt;/a&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-33" name="rest_code_66d697c13a22462c96763600443f7607-33" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-33"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-34" name="rest_code_66d697c13a22462c96763600443f7607-34" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-34"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-35" name="rest_code_66d697c13a22462c96763600443f7607-35" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-35"&gt;&lt;/a&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-36" name="rest_code_66d697c13a22462c96763600443f7607-36" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-36"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;Bounded_String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;V&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;Vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-37" name="rest_code_66d697c13a22462c96763600443f7607-37" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-37"&gt;&lt;/a&gt;      &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-38" name="rest_code_66d697c13a22462c96763600443f7607-38" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-38"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-39" name="rest_code_66d697c13a22462c96763600443f7607-39" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-39"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Put_Line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;label&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s"&gt;": """&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;S&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s"&gt;""""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-40" name="rest_code_66d697c13a22462c96763600443f7607-40" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-40"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;First&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Last&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-41" name="rest_code_66d697c13a22462c96763600443f7607-41" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-41"&gt;&lt;/a&gt;         &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-42" name="rest_code_66d697c13a22462c96763600443f7607-42" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-42"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"    Part "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;": """&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-43" name="rest_code_66d697c13a22462c96763600443f7607-43" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-43"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Put_Line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-44" name="rest_code_66d697c13a22462c96763600443f7607-44" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-44"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-45" name="rest_code_66d697c13a22462c96763600443f7607-45" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-45"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;Print_Vector&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-46" name="rest_code_66d697c13a22462c96763600443f7607-46" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-46"&gt;&lt;/a&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-47" name="rest_code_66d697c13a22462c96763600443f7607-47" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-47"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Bounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;To_Bounded_String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!|I am fine!|How are you?"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-48" name="rest_code_66d697c13a22462c96763600443f7607-48" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-48"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-49" name="rest_code_66d697c13a22462c96763600443f7607-49" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-49"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Bounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;To_Bounded_String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="c1"&gt;--  Empty string.&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-50" name="rest_code_66d697c13a22462c96763600443f7607-50" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-50"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-51" name="rest_code_66d697c13a22462c96763600443f7607-51" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-51"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Bounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;To_Bounded_String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="c1"&gt;--  Just one  of pattern.&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-52" name="rest_code_66d697c13a22462c96763600443f7607-52" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-52"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-53" name="rest_code_66d697c13a22462c96763600443f7607-53" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-53"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Bounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;To_Bounded_String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"||"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;--  Just two of pattern.&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-54" name="rest_code_66d697c13a22462c96763600443f7607-54" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-54"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-55" name="rest_code_66d697c13a22462c96763600443f7607-55" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-55"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Bounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;To_Bounded_String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;--  Just one part.&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-56" name="rest_code_66d697c13a22462c96763600443f7607-56" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-56"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-57" name="rest_code_66d697c13a22462c96763600443f7607-57" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-57"&gt;&lt;/a&gt;   &lt;span class="c1"&gt;-- The delimiter doesn't have to be one character.&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-58" name="rest_code_66d697c13a22462c96763600443f7607-58" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-58"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Bounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;To_Bounded_String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"foo&amp;lt;=&amp;gt;bar"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-59" name="rest_code_66d697c13a22462c96763600443f7607-59" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-59"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;=&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-60" name="rest_code_66d697c13a22462c96763600443f7607-60" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-60"&gt;&lt;/a&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-61" name="rest_code_66d697c13a22462c96763600443f7607-61" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-61"&gt;&lt;/a&gt;&lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-62" name="rest_code_66d697c13a22462c96763600443f7607-62" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-62"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-63" name="rest_code_66d697c13a22462c96763600443f7607-63" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-63"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-64" name="rest_code_66d697c13a22462c96763600443f7607-64" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-64"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-65" name="rest_code_66d697c13a22462c96763600443f7607-65" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-65"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-66" name="rest_code_66d697c13a22462c96763600443f7607-66" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-66"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-67" name="rest_code_66d697c13a22462c96763600443f7607-67" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-67"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_66d697c13a22462c96763600443f7607-68" name="rest_code_66d697c13a22462c96763600443f7607-68" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_66d697c13a22462c96763600443f7607-68"&gt;&lt;/a&gt;&lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;split_bounded&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's the output:&lt;/p&gt;
&lt;pre class="literal-block"&gt;S1: "Hello, World!|I am fine!|How are you?"
    Part 1: "Hello, World!"
    Part 2: "I am fine!"
    Part 3: "How are you?"
S2: ""
    Part 1: ""
S3: "|"
    Part 1: ""
    Part 2: ""
S4: "||"
    Part 1: ""
    Part 2: ""
    Part 3: ""
S5: "one"
    Part 1: "one"
S6: "foo&amp;lt;=&amp;gt;bar"
    Part 1: "foo"
    Part 2: "bar"
&lt;/pre&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;Unbounded_String&lt;/code&gt; type in Ada grows dynamically as needed,
but is not as time efficient as fixed strings or bounded strings.
For this version, we'll use &lt;a class="reference external" href="http://www.ada-auth.org/standards/rm12_w_tc1/html/RM-A-18-2.html"&gt;Ada.Containers.Vectors&lt;/a&gt; for a
dynamically expending vector, rather than a fixed size vector.&lt;/p&gt;
&lt;p&gt;Operations on &lt;code class="docutils literal"&gt;Unbounded_String&lt;/code&gt; are defined in
&lt;a class="reference external" href="http://www.ada-auth.org/standards/rm12_w_tc1/html/RM-A-4-5.html"&gt;Ada.Strings.Unbounded&lt;/a&gt;.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code ada"&gt;&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-1" name="rest_code_5c24738c4496413a8c53286f9df66f0b-1" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Strings.Unbounded&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Strings.Unbounded&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-2" name="rest_code_5c24738c4496413a8c53286f9df66f0b-2" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-2"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-3" name="rest_code_5c24738c4496413a8c53286f9df66f0b-3" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-3"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Integer_Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Integer_Text_Io&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-4" name="rest_code_5c24738c4496413a8c53286f9df66f0b-4" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-4"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO.Unbounded_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO.Unbounded_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-5" name="rest_code_5c24738c4496413a8c53286f9df66f0b-5" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-5"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Containers.Vectors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-6" name="rest_code_5c24738c4496413a8c53286f9df66f0b-6" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-6"&gt;&lt;/a&gt;&lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;split_unbounded&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-7" name="rest_code_5c24738c4496413a8c53286f9df66f0b-7" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-7"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;package&lt;/span&gt; &lt;span class="nc"&gt;Unbounded_String_Vectors&lt;/span&gt; &lt;span class="kr"&gt;is new&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-8" name="rest_code_5c24738c4496413a8c53286f9df66f0b-8" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-8"&gt;&lt;/a&gt;     &lt;span class="nc"&gt;Ada.Containers.Vectors&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;Natural&lt;span class="p"&gt;,&lt;/span&gt; Unbounded_String&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-9" name="rest_code_5c24738c4496413a8c53286f9df66f0b-9" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-9"&gt;&lt;/a&gt;   &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Unbounded_String_Vectors&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-10" name="rest_code_5c24738c4496413a8c53286f9df66f0b-10" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-10"&gt;&lt;/a&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-11" name="rest_code_5c24738c4496413a8c53286f9df66f0b-11" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-11"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;"+"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Source&lt;/span&gt; &lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-12" name="rest_code_5c24738c4496413a8c53286f9df66f0b-12" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-12"&gt;&lt;/a&gt;                &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;Unbounded_String&lt;/span&gt; &lt;span class="kr"&gt;renames&lt;/span&gt; &lt;span class="n"&gt;To_Unbounded_String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-13" name="rest_code_5c24738c4496413a8c53286f9df66f0b-13" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-13"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;subtype&lt;/span&gt; &lt;span class="kt"&gt;UBS_Vector&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt; &lt;span class="n"&gt;Unbounded_String_Vectors&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Vector&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-14" name="rest_code_5c24738c4496413a8c53286f9df66f0b-14" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-14"&gt;&lt;/a&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-15" name="rest_code_5c24738c4496413a8c53286f9df66f0b-15" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-15"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;Unbounded_String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nv"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-16" name="rest_code_5c24738c4496413a8c53286f9df66f0b-16" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-16"&gt;&lt;/a&gt;                  &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;UBS_Vector&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-17" name="rest_code_5c24738c4496413a8c53286f9df66f0b-17" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-17"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Positive&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-18" name="rest_code_5c24738c4496413a8c53286f9df66f0b-18" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-18"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-19" name="rest_code_5c24738c4496413a8c53286f9df66f0b-19" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-19"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Num_Parts&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-20" name="rest_code_5c24738c4496413a8c53286f9df66f0b-20" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-20"&gt;&lt;/a&gt;      &lt;span class="n"&gt;V&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UBS_Vector&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-21" name="rest_code_5c24738c4496413a8c53286f9df66f0b-21" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-21"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-22" name="rest_code_5c24738c4496413a8c53286f9df66f0b-22" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-22"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;while&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-23" name="rest_code_5c24738c4496413a8c53286f9df66f0b-23" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-23"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Index&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-24" name="rest_code_5c24738c4496413a8c53286f9df66f0b-24" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-24"&gt;&lt;/a&gt;         &lt;span class="kr"&gt;exit&lt;/span&gt; &lt;span class="kr"&gt;when&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-25" name="rest_code_5c24738c4496413a8c53286f9df66f0b-25" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-25"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Append&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Unbounded_Slice&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-26" name="rest_code_5c24738c4496413a8c53286f9df66f0b-26" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-26"&gt;&lt;/a&gt;          &lt;span class="c1"&gt;-- The pattern can be longer than one character.&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-27" name="rest_code_5c24738c4496413a8c53286f9df66f0b-27" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-27"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Start&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Position&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;Pattern&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-28" name="rest_code_5c24738c4496413a8c53286f9df66f0b-28" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-28"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-29" name="rest_code_5c24738c4496413a8c53286f9df66f0b-29" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-29"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Num_Parts&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Num_Parts&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-30" name="rest_code_5c24738c4496413a8c53286f9df66f0b-30" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-30"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Append&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Unbounded_Slice&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Length&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-31" name="rest_code_5c24738c4496413a8c53286f9df66f0b-31" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-31"&gt;&lt;/a&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-32" name="rest_code_5c24738c4496413a8c53286f9df66f0b-32" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-32"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;return&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-33" name="rest_code_5c24738c4496413a8c53286f9df66f0b-33" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-33"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;Split&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-34" name="rest_code_5c24738c4496413a8c53286f9df66f0b-34" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-34"&gt;&lt;/a&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-35" name="rest_code_5c24738c4496413a8c53286f9df66f0b-35" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-35"&gt;&lt;/a&gt;   &lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;Print_UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;Label&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-36" name="rest_code_5c24738c4496413a8c53286f9df66f0b-36" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-36"&gt;&lt;/a&gt;                               &lt;span class="nv"&gt;S&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;Unbounded_String&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-37" name="rest_code_5c24738c4496413a8c53286f9df66f0b-37" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-37"&gt;&lt;/a&gt;                               &lt;span class="nv"&gt;V&lt;/span&gt;&lt;span class="p"&gt;: &lt;/span&gt;&lt;span class="nv"&gt;UBS_Vector&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-38" name="rest_code_5c24738c4496413a8c53286f9df66f0b-38" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-38"&gt;&lt;/a&gt;      &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kt"&gt;Natural&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-39" name="rest_code_5c24738c4496413a8c53286f9df66f0b-39" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-39"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-40" name="rest_code_5c24738c4496413a8c53286f9df66f0b-40" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-40"&gt;&lt;/a&gt;      &lt;span class="n"&gt;Put_Line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Label&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s"&gt;": """&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;to_string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="s"&gt;""""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-41" name="rest_code_5c24738c4496413a8c53286f9df66f0b-41" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-41"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;for&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;First_Index&lt;/span&gt; &lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Last_Index&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-42" name="rest_code_5c24738c4496413a8c53286f9df66f0b-42" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-42"&gt;&lt;/a&gt;         &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-43" name="rest_code_5c24738c4496413a8c53286f9df66f0b-43" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-43"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"    Part "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;": """&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;V&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-44" name="rest_code_5c24738c4496413a8c53286f9df66f0b-44" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-44"&gt;&lt;/a&gt;         &lt;span class="n"&gt;Put_Line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;""""&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-45" name="rest_code_5c24738c4496413a8c53286f9df66f0b-45" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-45"&gt;&lt;/a&gt;      &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-46" name="rest_code_5c24738c4496413a8c53286f9df66f0b-46" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-46"&gt;&lt;/a&gt;   &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;Print_UBS_Vector&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-47" name="rest_code_5c24738c4496413a8c53286f9df66f0b-47" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-47"&gt;&lt;/a&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-48" name="rest_code_5c24738c4496413a8c53286f9df66f0b-48" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-48"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unbounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;"Hello, World!|I am fine!|How are you?"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-49" name="rest_code_5c24738c4496413a8c53286f9df66f0b-49" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-49"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-50" name="rest_code_5c24738c4496413a8c53286f9df66f0b-50" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-50"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unbounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="c1"&gt;--  Empty string.&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-51" name="rest_code_5c24738c4496413a8c53286f9df66f0b-51" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-51"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-52" name="rest_code_5c24738c4496413a8c53286f9df66f0b-52" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-52"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unbounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="c1"&gt;--  Just one  of pattern.&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-53" name="rest_code_5c24738c4496413a8c53286f9df66f0b-53" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-53"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-54" name="rest_code_5c24738c4496413a8c53286f9df66f0b-54" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-54"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unbounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;"||"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;       &lt;span class="c1"&gt;--  Just two of pattern.&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-55" name="rest_code_5c24738c4496413a8c53286f9df66f0b-55" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-55"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V4&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-56" name="rest_code_5c24738c4496413a8c53286f9df66f0b-56" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-56"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unbounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;"one"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="c1"&gt;--  Just one part.&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-57" name="rest_code_5c24738c4496413a8c53286f9df66f0b-57" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-57"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V5&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"|"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-58" name="rest_code_5c24738c4496413a8c53286f9df66f0b-58" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-58"&gt;&lt;/a&gt;   &lt;span class="c1"&gt;-- The delimiter doesn't have to be one character.&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-59" name="rest_code_5c24738c4496413a8c53286f9df66f0b-59" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-59"&gt;&lt;/a&gt;   &lt;span class="n"&gt;S6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unbounded_String&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s"&gt;"foo&amp;lt;=&amp;gt;bar"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-60" name="rest_code_5c24738c4496413a8c53286f9df66f0b-60" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-60"&gt;&lt;/a&gt;   &lt;span class="n"&gt;V6&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;Split&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;S6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;"&amp;lt;=&amp;gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-61" name="rest_code_5c24738c4496413a8c53286f9df66f0b-61" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-61"&gt;&lt;/a&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-62" name="rest_code_5c24738c4496413a8c53286f9df66f0b-62" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-62"&gt;&lt;/a&gt;&lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-63" name="rest_code_5c24738c4496413a8c53286f9df66f0b-63" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-63"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S1"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-64" name="rest_code_5c24738c4496413a8c53286f9df66f0b-64" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-64"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S2"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-65" name="rest_code_5c24738c4496413a8c53286f9df66f0b-65" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-65"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S3"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-66" name="rest_code_5c24738c4496413a8c53286f9df66f0b-66" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-66"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S4"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-67" name="rest_code_5c24738c4496413a8c53286f9df66f0b-67" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-67"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S5"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-68" name="rest_code_5c24738c4496413a8c53286f9df66f0b-68" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-68"&gt;&lt;/a&gt;   &lt;span class="n"&gt;Print_UBS_Vector&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"S6"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;V6&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_5c24738c4496413a8c53286f9df66f0b-69" name="rest_code_5c24738c4496413a8c53286f9df66f0b-69" href="https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/#rest_code_5c24738c4496413a8c53286f9df66f0b-69"&gt;&lt;/a&gt;&lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;split_unbounded&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's the output:&lt;/p&gt;
&lt;pre class="literal-block"&gt;S1: "Hello, World!|I am fine!|How are you?"
    Part 1: "Hello, World!"
    Part 2: "I am fine!"
    Part 3: "How are you?"
S2: ""
    Part 1: ""
S3: "|"
    Part 1: ""
    Part 2: ""
S4: "||"
    Part 1: ""
    Part 2: ""
    Part 3: ""
S5: "one"
    Part 1: "one"
S6: "foo&amp;lt;=&amp;gt;bar"
    Part 1: "foo"
    Part 2: "bar"
&lt;/pre&gt;
&lt;!-- Local Variables:
time-stamp-format: "%Y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "\\*Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
End: --&gt;</description><category>ada</category><category>programming</category><category>splitting strings</category><category>splitting strings in ada</category><guid>https://tkurtbond.github.io/posts/2022/08/05/splitting-strings-on-a-delimiter-in-the-ada-programming-language/</guid><pubDate>Fri, 05 Aug 2022 15:10:39 GMT</pubDate></item><item><title>Using the old version of Ada Mode for Emacs</title><link>https://tkurtbond.github.io/posts/2022/07/09/using-the-old-version-of-ada-mode-for-emacs/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;&lt;em&gt;Last edited: 2022-12-06 14:33:55 EST&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;There are a lot of things to like about the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ada_(programming_language)"&gt;Ada&lt;/a&gt; programming language;
it seems to have a solid core of users, enough to support multiple
commercial implementations and a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Free_software"&gt;free/libre software&lt;/a&gt; implementation
that is part of the &lt;a class="reference external" href="https://gcc.gnu.org/"&gt;GNU Compiler Collection&lt;/a&gt;.  I occasionally use it
myself.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;However:&lt;/strong&gt; I'm sure that the current version of &lt;a class="reference external" href="https://www.nongnu.org/ada-mode/"&gt;Ada Mode&lt;/a&gt; for
&lt;a class="reference external" href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; (available as an &lt;a class="reference external" href="https://elpa.gnu.org/"&gt;ELPA&lt;/a&gt; &lt;a class="reference external" href="https://elpa.gnu.org/packages/ada-mode.html"&gt;package&lt;/a&gt;, and thus not included in
&lt;span class="app"&gt;Emacs&lt;/span&gt; itself), which provides smart editing for the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ada_(programming_language)"&gt;Ada&lt;/a&gt;
programming language, and uses an external parser for the indentation,
fontification&lt;a class="footnote-reference brackets" href="https://tkurtbond.github.io/posts/2022/07/09/using-the-old-version-of-ada-mode-for-emacs/#fontification" id="footnote-reference-1" role="doc-noteref"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;1&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/a&gt;, and navigation engine, is wonderful
if you can get it working, but I have &lt;strong&gt;never&lt;/strong&gt; been able to get it to
work.  My most recent try was today on Fedora 36 using GNAT 12.1.1
20220507 (Red Hat 12.1.1-1).&lt;/p&gt;
&lt;p&gt;Here's what happened when I tried to build the Ada code for the
parser, which is supplied as part of the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;ada-mode&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ ./build.sh
ada_mode_wisi_parse.gpr:44:26: warning: object directory "obj" not found
Setup
   [mkdir]        object directory for project Ada_Mode_Wisi_Parse
Compile
   [Ada]          ada_mode_wisi_lalr_parse.ads
   [Ada]          ada_mode_wisi_lr1_parse.ads
   [Ada]          run_ada_lalr_parse.ads
   [Ada]          run_ada_lr1_parse.ads
   [Ada]          gpr_mode_wisi_parse.ads
   [Ada]          run_gpr_parse.ads
   [Ada]          gpr_query.adb
   [C]            wisitoken_grammar_re2c.c
   [C]            ada_re2c.c
   [C]            gpr_re2c.c
   [Ada]          ada_process_actions.adb
   [Ada]          ada_process_lr1_main.adb
   [Ada]          gen_run_wisi_lr_text_rep_parse.adb
   [Ada]          run_wisi_common_parse.adb
   [Ada]          wisi.adb
gnatcoll-sql.adb:742:07: error: ambiguous expression (cannot resolve "Append")
gnatcoll-sql.adb:742:07: error: possible interpretation at a-coinve.ads:280, instance at gnatcoll-sql.ads:1109
gnatcoll-sql.adb:742:07: error: possible interpretation at a-coinve.ads:270, instance at gnatcoll-sql.ads:1109

   compilation of gpr_query.adb failed

gprbuild: *** compilation phase failed&lt;/pre&gt;
&lt;p&gt;Sigh.  Without the external parser the current &lt;a class="reference external" href="https://www.nongnu.org/ada-mode/"&gt;Ada Mode&lt;/a&gt; is
completely unworkable: it doesn't even do indentation correctly, much
less do fontification.&lt;/p&gt;
&lt;p&gt;However, when I did some Ada work a number of years ago, I was ok
with the version that used to be in &lt;span class="app"&gt;Emacs&lt;/span&gt; itself.  So I dug it
out of the &lt;a class="reference external" href="https://savannah.gnu.org/git/?group=emacs"&gt;Emacs git repository&lt;/a&gt; at &lt;a class="reference external" href="https://savannah.gnu.org"&gt;savannah.gnu.org&lt;/a&gt;.  Basically,
I cloned the git repository and then figured out what commit it was
deleted in by doing:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ git rev-list HEAD -n 1 -- lisp/progmodes/ada-mode.el
a13c64204c8ead966789abf8efe176e4f2d4f599&lt;/pre&gt;
&lt;p&gt;Then I checked out the files involved:&lt;/p&gt;
&lt;pre class="literal-block"&gt;$ git checkout a13c64204c8ead966789abf8efe176e4f2d4f599^ lisp/progmodes/ada-mode.el lisp/progmodes/ada-prj.el lisp/progmodes/ada-stmt.el lisp/progmodes/ada-xref.el doc/misc/ada-mode.texi&lt;/pre&gt;
&lt;p&gt;The &lt;code class="docutils literal"&gt;^&lt;/code&gt; at the end of the commit hash says to get the previous
commit.&lt;/p&gt;
&lt;p&gt;You'll also need &lt;span class="file"&gt;doc/docstyle.texi&lt;/span&gt; and
&lt;span class="file"&gt;doc/doclicense.texi&lt;/span&gt; if you want to build documentation from
&lt;span class="file"&gt;ada-mode.texi&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;And I've put the files in a &lt;a class="reference external" href="https://tkurtbond.github.io/emacs/old-ada-mode.zip"&gt;zip file&lt;/a&gt; for anybody who is in the same
situation as I was, along with the generated documentation files
&lt;span class="file"&gt;.info&lt;/span&gt;, &lt;span class="file"&gt;.html&lt;/span&gt;, and &lt;span class="file"&gt;.pdf&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Just put them somewhere on your &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;load-path&lt;/span&gt;&lt;/code&gt; and add &lt;code class="docutils literal"&gt;(autoload
&lt;span class="pre"&gt;'ada-mode&lt;/span&gt; &lt;span class="pre"&gt;"ada-mode")&lt;/span&gt;&lt;/code&gt; to your emacs config file.&lt;/p&gt;
&lt;p&gt;I'm sure the current &lt;a class="reference external" href="https://www.nongnu.org/ada-mode/"&gt;Ada Mode&lt;/a&gt; has a lot more useful features, and
I'd love to use it, but
this at least lets me edit with automatic indentation, formatting, and
fontification.&lt;/p&gt;
&lt;aside class="footnote-list brackets"&gt;
&lt;aside class="footnote brackets" id="fontification" role="doc-footnote"&gt;
&lt;span class="label"&gt;&lt;span class="fn-bracket"&gt;[&lt;/span&gt;&lt;a role="doc-backlink" href="https://tkurtbond.github.io/posts/2022/07/09/using-the-old-version-of-ada-mode-for-emacs/#footnote-reference-1"&gt;1&lt;/a&gt;&lt;span class="fn-bracket"&gt;]&lt;/span&gt;&lt;/span&gt;
&lt;p&gt;‘Fontification’ is the process of displaying source code with
different font properties (such as color and typeface) for
differing syntactic roles.  &lt;a class="reference external" href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; and many other editors do this
to make it easier to distinguish different parts of the source
code, to help prevent errors.&lt;/p&gt;
&lt;/aside&gt;
&lt;/aside&gt;
&lt;!--  --&gt;
&lt;!-- Local Variables:
time-stamp-format: "%Y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "\\*Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
End: --&gt;</description><category>ada</category><category>ada-mode</category><category>ada-mode.el</category><category>emacs</category><category>free/libre software</category><guid>https://tkurtbond.github.io/posts/2022/07/09/using-the-old-version-of-ada-mode-for-emacs/</guid><pubDate>Sun, 10 Jul 2022 02:20:40 GMT</pubDate></item><item><title>Lisp-style trampolines in Common Lisp, C, Ada, Oberon-2, and Revised Oberon</title><link>https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;&lt;em&gt;Last edited: 2024-01-21 11:32:05 EST&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Are you familiar with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Trampoline_(computing)#High-level_programming"&gt;lisp-style trampolines&lt;/a&gt;?  A trampoline is a
loop that iteratively invokes functions that return functions.  The
previous link will lead you through &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Trampoline_(computing)#cite_note-Baker_1995-1"&gt;CONS Should Not CONS Its
Arguments, Part II: Cheney on the M.T.A.&lt;/a&gt; (&lt;a class="reference external" href="https://dl.acm.org/doi/10.1145/214448.214454"&gt;PDF version&lt;/a&gt;; see p. 17
in the original publication, but that is the first page of the PDF
that link eventually leads to), which, while saying you should just go
ahead and convert to &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Continuation-passing_style"&gt;Continuation-passing style&lt;/a&gt; form (CPS),
mentions in passing &lt;a class="reference external" href="https://dl.acm.org/doi/10.1145/151333.151343"&gt;No assembly required: compiling standard ML to C&lt;/a&gt;,
(see p. 168 in the original publication, which is the page 8 of the
PDF that link eventually leads to) which leads you to &lt;a class="reference external" href="https://dspace.mit.edu/handle/1721.1/6913"&gt;RABBIT: A
Compiler for SCHEME&lt;/a&gt;, where the concept is discussed under the name
the "SCHEME UUO handler" (see p. 23–24).&lt;/p&gt;
&lt;p&gt;Why is this useful?  It allows you to compile a language that requires
proper &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Tail_call"&gt;tail call&lt;/a&gt; optimization to one that does not provide that.
For instance, if you wanted to compile Scheme, which requires proper
tail call optimization, to Common Lisp, which does not require proper
tail call optimization, you can't just translate Scheme functions
directly into Common Lisp functions, because tail calls allocate stack
space, and eventually the stack will run out of space.&lt;/p&gt;
&lt;p&gt;Here's an example that will run forever in any standard confirming
Scheme, &lt;a class="reference external" href="https://tkurtbond.github.io/trampolines/forever.scm"&gt;forever.scm&lt;/a&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code scheme"&gt;&lt;a id="rest_code_096fd17fa42d495aa75bbec7c3e45045-1" name="rest_code_096fd17fa42d495aa75bbec7c3e45045-1" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_096fd17fa42d495aa75bbec7c3e45045-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;;; Recurse forever, because with tail call optimization, the stack&lt;/span&gt;
&lt;a id="rest_code_096fd17fa42d495aa75bbec7c3e45045-2" name="rest_code_096fd17fa42d495aa75bbec7c3e45045-2" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_096fd17fa42d495aa75bbec7c3e45045-2"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;;; never runs out!&lt;/span&gt;
&lt;a id="rest_code_096fd17fa42d495aa75bbec7c3e45045-3" name="rest_code_096fd17fa42d495aa75bbec7c3e45045-3" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_096fd17fa42d495aa75bbec7c3e45045-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_096fd17fa42d495aa75bbec7c3e45045-4" name="rest_code_096fd17fa42d495aa75bbec7c3e45045-4" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_096fd17fa42d495aa75bbec7c3e45045-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_096fd17fa42d495aa75bbec7c3e45045-5" name="rest_code_096fd17fa42d495aa75bbec7c3e45045-5" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_096fd17fa42d495aa75bbec7c3e45045-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_096fd17fa42d495aa75bbec7c3e45045-6" name="rest_code_096fd17fa42d495aa75bbec7c3e45045-6" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_096fd17fa42d495aa75bbec7c3e45045-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;set!&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_096fd17fa42d495aa75bbec7c3e45045-7" name="rest_code_096fd17fa42d495aa75bbec7c3e45045-7" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_096fd17fa42d495aa75bbec7c3e45045-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;display&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"call #"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;display&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;newline&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_096fd17fa42d495aa75bbec7c3e45045-8" name="rest_code_096fd17fa42d495aa75bbec7c3e45045-8" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_096fd17fa42d495aa75bbec7c3e45045-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_096fd17fa42d495aa75bbec7c3e45045-9" name="rest_code_096fd17fa42d495aa75bbec7c3e45045-9" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_096fd17fa42d495aa75bbec7c3e45045-9"&gt;&lt;/a&gt;
&lt;a id="rest_code_096fd17fa42d495aa75bbec7c3e45045-10" name="rest_code_096fd17fa42d495aa75bbec7c3e45045-10" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_096fd17fa42d495aa75bbec7c3e45045-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's &lt;a class="reference external" href="https://tkurtbond.github.io/trampolines/common-lisp/not_forever.lisp"&gt;not_forever.lisp&lt;/a&gt;, the same thing in Common Lisp:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code common-lisp"&gt;&lt;a id="rest_code_962263e95e644166a351d683c88357cc-1" name="rest_code_962263e95e644166a351d683c88357cc-1" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_962263e95e644166a351d683c88357cc-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;;; Recurse until the stack space runs out.&lt;/span&gt;
&lt;a id="rest_code_962263e95e644166a351d683c88357cc-2" name="rest_code_962263e95e644166a351d683c88357cc-2" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_962263e95e644166a351d683c88357cc-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defparameter&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_962263e95e644166a351d683c88357cc-3" name="rest_code_962263e95e644166a351d683c88357cc-3" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_962263e95e644166a351d683c88357cc-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_962263e95e644166a351d683c88357cc-4" name="rest_code_962263e95e644166a351d683c88357cc-4" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_962263e95e644166a351d683c88357cc-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_962263e95e644166a351d683c88357cc-5" name="rest_code_962263e95e644166a351d683c88357cc-5" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_962263e95e644166a351d683c88357cc-5"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;incf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_962263e95e644166a351d683c88357cc-6" name="rest_code_962263e95e644166a351d683c88357cc-6" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_962263e95e644166a351d683c88357cc-6"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"call #~d~%"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_962263e95e644166a351d683c88357cc-7" name="rest_code_962263e95e644166a351d683c88357cc-7" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_962263e95e644166a351d683c88357cc-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_962263e95e644166a351d683c88357cc-8" name="rest_code_962263e95e644166a351d683c88357cc-8" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_962263e95e644166a351d683c88357cc-8"&gt;&lt;/a&gt;
&lt;a id="rest_code_962263e95e644166a351d683c88357cc-9" name="rest_code_962263e95e644166a351d683c88357cc-9" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_962263e95e644166a351d683c88357cc-9"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, some Common Lisp implementations don't do tail call
optimization, and some &lt;strong&gt;do&lt;/strong&gt;.  Some don't do tail call optimization
unless you compile the functions in question.&lt;/p&gt;
&lt;p&gt;So, for instance, if I load that file into GNU CLISP 2.49.92, the
function executes about 4668 times and then &lt;span class="app"&gt;CLISP&lt;/span&gt; dies with the
error message:&lt;/p&gt;
&lt;pre class="literal-block"&gt;*** - Lisp stack overflow. RESET&lt;/pre&gt;
&lt;p&gt;However if I compile that file in &lt;span class="app"&gt;CLISP&lt;/span&gt; with the Common Lisp function
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;compile-file&lt;/span&gt;&lt;/code&gt; and then load the resulting &lt;span class="file"&gt;.fas&lt;/span&gt; file into
&lt;span class="app"&gt;CLISP&lt;/span&gt;, it will run forever, because &lt;span class="app"&gt;CLISP&lt;/span&gt; does tail call
optimization when it compiles code.&lt;/p&gt;
&lt;p&gt;Furthermore, if I load that file into &lt;span class="app"&gt;SBCL&lt;/span&gt; it will run forever,
because &lt;span class="app"&gt;SBCL&lt;/span&gt; does tail call optimization by default.&lt;/p&gt;
&lt;p&gt;&lt;span class="app"&gt;ECL&lt;/span&gt; is another Common Lisp system where if you load that file
into  an interactive session it will die with stack overflow, but if
you compile that file into an executable it will run forever.&lt;/p&gt;
&lt;p&gt;So, suppose you wanted to translate the Scheme code into Common Lisp,
for an implementation that does not do tail call optimization.  You'd
use a trampoline to make sure the stack doesn't overflow.&lt;/p&gt;
&lt;p&gt;Here's &lt;a class="reference external" href="https://tkurtbond.github.io/trampolines/common-lisp/trampoline.lisp"&gt;trampoline.lisp&lt;/a&gt;, a trampoline in Common Lisp that runs
through three functions and then stops, for simplicity:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code common-lisp"&gt;&lt;a id="rest_code_b220a22f72574442a4fae48b0b4d8932-1" name="rest_code_b220a22f72574442a4fae48b0b4d8932-1" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_b220a22f72574442a4fae48b0b4d8932-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;;; Demonstrate lisp-style trampolines.&lt;/span&gt;
&lt;a id="rest_code_b220a22f72574442a4fae48b0b4d8932-2" name="rest_code_b220a22f72574442a4fae48b0b4d8932-2" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_b220a22f72574442a4fae48b0b4d8932-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;baz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_b220a22f72574442a4fae48b0b4d8932-3" name="rest_code_b220a22f72574442a4fae48b0b4d8932-3" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_b220a22f72574442a4fae48b0b4d8932-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"baz~%"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b220a22f72574442a4fae48b0b4d8932-4" name="rest_code_b220a22f72574442a4fae48b0b4d8932-4" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_b220a22f72574442a4fae48b0b4d8932-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="no"&gt;nil&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b220a22f72574442a4fae48b0b4d8932-5" name="rest_code_b220a22f72574442a4fae48b0b4d8932-5" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_b220a22f72574442a4fae48b0b4d8932-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_b220a22f72574442a4fae48b0b4d8932-6" name="rest_code_b220a22f72574442a4fae48b0b4d8932-6" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_b220a22f72574442a4fae48b0b4d8932-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_b220a22f72574442a4fae48b0b4d8932-7" name="rest_code_b220a22f72574442a4fae48b0b4d8932-7" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_b220a22f72574442a4fae48b0b4d8932-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"bar~%"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b220a22f72574442a4fae48b0b4d8932-8" name="rest_code_b220a22f72574442a4fae48b0b4d8932-8" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_b220a22f72574442a4fae48b0b4d8932-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nf"&gt;#'&lt;/span&gt;&lt;span class="nv"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b220a22f72574442a4fae48b0b4d8932-9" name="rest_code_b220a22f72574442a4fae48b0b4d8932-9" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_b220a22f72574442a4fae48b0b4d8932-9"&gt;&lt;/a&gt;
&lt;a id="rest_code_b220a22f72574442a4fae48b0b4d8932-10" name="rest_code_b220a22f72574442a4fae48b0b4d8932-10" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_b220a22f72574442a4fae48b0b4d8932-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_b220a22f72574442a4fae48b0b4d8932-11" name="rest_code_b220a22f72574442a4fae48b0b4d8932-11" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_b220a22f72574442a4fae48b0b4d8932-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"foo~%"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b220a22f72574442a4fae48b0b4d8932-12" name="rest_code_b220a22f72574442a4fae48b0b4d8932-12" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_b220a22f72574442a4fae48b0b4d8932-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nf"&gt;#'&lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b220a22f72574442a4fae48b0b4d8932-13" name="rest_code_b220a22f72574442a4fae48b0b4d8932-13" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_b220a22f72574442a4fae48b0b4d8932-13"&gt;&lt;/a&gt;
&lt;a id="rest_code_b220a22f72574442a4fae48b0b4d8932-14" name="rest_code_b220a22f72574442a4fae48b0b4d8932-14" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_b220a22f72574442a4fae48b0b4d8932-14"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;#'&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_b220a22f72574442a4fae48b0b4d8932-15" name="rest_code_b220a22f72574442a4fae48b0b4d8932-15" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_b220a22f72574442a4fae48b0b4d8932-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;loop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_b220a22f72574442a4fae48b0b4d8932-16" name="rest_code_b220a22f72574442a4fae48b0b4d8932-16" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_b220a22f72574442a4fae48b0b4d8932-16"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;setf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;funcall&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's &lt;a class="reference external" href="https://tkurtbond.github.io/trampolines/common-lisp/trampoline_forever.lisp"&gt;trampoline_forever.lisp&lt;/a&gt;, a trampoline in Common Lisp that
runs forever:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code common-lisp"&gt;&lt;a id="rest_code_6394f0b1277744f7b8bf6312fbedead8-1" name="rest_code_6394f0b1277744f7b8bf6312fbedead8-1" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_6394f0b1277744f7b8bf6312fbedead8-1"&gt;&lt;/a&gt;&lt;span class="c1"&gt;;;; Recurse forever without running out of stack space.&lt;/span&gt;
&lt;a id="rest_code_6394f0b1277744f7b8bf6312fbedead8-2" name="rest_code_6394f0b1277744f7b8bf6312fbedead8-2" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_6394f0b1277744f7b8bf6312fbedead8-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;baz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_6394f0b1277744f7b8bf6312fbedead8-3" name="rest_code_6394f0b1277744f7b8bf6312fbedead8-3" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_6394f0b1277744f7b8bf6312fbedead8-3"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"baz~%"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_6394f0b1277744f7b8bf6312fbedead8-4" name="rest_code_6394f0b1277744f7b8bf6312fbedead8-4" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_6394f0b1277744f7b8bf6312fbedead8-4"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nf"&gt;#'&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_6394f0b1277744f7b8bf6312fbedead8-5" name="rest_code_6394f0b1277744f7b8bf6312fbedead8-5" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_6394f0b1277744f7b8bf6312fbedead8-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_6394f0b1277744f7b8bf6312fbedead8-6" name="rest_code_6394f0b1277744f7b8bf6312fbedead8-6" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_6394f0b1277744f7b8bf6312fbedead8-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_6394f0b1277744f7b8bf6312fbedead8-7" name="rest_code_6394f0b1277744f7b8bf6312fbedead8-7" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_6394f0b1277744f7b8bf6312fbedead8-7"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"bar~%"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_6394f0b1277744f7b8bf6312fbedead8-8" name="rest_code_6394f0b1277744f7b8bf6312fbedead8-8" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_6394f0b1277744f7b8bf6312fbedead8-8"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nf"&gt;#'&lt;/span&gt;&lt;span class="nv"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_6394f0b1277744f7b8bf6312fbedead8-9" name="rest_code_6394f0b1277744f7b8bf6312fbedead8-9" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_6394f0b1277744f7b8bf6312fbedead8-9"&gt;&lt;/a&gt;
&lt;a id="rest_code_6394f0b1277744f7b8bf6312fbedead8-10" name="rest_code_6394f0b1277744f7b8bf6312fbedead8-10" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_6394f0b1277744f7b8bf6312fbedead8-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;a id="rest_code_6394f0b1277744f7b8bf6312fbedead8-11" name="rest_code_6394f0b1277744f7b8bf6312fbedead8-11" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_6394f0b1277744f7b8bf6312fbedead8-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"foo~%"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_6394f0b1277744f7b8bf6312fbedead8-12" name="rest_code_6394f0b1277744f7b8bf6312fbedead8-12" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_6394f0b1277744f7b8bf6312fbedead8-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nf"&gt;#'&lt;/span&gt;&lt;span class="nv"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_6394f0b1277744f7b8bf6312fbedead8-13" name="rest_code_6394f0b1277744f7b8bf6312fbedead8-13" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_6394f0b1277744f7b8bf6312fbedead8-13"&gt;&lt;/a&gt;
&lt;a id="rest_code_6394f0b1277744f7b8bf6312fbedead8-14" name="rest_code_6394f0b1277744f7b8bf6312fbedead8-14" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_6394f0b1277744f7b8bf6312fbedead8-14"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;#'&lt;/span&gt;&lt;span class="nv"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_6394f0b1277744f7b8bf6312fbedead8-15" name="rest_code_6394f0b1277744f7b8bf6312fbedead8-15" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_6394f0b1277744f7b8bf6312fbedead8-15"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;loop&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;for&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;from&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;not&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;null&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a id="rest_code_6394f0b1277744f7b8bf6312fbedead8-16" name="rest_code_6394f0b1277744f7b8bf6312fbedead8-16" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_6394f0b1277744f7b8bf6312fbedead8-16"&gt;&lt;/a&gt;&lt;span class="w"&gt;        &lt;/span&gt;&lt;span class="nb"&gt;do&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;progn&lt;/span&gt;
&lt;a id="rest_code_6394f0b1277744f7b8bf6312fbedead8-17" name="rest_code_6394f0b1277744f7b8bf6312fbedead8-17" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_6394f0b1277744f7b8bf6312fbedead8-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;format&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s"&gt;"trampoline call #~s~%"&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_6394f0b1277744f7b8bf6312fbedead8-18" name="rest_code_6394f0b1277744f7b8bf6312fbedead8-18" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_6394f0b1277744f7b8bf6312fbedead8-18"&gt;&lt;/a&gt;&lt;span class="w"&gt;             &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;setf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;funcall&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nv"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Of course, you can do the same things in C.  First, here's
&lt;a class="reference external" href="https://tkurtbond.github.io/trampolines/c/not_forever.c"&gt;not_forever.c&lt;/a&gt;, a program in C that will (usually) die with a stack
overflow:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code c"&gt;&lt;a id="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-1" name="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-1" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-1"&gt;&lt;/a&gt;&lt;span class="cm"&gt;/* Recurse until stack space runs out.&lt;/span&gt;
&lt;a id="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-2" name="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-2" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-2"&gt;&lt;/a&gt;&lt;span class="cm"&gt;   Unless the compiler does tail-call optimization. */&lt;/span&gt;
&lt;a id="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-3" name="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-3" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-3"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-4" name="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-4" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-5" name="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-5" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-5"&gt;&lt;/a&gt;&lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;                 &lt;/span&gt;&lt;span class="cm"&gt;/* Number of times f has been called. */&lt;/span&gt;
&lt;a id="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-6" name="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-6" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-6"&gt;&lt;/a&gt;
&lt;a id="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-7" name="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-7" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-7"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-8" name="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-8" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-9" name="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-9" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-10" name="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-10" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"call #%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-11" name="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-11" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-12" name="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-12" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-12"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-13" name="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-13" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-13"&gt;&lt;/a&gt;
&lt;a id="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-14" name="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-14" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-14"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-15" name="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-15" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-15"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-16" name="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-16" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-16"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-17" name="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-17" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-18" name="rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-18" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_080f8b4c6c4f44029ec4d2421cd28ed9-18"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I say usually, because tail call optimization is not required by the
standard, and many C compilers do not do it.  For instance, &lt;span class="app"&gt;gcc&lt;/span&gt;
doesn't do tail call optimization &lt;strong&gt;unless&lt;/strong&gt; you specify
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-foptimize-sibling-calls&lt;/span&gt;&lt;/code&gt; or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-O2&lt;/span&gt;&lt;/code&gt;, &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-O3&lt;/span&gt;&lt;/code&gt;, or &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-Os&lt;/span&gt;&lt;/code&gt;.  If I
don't specify any of those options, on my system that program dies
with the error &lt;code class="docutils literal"&gt;Segmentation fault: 11&lt;/code&gt; after call #523932.&lt;/p&gt;
&lt;p&gt;Here's &lt;a class="reference external" href="https://tkurtbond.github.io/trampolines/c/trampoline.c"&gt;trampoline.c&lt;/a&gt;, the limited trampoline in C:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code c"&gt;&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-1" name="rest_code_4f2ce7e85f98445f95272d632b30e606-1" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-1"&gt;&lt;/a&gt;&lt;span class="cm"&gt;/* Demonstrate lisp-style trampolines. */&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-2" name="rest_code_4f2ce7e85f98445f95272d632b30e606-2" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-3" name="rest_code_4f2ce7e85f98445f95272d632b30e606-3" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-4" name="rest_code_4f2ce7e85f98445f95272d632b30e606-4" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;trampoline&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-5" name="rest_code_4f2ce7e85f98445f95272d632b30e606-5" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-6" name="rest_code_4f2ce7e85f98445f95272d632b30e606-6" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-6"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-7" name="rest_code_4f2ce7e85f98445f95272d632b30e606-7" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-7"&gt;&lt;/a&gt;&lt;span class="nf"&gt;baz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-8" name="rest_code_4f2ce7e85f98445f95272d632b30e606-8" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-8"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-9" name="rest_code_4f2ce7e85f98445f95272d632b30e606-9" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-9"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"baz&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-10" name="rest_code_4f2ce7e85f98445f95272d632b30e606-10" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-10"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-11" name="rest_code_4f2ce7e85f98445f95272d632b30e606-11" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-11"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-12" name="rest_code_4f2ce7e85f98445f95272d632b30e606-12" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-13" name="rest_code_4f2ce7e85f98445f95272d632b30e606-13" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-13"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-14" name="rest_code_4f2ce7e85f98445f95272d632b30e606-14" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-14"&gt;&lt;/a&gt;&lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-15" name="rest_code_4f2ce7e85f98445f95272d632b30e606-15" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-15"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-16" name="rest_code_4f2ce7e85f98445f95272d632b30e606-16" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-16"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bar&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-17" name="rest_code_4f2ce7e85f98445f95272d632b30e606-17" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-17"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-18" name="rest_code_4f2ce7e85f98445f95272d632b30e606-18" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-18"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-19" name="rest_code_4f2ce7e85f98445f95272d632b30e606-19" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-19"&gt;&lt;/a&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-20" name="rest_code_4f2ce7e85f98445f95272d632b30e606-20" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-20"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-21" name="rest_code_4f2ce7e85f98445f95272d632b30e606-21" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-21"&gt;&lt;/a&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-22" name="rest_code_4f2ce7e85f98445f95272d632b30e606-22" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-22"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-23" name="rest_code_4f2ce7e85f98445f95272d632b30e606-23" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-23"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"foo&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-24" name="rest_code_4f2ce7e85f98445f95272d632b30e606-24" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-24"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-25" name="rest_code_4f2ce7e85f98445f95272d632b30e606-25" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-25"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-26" name="rest_code_4f2ce7e85f98445f95272d632b30e606-26" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-26"&gt;&lt;/a&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-27" name="rest_code_4f2ce7e85f98445f95272d632b30e606-27" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-27"&gt;&lt;/a&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-28" name="rest_code_4f2ce7e85f98445f95272d632b30e606-28" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-28"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-29" name="rest_code_4f2ce7e85f98445f95272d632b30e606-29" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-29"&gt;&lt;/a&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-30" name="rest_code_4f2ce7e85f98445f95272d632b30e606-30" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-30"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-31" name="rest_code_4f2ce7e85f98445f95272d632b30e606-31" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-31"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;trampoline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-32" name="rest_code_4f2ce7e85f98445f95272d632b30e606-32" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-32"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-33" name="rest_code_4f2ce7e85f98445f95272d632b30e606-33" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-33"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-34" name="rest_code_4f2ce7e85f98445f95272d632b30e606-34" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-34"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_4f2ce7e85f98445f95272d632b30e606-35" name="rest_code_4f2ce7e85f98445f95272d632b30e606-35" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_4f2ce7e85f98445f95272d632b30e606-35"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice this works by converting pointers to functions to pointers to void
— it doesn't even require any explicit casting!&lt;/p&gt;
&lt;p&gt;And here's &lt;a class="reference external" href="https://tkurtbond.github.io/trampolines/c/trampoline_forever.c"&gt;trampoline_forever.c&lt;/a&gt;, the trampoline that runs forever:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code c"&gt;&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-1" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-1" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-1"&gt;&lt;/a&gt;&lt;span class="cm"&gt;/* Recurse forever without running out of stack spacc. */&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-2" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-2" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-2"&gt;&lt;/a&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-3" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-3" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-4" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-4" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-4"&gt;&lt;/a&gt;&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;trampoline&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-5" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-5" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-6" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-6" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-6"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;               &lt;/span&gt;&lt;span class="cm"&gt;/* Forward declaration. */&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-7" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-7" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-8" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-8" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-8"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-9" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-9" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-9"&gt;&lt;/a&gt;&lt;span class="nf"&gt;baz&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-10" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-10" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-10"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-11" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-11" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-11"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"baz&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-12" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-12" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-12"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-13" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-13" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-14" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-14" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-14"&gt;&lt;/a&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-15" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-15" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-15"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-16" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-16" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-16"&gt;&lt;/a&gt;&lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-17" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-17" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-17"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-18" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-18" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-18"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bar&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-19" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-19" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-19"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-20" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-20" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-20"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-21" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-21" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-21"&gt;&lt;/a&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-22" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-22" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-22"&gt;&lt;/a&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-23" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-23" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-23"&gt;&lt;/a&gt;&lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-24" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-24" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-24"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-25" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-25" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-25"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"foo&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-26" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-26" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-26"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-27" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-27" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-27"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-28" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-28" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-28"&gt;&lt;/a&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-29" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-29" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-29"&gt;&lt;/a&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-30" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-30" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-30"&gt;&lt;/a&gt;&lt;span class="kt"&gt;int&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-31" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-31" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-31"&gt;&lt;/a&gt;&lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-32" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-32" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-32"&gt;&lt;/a&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-33" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-33" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-33"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="n"&gt;trampoline&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-34" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-34" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-34"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-35" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-35" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-35"&gt;&lt;/a&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-36" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-36" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-36"&gt;&lt;/a&gt;&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_7ab67d6e73a74f3b95b4892f627e9418-37" name="rest_code_7ab67d6e73a74f3b95b4892f627e9418-37" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7ab67d6e73a74f3b95b4892f627e9418-37"&gt;&lt;/a&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, here's where C's weak typing lets it get away with things that
more strongly typed languages don't.  Notice the declaration of the
trampoline type:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code c"&gt;&lt;a id="rest_code_7bb80030465446a6827cf3477f198a8c-1" name="rest_code_7bb80030465446a6827cf3477f198a8c-1" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_7bb80030465446a6827cf3477f198a8c-1"&gt;&lt;/a&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;def&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;trampoline&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p id="mentioning-recursive-types"&gt;Notice how it returns a &lt;code class="docutils literal"&gt;void *&lt;/code&gt;, instead of something more
specific?  That's because if it tried to return something more
specific, it would have to a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Recursive_data_type"&gt;recursive type&lt;/a&gt;: that is to say, while
defining the type &lt;code class="docutils literal"&gt;trampoline&lt;/code&gt;, you would use a reference to the
type while defining the type.  It would look something like this:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code c"&gt;&lt;a id="rest_code_a32f532c1299409696c0950ee3fe2f39-1" name="rest_code_a32f532c1299409696c0950ee3fe2f39-1" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_a32f532c1299409696c0950ee3fe2f39-1"&gt;&lt;/a&gt;&lt;span class="k"&gt;typedef&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;trampoline&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;trampoline&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and that results in &lt;span class="app"&gt;gcc&lt;/span&gt; issuing the following error:&lt;/p&gt;
&lt;pre class="literal-block"&gt;error: unknown type name 'trampoline'&lt;/pre&gt;
&lt;p&gt;Very few traditional programming languages allow this.  It isn't a
problem in Scheme or Common Lisp because those languages use strong
dynamic typing, where the types are checked at runtime.&lt;/p&gt;
&lt;p&gt;So how do you do this in languages with strong static typing?&lt;/p&gt;
&lt;p&gt;Well, let's try this in some of the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Oberon_(programming_language)"&gt;Oberon&lt;/a&gt; programming language
dialects.  &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Oberon_(programming_language)"&gt;Oberon&lt;/a&gt; was designed and implemented by Niklaus Wirth
(&lt;a class="reference external" href="https://people.inf.ethz.ch/wirth/"&gt;NW1&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Niklaus_Wirth"&gt;NW2&lt;/a&gt;) as a simplification and generalization of his earlier
languages &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Pascal_(programming_language)"&gt;Pascal&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Modula"&gt;Modula&lt;/a&gt;, and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Modula-2"&gt;Modula-2&lt;/a&gt;.  (Here's &lt;a class="reference external" href="https://people.inf.ethz.ch/wirth/Oberon/Oberon.Report.pdf"&gt;The Programming
Language Oberon (1990)&lt;/a&gt;, the original Oberon language report, in PDF
for reference.)  I find the original Oberon admirable for its
simplicity, strong typing, understandable syntax, and its introduction
of &lt;a class="reference external" href="https://dl.acm.org/doi/abs/10.1145/42190.46167"&gt;Type Extensions&lt;/a&gt; (which organizes &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Record_(computer_science)"&gt;record types&lt;/a&gt; in a
inheritance hierarchy, which with the use of procedure variables
enables object oriented programming in a particularly straightforward
and flexible way) but struggle with its minimalism and how its
standard libraries differ in paradigm from the standard Unix
libraries, since Oberon was used to implement a new operating system,
the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Oberon_(operating_system)"&gt;Oberon System&lt;/a&gt; with its own completely unique &lt;a class="reference external" href="https://en.wikipedia.org/wiki/API"&gt;API&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Oberon_(programming_language)"&gt;Oberon&lt;/a&gt; has a number of dialects. I'm most fond of &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Oberon-2"&gt;Oberon-2&lt;/a&gt;, which
was the second language in the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Oberon_(programming_language)"&gt;Oberon&lt;/a&gt; family, developed by &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Hanspeter_M%C3%B6ssenb%C3%B6ck"&gt;Hanspeter
Mössenböck&lt;/a&gt; and Niklaus Wirth.  It is a little less minimalist than
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Oberon_(programming_language)"&gt;Oberon&lt;/a&gt;, and among a few other things adds type-bound procedures to
the record hierarchy provided by &lt;a class="reference external" href="https://dl.acm.org/doi/abs/10.1145/42190.46167"&gt;Type Extensions&lt;/a&gt;, providing a
appealingly simple and direct design for object-oriented programming
that was later adopted by the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ada_(programming_language)"&gt;Ada&lt;/a&gt; programming language in a more
complicated and subtle version, as might be expected by &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ada_(programming_language)"&gt;Ada&lt;/a&gt;'s
plethora of design goals and constraints.  (Here's a couple of papers
that mention it: &lt;a class="reference external" href="https://dl.acm.org/doi/10.1145/122028.122033"&gt;Object-oriented programming through type
extension in Ada 9X&lt;/a&gt; (&lt;a class="reference external" href="https://dl.acm.org/doi/pdf/10.1145/122028.122033"&gt;ADAOO1PDF&lt;/a&gt;) and &lt;a class="reference external" href="http://citeseer.ist.psu.edu/viewdoc/summary?doi=10.1.1.167.7445&amp;amp;rank=1"&gt;Integrating Object-Oriented
Programming and Protected Objects in Ada 95&lt;/a&gt; (&lt;a class="reference external" href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.167.7445&amp;amp;rep=rep1&amp;amp;type=pdf"&gt;ADAOO2PDF&lt;/a&gt;).  I wish I
knew of a reference that discussed explicitly the process of choosing
&lt;a class="reference external" href="https://dl.acm.org/doi/abs/10.1145/42190.46167"&gt;Type Extensions&lt;/a&gt; for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ada_(programming_language)"&gt;Ada&lt;/a&gt; and how they were adopted and adapted in
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ada_(programming_language)"&gt;Ada&lt;/a&gt;.)&lt;/p&gt;
&lt;p&gt;Here's a copy of the Oberon-2 language report in PDF (&lt;a class="reference external" href="https://tkurtbond.github.io/Oberon-2/Oberon2.pdf"&gt;O2PDF&lt;/a&gt;) and HTML
(&lt;a class="reference external" href="https://web.archive.org/web/20151104101932/https://cseweb.ucsd.edu/~wgg/CSE131B/oberon2.htm"&gt;O2HTML&lt;/a&gt;), for reference.&lt;/p&gt;
&lt;p&gt;Anyway, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Oberon-2"&gt;Oberon-2&lt;/a&gt; has procedure types and procedure variables, so one
would think it would be simple to implement trampolines in &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Oberon-2"&gt;Oberon-2&lt;/a&gt;,
without messing about with pointers.  It turns out to be more
complicated than one would think.&lt;/p&gt;
&lt;p&gt;I'm using &lt;a class="reference external" href="https://github.com/vishaps/voc"&gt;Vishap Oberon&lt;/a&gt;, a free and open source Oberon-2 compiler,
by the way.&lt;/p&gt;
&lt;p&gt;First, here's &lt;a class="reference external" href="https://tkurtbond.github.io/trampolines/oberon-2/NotForever.Mod"&gt;NotForever.Mod&lt;/a&gt;, the standard program with a recursive
function procedure that will overflow the stack.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code modula2"&gt;&lt;a id="rest_code_75240e1614ff42b8aaaf24acd6fa1694-1" name="rest_code_75240e1614ff42b8aaaf24acd6fa1694-1" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_75240e1614ff42b8aaaf24acd6fa1694-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;MODULE&lt;/span&gt; &lt;span class="n"&gt;NotForever&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;              &lt;span class="cm"&gt;(* Recurse until stack space runs out. *)&lt;/span&gt;
&lt;a id="rest_code_75240e1614ff42b8aaaf24acd6fa1694-2" name="rest_code_75240e1614ff42b8aaaf24acd6fa1694-2" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_75240e1614ff42b8aaaf24acd6fa1694-2"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;IMPORT&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_75240e1614ff42b8aaaf24acd6fa1694-3" name="rest_code_75240e1614ff42b8aaaf24acd6fa1694-3" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_75240e1614ff42b8aaaf24acd6fa1694-3"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;VAR&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;LONGINT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;               &lt;span class="cm"&gt;(* Number of times f has been called. *)&lt;/span&gt;
&lt;a id="rest_code_75240e1614ff42b8aaaf24acd6fa1694-4" name="rest_code_75240e1614ff42b8aaaf24acd6fa1694-4" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_75240e1614ff42b8aaaf24acd6fa1694-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_75240e1614ff42b8aaaf24acd6fa1694-5" name="rest_code_75240e1614ff42b8aaaf24acd6fa1694-5" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_75240e1614ff42b8aaaf24acd6fa1694-5"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_75240e1614ff42b8aaaf24acd6fa1694-6" name="rest_code_75240e1614ff42b8aaaf24acd6fa1694-6" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_75240e1614ff42b8aaaf24acd6fa1694-6"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_75240e1614ff42b8aaaf24acd6fa1694-7" name="rest_code_75240e1614ff42b8aaaf24acd6fa1694-7" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_75240e1614ff42b8aaaf24acd6fa1694-7"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;INC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_75240e1614ff42b8aaaf24acd6fa1694-8" name="rest_code_75240e1614ff42b8aaaf24acd6fa1694-8" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_75240e1614ff42b8aaaf24acd6fa1694-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"call #"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_75240e1614ff42b8aaaf24acd6fa1694-9" name="rest_code_75240e1614ff42b8aaaf24acd6fa1694-9" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_75240e1614ff42b8aaaf24acd6fa1694-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_75240e1614ff42b8aaaf24acd6fa1694-10" name="rest_code_75240e1614ff42b8aaaf24acd6fa1694-10" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_75240e1614ff42b8aaaf24acd6fa1694-10"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_75240e1614ff42b8aaaf24acd6fa1694-11" name="rest_code_75240e1614ff42b8aaaf24acd6fa1694-11" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_75240e1614ff42b8aaaf24acd6fa1694-11"&gt;&lt;/a&gt;
&lt;a id="rest_code_75240e1614ff42b8aaaf24acd6fa1694-12" name="rest_code_75240e1614ff42b8aaaf24acd6fa1694-12" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_75240e1614ff42b8aaaf24acd6fa1694-12"&gt;&lt;/a&gt;&lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_75240e1614ff42b8aaaf24acd6fa1694-13" name="rest_code_75240e1614ff42b8aaaf24acd6fa1694-13" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_75240e1614ff42b8aaaf24acd6fa1694-13"&gt;&lt;/a&gt;  &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_75240e1614ff42b8aaaf24acd6fa1694-14" name="rest_code_75240e1614ff42b8aaaf24acd6fa1694-14" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_75240e1614ff42b8aaaf24acd6fa1694-14"&gt;&lt;/a&gt;  &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_75240e1614ff42b8aaaf24acd6fa1694-15" name="rest_code_75240e1614ff42b8aaaf24acd6fa1694-15" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_75240e1614ff42b8aaaf24acd6fa1694-15"&gt;&lt;/a&gt;&lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;NotForever&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On my system, this program dies with with the error &lt;code class="docutils literal"&gt;Segmentation
fault: 11&lt;/code&gt; after call #524008.&lt;/p&gt;
&lt;p&gt;Now on to trampolines.  In theory we should be able to declare a type
that is a function procedure that returns other function procedures.
Here's the first attempt at the limited trampoline,
&lt;a class="reference external" href="https://tkurtbond.github.io/trampolines/oberon-2/TrampolineBroken.Mod"&gt;TrampolineBroken.Mod&lt;/a&gt;.&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code modula2"&gt;&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-1" name="rest_code_da6279691fa746fb856344325f7d631a-1" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;MODULE&lt;/span&gt; &lt;span class="n"&gt;TrampolineBroken&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;              &lt;span class="cm"&gt;(* Fail to demonstrate lisp-style trampolines. *)&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-2" name="rest_code_da6279691fa746fb856344325f7d631a-2" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-2"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;IMPORT&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-3" name="rest_code_da6279691fa746fb856344325f7d631a-3" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-4" name="rest_code_da6279691fa746fb856344325f7d631a-4" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-4"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;TYPE&lt;/span&gt; &lt;span class="n"&gt;Thunk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Thunk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;(* This is an error. *)&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-5" name="rest_code_da6279691fa746fb856344325f7d631a-5" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-6" name="rest_code_da6279691fa746fb856344325f7d631a-6" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-6"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;VAR&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Thunk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-7" name="rest_code_da6279691fa746fb856344325f7d631a-7" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-8" name="rest_code_da6279691fa746fb856344325f7d631a-8" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-8"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Thunk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-9" name="rest_code_da6279691fa746fb856344325f7d631a-9" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-9"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-10" name="rest_code_da6279691fa746fb856344325f7d631a-10" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"baz"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-11" name="rest_code_da6279691fa746fb856344325f7d631a-11" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;NIL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-12" name="rest_code_da6279691fa746fb856344325f7d631a-12" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-12"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-13" name="rest_code_da6279691fa746fb856344325f7d631a-13" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-13"&gt;&lt;/a&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-14" name="rest_code_da6279691fa746fb856344325f7d631a-14" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-14"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Thunk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-15" name="rest_code_da6279691fa746fb856344325f7d631a-15" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-15"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-16" name="rest_code_da6279691fa746fb856344325f7d631a-16" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-16"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-17" name="rest_code_da6279691fa746fb856344325f7d631a-17" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-17"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-18" name="rest_code_da6279691fa746fb856344325f7d631a-18" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-18"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-19" name="rest_code_da6279691fa746fb856344325f7d631a-19" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-19"&gt;&lt;/a&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-20" name="rest_code_da6279691fa746fb856344325f7d631a-20" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-20"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;():&lt;/span&gt; &lt;span class="n"&gt;Thunk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-21" name="rest_code_da6279691fa746fb856344325f7d631a-21" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-21"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-22" name="rest_code_da6279691fa746fb856344325f7d631a-22" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-22"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-23" name="rest_code_da6279691fa746fb856344325f7d631a-23" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-23"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-24" name="rest_code_da6279691fa746fb856344325f7d631a-24" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-24"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-25" name="rest_code_da6279691fa746fb856344325f7d631a-25" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-25"&gt;&lt;/a&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-26" name="rest_code_da6279691fa746fb856344325f7d631a-26" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-26"&gt;&lt;/a&gt;&lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-27" name="rest_code_da6279691fa746fb856344325f7d631a-27" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-27"&gt;&lt;/a&gt;  &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-28" name="rest_code_da6279691fa746fb856344325f7d631a-28" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-28"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;WHILE&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nb"&gt;NIL&lt;/span&gt; &lt;span class="kr"&gt;DO&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-29" name="rest_code_da6279691fa746fb856344325f7d631a-29" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-29"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-30" name="rest_code_da6279691fa746fb856344325f7d631a-30" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-30"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_da6279691fa746fb856344325f7d631a-31" name="rest_code_da6279691fa746fb856344325f7d631a-31" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_da6279691fa746fb856344325f7d631a-31"&gt;&lt;/a&gt;&lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;TrampolineBroken&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Unfortunately, trying to compile this dies with the following error
message:&lt;/p&gt;
&lt;pre class="literal-block"&gt;TrampolineBroken.Mod  Compiling TrampolineBroken.

   4:   TYPE Thunk = PROCEDURE (): Thunk;
                             ^
    pos   126  err 244  cyclic type definition not allowed

Module compilation failed.&lt;/pre&gt;
&lt;p&gt;As mentioned &lt;a class="reference external" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#mentioning-recursive-types"&gt;above&lt;/a&gt;, this is a case of a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Recursive_data_type"&gt;recursive type&lt;/a&gt;.  Well, drat.&lt;/p&gt;
&lt;p&gt;At this point the immediate reaction is to look at the C version and
try to hack up something analogous using functionality from
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Oberon-2"&gt;Oberon-2&lt;/a&gt;'s &lt;code class="docutils literal"&gt;SYSTEM&lt;/code&gt; module, but that way lies madness, difficulty,
and type errors.  Instead, you have to step back and think about
things from another viewpoint.  The problem is that we can't declare a
type for a function procedure that returns another function procedure
of its type, because that is recursive.  Instead of trying for a
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/Recursive_data_type"&gt;recursive type&lt;/a&gt;, what if we switched to storing the next procedure
to be run in a global variable, &lt;code class="docutils literal"&gt;next&lt;/code&gt;, and having each procedure in
the chain set that to the procedure that should run next?  That should
work!&lt;/p&gt;
&lt;p&gt;Here's &lt;a class="reference external" href="https://tkurtbond.github.io/trampolines/oberon-2/Trampoline.Mod"&gt;Trampoline.Mod&lt;/a&gt;, a version that works!&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code modula2"&gt;&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-1" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-1" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;MODULE&lt;/span&gt; &lt;span class="n"&gt;Trampoline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;              &lt;span class="cm"&gt;(* Demonstrate lisp-style trampolines. *)&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-2" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-2" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-2"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;IMPORT&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-3" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-3" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-4" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-4" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-4"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;TYPE&lt;/span&gt; &lt;span class="n"&gt;Thunk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-5" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-5" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-6" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-6" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-6"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;VAR&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Thunk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;              &lt;span class="cm"&gt;(* Next procedure to be called. *)&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-7" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-7" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-8" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-8" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-8"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-9" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-9" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-9"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-10" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-10" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"baz"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-11" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-11" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;NIL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-12" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-12" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-12"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-13" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-13" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-13"&gt;&lt;/a&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-14" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-14" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-14"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-15" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-15" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-15"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-16" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-16" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-16"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-17" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-17" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-17"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-18" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-18" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-18"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-19" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-19" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-19"&gt;&lt;/a&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-20" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-20" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-20"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-21" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-21" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-21"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-22" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-22" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-22"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-23" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-23" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-23"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-24" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-24" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-24"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-25" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-25" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-25"&gt;&lt;/a&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-26" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-26" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-26"&gt;&lt;/a&gt;&lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-27" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-27" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-27"&gt;&lt;/a&gt;  &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-28" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-28" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-28"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;WHILE&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nb"&gt;NIL&lt;/span&gt; &lt;span class="kr"&gt;DO&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-29" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-29" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-29"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-30" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-30" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-30"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_c0ce5aad01fe4f37adab745007d202d8-31" name="rest_code_c0ce5aad01fe4f37adab745007d202d8-31" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_c0ce5aad01fe4f37adab745007d202d8-31"&gt;&lt;/a&gt;&lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;Trampoline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here's &lt;a class="reference external" href="https://tkurtbond.github.io/trampolines/oberon-2/TrampolineForever.Mod"&gt;TrampolineForever.Mod&lt;/a&gt;, which also works!&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code modula2"&gt;&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-1" name="rest_code_2e43905e6da44676b9edca5066d065c8-1" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;MODULE&lt;/span&gt; &lt;span class="n"&gt;TrampolineForever&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-2" name="rest_code_2e43905e6da44676b9edca5066d065c8-2" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-2"&gt;&lt;/a&gt;  &lt;span class="cm"&gt;(* Recurse forever without running out of stack space.  *)&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-3" name="rest_code_2e43905e6da44676b9edca5066d065c8-3" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-3"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;IMPORT&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-4" name="rest_code_2e43905e6da44676b9edca5066d065c8-4" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-5" name="rest_code_2e43905e6da44676b9edca5066d065c8-5" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-5"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;TYPE&lt;/span&gt; &lt;span class="n"&gt;Thunk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-6" name="rest_code_2e43905e6da44676b9edca5066d065c8-6" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-6"&gt;&lt;/a&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-7" name="rest_code_2e43905e6da44676b9edca5066d065c8-7" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-7"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;VAR&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-8" name="rest_code_2e43905e6da44676b9edca5066d065c8-8" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Thunk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="cm"&gt;(* Next procedure to be called. *)&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-9" name="rest_code_2e43905e6da44676b9edca5066d065c8-9" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="cm"&gt;(* Number of times through the trampoline. *)&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-10" name="rest_code_2e43905e6da44676b9edca5066d065c8-10" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-10"&gt;&lt;/a&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-11" name="rest_code_2e43905e6da44676b9edca5066d065c8-11" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-11"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;(* Forward declaration. *)&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-12" name="rest_code_2e43905e6da44676b9edca5066d065c8-12" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-13" name="rest_code_2e43905e6da44676b9edca5066d065c8-13" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-13"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-14" name="rest_code_2e43905e6da44676b9edca5066d065c8-14" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-14"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-15" name="rest_code_2e43905e6da44676b9edca5066d065c8-15" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-15"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"baz"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-16" name="rest_code_2e43905e6da44676b9edca5066d065c8-16" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-16"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-17" name="rest_code_2e43905e6da44676b9edca5066d065c8-17" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-17"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-18" name="rest_code_2e43905e6da44676b9edca5066d065c8-18" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-18"&gt;&lt;/a&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-19" name="rest_code_2e43905e6da44676b9edca5066d065c8-19" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-19"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-20" name="rest_code_2e43905e6da44676b9edca5066d065c8-20" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-20"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-21" name="rest_code_2e43905e6da44676b9edca5066d065c8-21" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-21"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-22" name="rest_code_2e43905e6da44676b9edca5066d065c8-22" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-22"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-23" name="rest_code_2e43905e6da44676b9edca5066d065c8-23" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-23"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-24" name="rest_code_2e43905e6da44676b9edca5066d065c8-24" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-24"&gt;&lt;/a&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-25" name="rest_code_2e43905e6da44676b9edca5066d065c8-25" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-25"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-26" name="rest_code_2e43905e6da44676b9edca5066d065c8-26" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-26"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-27" name="rest_code_2e43905e6da44676b9edca5066d065c8-27" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-27"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-28" name="rest_code_2e43905e6da44676b9edca5066d065c8-28" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-28"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-29" name="rest_code_2e43905e6da44676b9edca5066d065c8-29" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-29"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-30" name="rest_code_2e43905e6da44676b9edca5066d065c8-30" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-30"&gt;&lt;/a&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-31" name="rest_code_2e43905e6da44676b9edca5066d065c8-31" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-31"&gt;&lt;/a&gt;&lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-32" name="rest_code_2e43905e6da44676b9edca5066d065c8-32" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-32"&gt;&lt;/a&gt;  &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-33" name="rest_code_2e43905e6da44676b9edca5066d065c8-33" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-33"&gt;&lt;/a&gt;  &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-34" name="rest_code_2e43905e6da44676b9edca5066d065c8-34" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-34"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;WHILE&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nb"&gt;NIL&lt;/span&gt; &lt;span class="kr"&gt;DO&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-35" name="rest_code_2e43905e6da44676b9edca5066d065c8-35" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-35"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;INC&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-36" name="rest_code_2e43905e6da44676b9edca5066d065c8-36" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-36"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"call #"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-37" name="rest_code_2e43905e6da44676b9edca5066d065c8-37" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-37"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-38" name="rest_code_2e43905e6da44676b9edca5066d065c8-38" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-38"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_2e43905e6da44676b9edca5066d065c8-39" name="rest_code_2e43905e6da44676b9edca5066d065c8-39" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_2e43905e6da44676b9edca5066d065c8-39"&gt;&lt;/a&gt;&lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;TrampolineForever&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Wirth has continued to work on Oberon, producing an even more
minimalist revision, often know as Oberon-07, or &lt;a class="reference external" href="https://people.inf.ethz.ch/wirth/Oberon/index.html"&gt;Revised Oberon&lt;/a&gt;.
(Here's the &lt;a class="reference external" href="https://people.inf.ethz.ch/wirth/Oberon/Oberon07.Report.pdf"&gt;The Programming Language Oberon-07 (Revised Oberon)&lt;/a&gt; in
PDF, for reference.)  Unfortunately, he removed forward declarations
and the &lt;code class="docutils literal"&gt;LONGINT&lt;/code&gt; type, which means we have to make some minor
changes.&lt;/p&gt;
&lt;p&gt;I'm using OBNC (&lt;a class="reference external" href="https://miasap.se/obnc/"&gt;OBNC1&lt;/a&gt;, &lt;a class="reference external" href="https://github.com/GunterMueller/OBNC"&gt;OBNC2&lt;/a&gt;) for &lt;a class="reference external" href="https://people.inf.ethz.ch/wirth/Oberon/index.html"&gt;Revised Oberon&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's the &lt;a class="reference external" href="https://tkurtbond.github.io/trampolines/revised-oberon/NotForever.Mod"&gt;Revised Oberon NotForever.Mod&lt;/a&gt;, with &lt;code class="docutils literal"&gt;LONGINT&lt;/code&gt; replaced
by &lt;code class="docutils literal"&gt;INTEGER&lt;/code&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code modula2"&gt;&lt;a id="rest_code_146baaf618e54089b1d45eba951e116e-1" name="rest_code_146baaf618e54089b1d45eba951e116e-1" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_146baaf618e54089b1d45eba951e116e-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;MODULE&lt;/span&gt; &lt;span class="n"&gt;NotForever&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;           &lt;span class="cm"&gt;(* Recurse until stack space runs out. *)&lt;/span&gt;
&lt;a id="rest_code_146baaf618e54089b1d45eba951e116e-2" name="rest_code_146baaf618e54089b1d45eba951e116e-2" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_146baaf618e54089b1d45eba951e116e-2"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;IMPORT&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_146baaf618e54089b1d45eba951e116e-3" name="rest_code_146baaf618e54089b1d45eba951e116e-3" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_146baaf618e54089b1d45eba951e116e-3"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;VAR&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;            &lt;span class="cm"&gt;(* Number of times f has been called. *)&lt;/span&gt;
&lt;a id="rest_code_146baaf618e54089b1d45eba951e116e-4" name="rest_code_146baaf618e54089b1d45eba951e116e-4" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_146baaf618e54089b1d45eba951e116e-4"&gt;&lt;/a&gt;    &lt;span class="cm"&gt;(* Alas, no more LONGINT. *)&lt;/span&gt;
&lt;a id="rest_code_146baaf618e54089b1d45eba951e116e-5" name="rest_code_146baaf618e54089b1d45eba951e116e-5" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_146baaf618e54089b1d45eba951e116e-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_146baaf618e54089b1d45eba951e116e-6" name="rest_code_146baaf618e54089b1d45eba951e116e-6" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_146baaf618e54089b1d45eba951e116e-6"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_146baaf618e54089b1d45eba951e116e-7" name="rest_code_146baaf618e54089b1d45eba951e116e-7" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_146baaf618e54089b1d45eba951e116e-7"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_146baaf618e54089b1d45eba951e116e-8" name="rest_code_146baaf618e54089b1d45eba951e116e-8" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_146baaf618e54089b1d45eba951e116e-8"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;INC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_146baaf618e54089b1d45eba951e116e-9" name="rest_code_146baaf618e54089b1d45eba951e116e-9" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_146baaf618e54089b1d45eba951e116e-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"call #"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_146baaf618e54089b1d45eba951e116e-10" name="rest_code_146baaf618e54089b1d45eba951e116e-10" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_146baaf618e54089b1d45eba951e116e-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_146baaf618e54089b1d45eba951e116e-11" name="rest_code_146baaf618e54089b1d45eba951e116e-11" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_146baaf618e54089b1d45eba951e116e-11"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_146baaf618e54089b1d45eba951e116e-12" name="rest_code_146baaf618e54089b1d45eba951e116e-12" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_146baaf618e54089b1d45eba951e116e-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_146baaf618e54089b1d45eba951e116e-13" name="rest_code_146baaf618e54089b1d45eba951e116e-13" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_146baaf618e54089b1d45eba951e116e-13"&gt;&lt;/a&gt;&lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_146baaf618e54089b1d45eba951e116e-14" name="rest_code_146baaf618e54089b1d45eba951e116e-14" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_146baaf618e54089b1d45eba951e116e-14"&gt;&lt;/a&gt;  &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_146baaf618e54089b1d45eba951e116e-15" name="rest_code_146baaf618e54089b1d45eba951e116e-15" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_146baaf618e54089b1d45eba951e116e-15"&gt;&lt;/a&gt;  &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_146baaf618e54089b1d45eba951e116e-16" name="rest_code_146baaf618e54089b1d45eba951e116e-16" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_146baaf618e54089b1d45eba951e116e-16"&gt;&lt;/a&gt;&lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;NotForever&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's the &lt;a class="reference external" href="https://tkurtbond.github.io/trampolines/revised-oberon/Trampoline.Mod"&gt;Revised Oberon Trampoline.Mod&lt;/a&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code modula2"&gt;&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-1" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-1" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;MODULE&lt;/span&gt; &lt;span class="n"&gt;Trampoline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;              &lt;span class="cm"&gt;(* Demonstrate lisp-style trampolines. *)&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-2" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-2" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-2"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;IMPORT&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-3" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-3" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-3"&gt;&lt;/a&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-4" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-4" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-4"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;TYPE&lt;/span&gt; &lt;span class="n"&gt;Thunk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-5" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-5" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-6" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-6" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-6"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;VAR&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Thunk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;              &lt;span class="cm"&gt;(* Next procedure to be called. *)&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-7" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-7" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-8" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-8" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-8"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-9" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-9" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-9"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-10" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-10" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"baz"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-11" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-11" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-11"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="nb"&gt;NIL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-12" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-12" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-12"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-13" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-13" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-13"&gt;&lt;/a&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-14" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-14" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-14"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-15" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-15" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-15"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-16" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-16" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-16"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-17" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-17" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-17"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-18" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-18" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-18"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-19" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-19" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-19"&gt;&lt;/a&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-20" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-20" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-20"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-21" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-21" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-21"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-22" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-22" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-22"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-23" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-23" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-23"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-24" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-24" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-24"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-25" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-25" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-25"&gt;&lt;/a&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-26" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-26" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-26"&gt;&lt;/a&gt;&lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-27" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-27" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-27"&gt;&lt;/a&gt;  &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-28" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-28" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-28"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;WHILE&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nb"&gt;NIL&lt;/span&gt; &lt;span class="kr"&gt;DO&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-29" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-29" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-29"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-30" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-30" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-30"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_97e66a3c60e64cca80b06e2a8126615c-31" name="rest_code_97e66a3c60e64cca80b06e2a8126615c-31" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_97e66a3c60e64cca80b06e2a8126615c-31"&gt;&lt;/a&gt;&lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;Trampoline&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here's the &lt;a class="reference external" href="https://tkurtbond.github.io/trampolines/revised-oberon/TrampolineForever.Mod"&gt;Revised Oberon TrampolineForever.Mod&lt;/a&gt;, with a workaround
for the removal of forward declarations of procedures:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code modula2"&gt;&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-1" name="rest_code_99dc53a0f144475c9a582626a13664ab-1" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-1"&gt;&lt;/a&gt;&lt;span class="kr"&gt;MODULE&lt;/span&gt; &lt;span class="n"&gt;TrampolineForever&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-2" name="rest_code_99dc53a0f144475c9a582626a13664ab-2" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-2"&gt;&lt;/a&gt;  &lt;span class="cm"&gt;(* Recurse forever without running out of stack space.  *)&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-3" name="rest_code_99dc53a0f144475c9a582626a13664ab-3" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-3"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;IMPORT&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-4" name="rest_code_99dc53a0f144475c9a582626a13664ab-4" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-5" name="rest_code_99dc53a0f144475c9a582626a13664ab-5" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-5"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;TYPE&lt;/span&gt; &lt;span class="n"&gt;Thunk&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-6" name="rest_code_99dc53a0f144475c9a582626a13664ab-6" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-6"&gt;&lt;/a&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-7" name="rest_code_99dc53a0f144475c9a582626a13664ab-7" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-7"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;VAR&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-8" name="rest_code_99dc53a0f144475c9a582626a13664ab-8" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Thunk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;      &lt;span class="cm"&gt;(* Forward declaration. *)&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-9" name="rest_code_99dc53a0f144475c9a582626a13664ab-9" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Thunk&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;         &lt;span class="cm"&gt;(* Next procedure to be called. *)&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-10" name="rest_code_99dc53a0f144475c9a582626a13664ab-10" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-10"&gt;&lt;/a&gt;    &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;INTEGER&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="cm"&gt;(* Number of times through the trampoline. *)&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-11" name="rest_code_99dc53a0f144475c9a582626a13664ab-11" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-11"&gt;&lt;/a&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-12" name="rest_code_99dc53a0f144475c9a582626a13664ab-12" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-12"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-13" name="rest_code_99dc53a0f144475c9a582626a13664ab-13" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-13"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-14" name="rest_code_99dc53a0f144475c9a582626a13664ab-14" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-14"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"baz"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-15" name="rest_code_99dc53a0f144475c9a582626a13664ab-15" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-15"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;forward&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-16" name="rest_code_99dc53a0f144475c9a582626a13664ab-16" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-16"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-17" name="rest_code_99dc53a0f144475c9a582626a13664ab-17" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-17"&gt;&lt;/a&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-18" name="rest_code_99dc53a0f144475c9a582626a13664ab-18" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-18"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-19" name="rest_code_99dc53a0f144475c9a582626a13664ab-19" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-19"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-20" name="rest_code_99dc53a0f144475c9a582626a13664ab-20" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-20"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-21" name="rest_code_99dc53a0f144475c9a582626a13664ab-21" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-21"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-22" name="rest_code_99dc53a0f144475c9a582626a13664ab-22" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-22"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-23" name="rest_code_99dc53a0f144475c9a582626a13664ab-23" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-23"&gt;&lt;/a&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-24" name="rest_code_99dc53a0f144475c9a582626a13664ab-24" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-24"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;PROCEDURE&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-25" name="rest_code_99dc53a0f144475c9a582626a13664ab-25" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-25"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-26" name="rest_code_99dc53a0f144475c9a582626a13664ab-26" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-26"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-27" name="rest_code_99dc53a0f144475c9a582626a13664ab-27" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-27"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-28" name="rest_code_99dc53a0f144475c9a582626a13664ab-28" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-28"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-29" name="rest_code_99dc53a0f144475c9a582626a13664ab-29" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-29"&gt;&lt;/a&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-30" name="rest_code_99dc53a0f144475c9a582626a13664ab-30" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-30"&gt;&lt;/a&gt;&lt;span class="kr"&gt;BEGIN&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-31" name="rest_code_99dc53a0f144475c9a582626a13664ab-31" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-31"&gt;&lt;/a&gt;  &lt;span class="n"&gt;forward&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-32" name="rest_code_99dc53a0f144475c9a582626a13664ab-32" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-32"&gt;&lt;/a&gt;  &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-33" name="rest_code_99dc53a0f144475c9a582626a13664ab-33" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-33"&gt;&lt;/a&gt;  &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-34" name="rest_code_99dc53a0f144475c9a582626a13664ab-34" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-34"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;WHILE&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="o"&gt;#&lt;/span&gt; &lt;span class="nb"&gt;NIL&lt;/span&gt; &lt;span class="kr"&gt;DO&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-35" name="rest_code_99dc53a0f144475c9a582626a13664ab-35" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-35"&gt;&lt;/a&gt;    &lt;span class="nb"&gt;INC&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-36" name="rest_code_99dc53a0f144475c9a582626a13664ab-36" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-36"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"call #"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Ln&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-37" name="rest_code_99dc53a0f144475c9a582626a13664ab-37" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-37"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="p"&gt;();&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-38" name="rest_code_99dc53a0f144475c9a582626a13664ab-38" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-38"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;END&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_99dc53a0f144475c9a582626a13664ab-39" name="rest_code_99dc53a0f144475c9a582626a13664ab-39" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_99dc53a0f144475c9a582626a13664ab-39"&gt;&lt;/a&gt;&lt;span class="kr"&gt;END&lt;/span&gt; &lt;span class="n"&gt;TrampolineForever&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that with forward declarations removed, we just declare a
procedure variable, &lt;code class="docutils literal"&gt;forward&lt;/code&gt;, initialize it before starting the
trampoline, and refer to it instead of &lt;code class="docutils literal"&gt;foo&lt;/code&gt; in procedure &lt;code class="docutils literal"&gt;baz&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;And of course, since we mentioned &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ada_(programming_language)"&gt;Ada&lt;/a&gt; above, we should do a version
in that.  I'm using &lt;a class="reference external" href="https://en.wikipedia.org/wiki/GNAT"&gt;GNAT&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here's &lt;a class="reference external" href="https://tkurtbond.github.io/trampolines/ada/not_forever.adb"&gt;not_forever.adb&lt;/a&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code ada"&gt;&lt;a id="rest_code_0385449473644583a667a5b9631a4eb2-1" name="rest_code_0385449473644583a667a5b9631a4eb2-1" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0385449473644583a667a5b9631a4eb2-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_0385449473644583a667a5b9631a4eb2-2" name="rest_code_0385449473644583a667a5b9631a4eb2-2" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0385449473644583a667a5b9631a4eb2-2"&gt;&lt;/a&gt;&lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;not_forever&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;        &lt;span class="c1"&gt;-- recurse until stack space runs out.&lt;/span&gt;
&lt;a id="rest_code_0385449473644583a667a5b9631a4eb2-3" name="rest_code_0385449473644583a667a5b9631a4eb2-3" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0385449473644583a667a5b9631a4eb2-3"&gt;&lt;/a&gt;  &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Unsigned&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;mod&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;-- wrap to 0 when maximum value is execeeded.&lt;/span&gt;
&lt;a id="rest_code_0385449473644583a667a5b9631a4eb2-4" name="rest_code_0385449473644583a667a5b9631a4eb2-4" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0385449473644583a667a5b9631a4eb2-4"&gt;&lt;/a&gt;  &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unsigned&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;             &lt;span class="c1"&gt;-- Number of times f has been called.&lt;/span&gt;
&lt;a id="rest_code_0385449473644583a667a5b9631a4eb2-5" name="rest_code_0385449473644583a667a5b9631a4eb2-5" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0385449473644583a667a5b9631a4eb2-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_0385449473644583a667a5b9631a4eb2-6" name="rest_code_0385449473644583a667a5b9631a4eb2-6" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0385449473644583a667a5b9631a4eb2-6"&gt;&lt;/a&gt;  &lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_0385449473644583a667a5b9631a4eb2-7" name="rest_code_0385449473644583a667a5b9631a4eb2-7" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0385449473644583a667a5b9631a4eb2-7"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_0385449473644583a667a5b9631a4eb2-8" name="rest_code_0385449473644583a667a5b9631a4eb2-8" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0385449473644583a667a5b9631a4eb2-8"&gt;&lt;/a&gt;    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_0385449473644583a667a5b9631a4eb2-9" name="rest_code_0385449473644583a667a5b9631a4eb2-9" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0385449473644583a667a5b9631a4eb2-9"&gt;&lt;/a&gt;    &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_0385449473644583a667a5b9631a4eb2-10" name="rest_code_0385449473644583a667a5b9631a4eb2-10" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0385449473644583a667a5b9631a4eb2-10"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_0385449473644583a667a5b9631a4eb2-11" name="rest_code_0385449473644583a667a5b9631a4eb2-11" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0385449473644583a667a5b9631a4eb2-11"&gt;&lt;/a&gt;
&lt;a id="rest_code_0385449473644583a667a5b9631a4eb2-12" name="rest_code_0385449473644583a667a5b9631a4eb2-12" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0385449473644583a667a5b9631a4eb2-12"&gt;&lt;/a&gt;&lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_0385449473644583a667a5b9631a4eb2-13" name="rest_code_0385449473644583a667a5b9631a4eb2-13" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0385449473644583a667a5b9631a4eb2-13"&gt;&lt;/a&gt;  &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_0385449473644583a667a5b9631a4eb2-14" name="rest_code_0385449473644583a667a5b9631a4eb2-14" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0385449473644583a667a5b9631a4eb2-14"&gt;&lt;/a&gt;&lt;span class="kr"&gt;exception&lt;/span&gt;
&lt;a id="rest_code_0385449473644583a667a5b9631a4eb2-15" name="rest_code_0385449473644583a667a5b9631a4eb2-15" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0385449473644583a667a5b9631a4eb2-15"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;when&lt;/span&gt; &lt;span class="n"&gt;STORAGE_ERROR&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_0385449473644583a667a5b9631a4eb2-16" name="rest_code_0385449473644583a667a5b9631a4eb2-16" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0385449473644583a667a5b9631a4eb2-16"&gt;&lt;/a&gt;  &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"STORAGE_ERROR raised with i = "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;New_Line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_0385449473644583a667a5b9631a4eb2-17" name="rest_code_0385449473644583a667a5b9631a4eb2-17" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0385449473644583a667a5b9631a4eb2-17"&gt;&lt;/a&gt;&lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;not_forever&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Since &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ada_(programming_language)"&gt;Ada&lt;/a&gt; has exceptions, we actually catch the exception that
happens when the stack runs out of space:&lt;/p&gt;
&lt;pre class="literal-block"&gt;STORAGE_ERROR raised with i =  262002&lt;/pre&gt;
&lt;p&gt;Again, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Ada_(programming_language)"&gt;Ada&lt;/a&gt; would have the same problem with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Recursive_data_type"&gt;recursive type&lt;/a&gt;s as
the Oberon dialects.  Don't look at the C version and wander off into
forest of &lt;code class="docutils literal"&gt;Ada.Unchecked_Conversion&lt;/code&gt; because that's unsafe, or the
thicket of &lt;code class="docutils literal"&gt;System.Address_To_Access_Conversions&lt;/code&gt;, because that
one's also unsafe and more complicated (and the simple approach didn't
work, when I tried it).  Instead, do the same thing as we did in the
Oberon dialects, and move to a global variable instead of returning
the values from the functions.&lt;/p&gt;
&lt;p&gt;Here's &lt;a class="reference external" href="https://tkurtbond.github.io/trampolines/ada/trampoline.adb"&gt;trampoline.adb&lt;/a&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code ada"&gt;&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-1" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-1" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-2" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-2" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-2"&gt;&lt;/a&gt;&lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;trampoline&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;         &lt;span class="c1"&gt;-- Demonstrate lisp-style trampolines.&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-3" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-3" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-3"&gt;&lt;/a&gt;    &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Thunk&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt; &lt;span class="kr"&gt;access&lt;/span&gt; &lt;span class="kd"&gt;procedure&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-4" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-4" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-4"&gt;&lt;/a&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-5" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-5" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-5"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Thunk&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="c1"&gt;-- Next procedure to be called.&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-6" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-6" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-6"&gt;&lt;/a&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-7" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-7" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-7"&gt;&lt;/a&gt;    &lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;baz&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-8" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-8" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-8"&gt;&lt;/a&gt;    &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-9" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-9" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-9"&gt;&lt;/a&gt;        &lt;span class="n"&gt;Put_Line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"baz"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-10" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-10" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-10"&gt;&lt;/a&gt;        &lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-11" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-11" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-11"&gt;&lt;/a&gt;    &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-12" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-12" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-13" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-13" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-13"&gt;&lt;/a&gt;    &lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-14" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-14" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-14"&gt;&lt;/a&gt;    &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-15" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-15" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-15"&gt;&lt;/a&gt;        &lt;span class="n"&gt;Put_Line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-16" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-16" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-16"&gt;&lt;/a&gt;        &lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Access&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-17" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-17" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-17"&gt;&lt;/a&gt;    &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-18" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-18" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-18"&gt;&lt;/a&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-19" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-19" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-19"&gt;&lt;/a&gt;    &lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-20" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-20" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-20"&gt;&lt;/a&gt;    &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-21" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-21" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-21"&gt;&lt;/a&gt;        &lt;span class="n"&gt;Put_Line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-22" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-22" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-22"&gt;&lt;/a&gt;        &lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Access&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-23" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-23" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-23"&gt;&lt;/a&gt;    &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-24" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-24" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-24"&gt;&lt;/a&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-25" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-25" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-25"&gt;&lt;/a&gt;&lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-26" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-26" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-26"&gt;&lt;/a&gt;    &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Access&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-27" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-27" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-27"&gt;&lt;/a&gt;    &lt;span class="kr"&gt;while&lt;/span&gt; &lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-28" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-28" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-28"&gt;&lt;/a&gt;        &lt;span class="n"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-29" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-29" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-29"&gt;&lt;/a&gt;    &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_5e205ea565214f0ca9bbc93c5b69458b-30" name="rest_code_5e205ea565214f0ca9bbc93c5b69458b-30" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_5e205ea565214f0ca9bbc93c5b69458b-30"&gt;&lt;/a&gt;&lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;trampoline&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And here's &lt;a class="reference external" href="https://tkurtbond.github.io/trampolines/ada/trampoline_forever.adb"&gt;trampoline_forever.adb&lt;/a&gt;:&lt;/p&gt;
&lt;div class="code"&gt;&lt;pre class="code ada"&gt;&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-1" name="rest_code_0939bf7895c4454baad1d2782f3379de-1" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-1"&gt;&lt;/a&gt;&lt;span class="kn"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="kn"&gt;use&lt;/span&gt; &lt;span class="n"&gt;Ada.Text_IO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-2" name="rest_code_0939bf7895c4454baad1d2782f3379de-2" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-2"&gt;&lt;/a&gt;&lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;trampoline_forever&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-3" name="rest_code_0939bf7895c4454baad1d2782f3379de-3" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-3"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;-- Recurse forever without running out of stack space.&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-4" name="rest_code_0939bf7895c4454baad1d2782f3379de-4" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-4"&gt;&lt;/a&gt;  &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Unsigned&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt; &lt;span class="ow"&gt;mod&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;64&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="c1"&gt;-- wrap to 0 when maximum value is execeeded.&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-5" name="rest_code_0939bf7895c4454baad1d2782f3379de-5" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-5"&gt;&lt;/a&gt;  &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Unsigned&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;             &lt;span class="c1"&gt;-- Number of times through the trampoline.&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-6" name="rest_code_0939bf7895c4454baad1d2782f3379de-6" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-6"&gt;&lt;/a&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-7" name="rest_code_0939bf7895c4454baad1d2782f3379de-7" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-7"&gt;&lt;/a&gt;  &lt;span class="kd"&gt;type&lt;/span&gt; &lt;span class="kt"&gt;Thunk&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt; &lt;span class="kr"&gt;access&lt;/span&gt; &lt;span class="kd"&gt;procedure&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-8" name="rest_code_0939bf7895c4454baad1d2782f3379de-8" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-8"&gt;&lt;/a&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-9" name="rest_code_0939bf7895c4454baad1d2782f3379de-9" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-9"&gt;&lt;/a&gt;  &lt;span class="n"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Thunk&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;          &lt;span class="c1"&gt;-- Next procedure to be called.&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-10" name="rest_code_0939bf7895c4454baad1d2782f3379de-10" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-10"&gt;&lt;/a&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-11" name="rest_code_0939bf7895c4454baad1d2782f3379de-11" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-11"&gt;&lt;/a&gt;  &lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="c1"&gt;-- forward declaration.&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-12" name="rest_code_0939bf7895c4454baad1d2782f3379de-12" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-13" name="rest_code_0939bf7895c4454baad1d2782f3379de-13" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-13"&gt;&lt;/a&gt;  &lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;baz&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-14" name="rest_code_0939bf7895c4454baad1d2782f3379de-14" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-14"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-15" name="rest_code_0939bf7895c4454baad1d2782f3379de-15" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-15"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Put_Line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"baz"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-16" name="rest_code_0939bf7895c4454baad1d2782f3379de-16" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-16"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;access&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-17" name="rest_code_0939bf7895c4454baad1d2782f3379de-17" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-17"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-18" name="rest_code_0939bf7895c4454baad1d2782f3379de-18" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-18"&gt;&lt;/a&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-19" name="rest_code_0939bf7895c4454baad1d2782f3379de-19" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-19"&gt;&lt;/a&gt;  &lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-20" name="rest_code_0939bf7895c4454baad1d2782f3379de-20" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-20"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-21" name="rest_code_0939bf7895c4454baad1d2782f3379de-21" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-21"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Put_Line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"bar"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-22" name="rest_code_0939bf7895c4454baad1d2782f3379de-22" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-22"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Access&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-23" name="rest_code_0939bf7895c4454baad1d2782f3379de-23" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-23"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-24" name="rest_code_0939bf7895c4454baad1d2782f3379de-24" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-24"&gt;&lt;/a&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-25" name="rest_code_0939bf7895c4454baad1d2782f3379de-25" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-25"&gt;&lt;/a&gt;  &lt;span class="kd"&gt;procedure&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt; &lt;span class="kr"&gt;is&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-26" name="rest_code_0939bf7895c4454baad1d2782f3379de-26" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-26"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-27" name="rest_code_0939bf7895c4454baad1d2782f3379de-27" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-27"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Put_Line&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"foo"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-28" name="rest_code_0939bf7895c4454baad1d2782f3379de-28" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-28"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Access&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-29" name="rest_code_0939bf7895c4454baad1d2782f3379de-29" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-29"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-30" name="rest_code_0939bf7895c4454baad1d2782f3379de-30" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-30"&gt;&lt;/a&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-31" name="rest_code_0939bf7895c4454baad1d2782f3379de-31" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-31"&gt;&lt;/a&gt;&lt;span class="kr"&gt;begin&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-32" name="rest_code_0939bf7895c4454baad1d2782f3379de-32" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-32"&gt;&lt;/a&gt;  &lt;span class="n"&gt;next&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Access&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-33" name="rest_code_0939bf7895c4454baad1d2782f3379de-33" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-33"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;while&lt;/span&gt; &lt;span class="n"&gt;Next&lt;/span&gt; &lt;span class="o"&gt;/=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-34" name="rest_code_0939bf7895c4454baad1d2782f3379de-34" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-34"&gt;&lt;/a&gt;    &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="p"&gt;:=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-35" name="rest_code_0939bf7895c4454baad1d2782f3379de-35" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-35"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"call #"&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;New_Line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-36" name="rest_code_0939bf7895c4454baad1d2782f3379de-36" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-36"&gt;&lt;/a&gt;    &lt;span class="n"&gt;Next&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="kr"&gt;all&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-37" name="rest_code_0939bf7895c4454baad1d2782f3379de-37" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-37"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="kr"&gt;loop&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-38" name="rest_code_0939bf7895c4454baad1d2782f3379de-38" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-38"&gt;&lt;/a&gt;&lt;span class="kr"&gt;exception&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-39" name="rest_code_0939bf7895c4454baad1d2782f3379de-39" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-39"&gt;&lt;/a&gt;  &lt;span class="kr"&gt;when&lt;/span&gt; &lt;span class="n"&gt;STORAGE_ERROR&lt;/span&gt; &lt;span class="p"&gt;=&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-40" name="rest_code_0939bf7895c4454baad1d2782f3379de-40" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-40"&gt;&lt;/a&gt;  &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;"STORAGE_ERROR raised with i = "&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;Put&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;'&lt;/span&gt;&lt;span class="na"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="n"&gt;New_Line&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;a id="rest_code_0939bf7895c4454baad1d2782f3379de-41" name="rest_code_0939bf7895c4454baad1d2782f3379de-41" href="https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/#rest_code_0939bf7895c4454baad1d2782f3379de-41"&gt;&lt;/a&gt;&lt;span class="kr"&gt;end&lt;/span&gt; &lt;span class="nf"&gt;trampoline_forever&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;Of course, languages with more sophisticated type systems have other
ways of dealing with things, but I haven't investigated them.  I did
stumble across an &lt;a class="reference external" href="https://gist.github.com/rapha/119788"&gt;example&lt;/a&gt; in OCaml (&lt;a class="reference external" href="https://en.wikipedia.org/wiki/OCaml"&gt;OCAML1&lt;/a&gt;, &lt;a class="reference external" href="https://ocaml.org/"&gt;OCAML2&lt;/a&gt;).&lt;/p&gt;
&lt;hr class="docutils"&gt;
&lt;p&gt;If you want to play around with this, the code is in a
&lt;a class="reference external" href="https://github.com/tkurtbond/trampolines"&gt;repository&lt;/a&gt; at &lt;a class="reference external" href="https://github.com/"&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;!-- Local Variables:
time-stamp-format: "%Y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "\\*Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
End: --&gt;</description><category>ada</category><category>c</category><category>cheney on the m.t.a.</category><category>clisp</category><category>common lisp</category><category>continuation-passing style</category><category>cps</category><category>ecl</category><category>gcc</category><category>github</category><category>gnat</category><category>hanspeter mössenböck</category><category>lisp-style trampolines</category><category>modula</category><category>modula-2</category><category>niklaus wirth</category><category>no assembly required</category><category>oberon system</category><category>oberon-2</category><category>oberon-07</category><category>obnc</category><category>ocaml</category><category>pascal</category><category>rabbit</category><category>record types</category><category>revised oberon</category><category>sbcl</category><category>scheme</category><category>tail call</category><category>tail call optimization</category><category>trampolines</category><category>type extensions</category><category>uuo handler</category><category>vishap oberon</category><guid>https://tkurtbond.github.io/posts/2022/06/14/lisp-style-trampolines-in-common-lisp-c-ada-oberon-2-and-revised-oberon/</guid><pubDate>Tue, 14 Jun 2022 19:49:55 GMT</pubDate></item><item><title>Failing at Ada Again</title><link>https://tkurtbond.github.io/posts/2019/11/10/failing-at-ada-again/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;Back on May 20th, 2019 I ordered a copy of &lt;a class="reference external" href="https://www.amazon.com/gp/product/110742481X/"&gt;Programming in Ada&lt;/a&gt; by
John Barnes and spent some time reading it and working with Ada.  I
get interested again in Ada &lt;a class="reference external" href="https://tkurtbond.github.io/posts/2003/07/24/2003-07-24-ada-cohen/"&gt;periodically&lt;/a&gt;.  In theory, I ought to like
programming in Ada — it's one of the last remaining widely used members
of the Pascal language family, which I like.  There is a distribution
of the &lt;a class="reference external" href="https://www.adacore.com/download"&gt;GNAT Community Edition&lt;/a&gt; for macOS which bundles the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/GNAT"&gt;GNAT&lt;/a&gt; Ada
compiler and some useful libraries.  But I could never get
comfortable.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;GNAT Community Edition for macOS doesn't include GtkAda, so I
couldn't easily write GUI programs.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Getting programming libraries was back to the old download and
install it from scratch yourself method.  I find it much easier to
use systems like Chicken Scheme's &lt;a class="reference external" href="http://wiki.call-cc.org/chicken-projects/egg-index-5.html"&gt;Eggs Unlimited&lt;/a&gt; to find and
install software, or &lt;a class="reference external" href="https://ocaml.org/"&gt;OCaml&lt;/a&gt;'s &lt;a class="reference external" href="https://opam.ocaml.org/"&gt;opam&lt;/a&gt;.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://brew.sh"&gt;Brew&lt;/a&gt;, a package manager for macOS, doesn't include GNAT and
GtkAda. The case is better in &lt;a class="reference external" href="https://www.macports.org/"&gt;MacPorts&lt;/a&gt; and much better on Fedora,
but not good on Ubuntu.  I think there are are fewer packaged Ada
libraries across the open source Unixes in general.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The lack of a garbage collector is annoying.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;The type system is strict and not very flexible.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;And especially irritating to me, I tried using  the Ada mode on GNU &lt;a class="reference external" href="https://elpa.gnu.org/"&gt;Elpa&lt;/a&gt;
and it didn't indent Ada code properly.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I think in my current programming environment using Ada is still a
difficult task.&lt;/p&gt;</description><category>ada</category><guid>https://tkurtbond.github.io/posts/2019/11/10/failing-at-ada-again/</guid><pubDate>Sun, 10 Nov 2019 21:24:35 GMT</pubDate></item><item><title>GtkAda and Ada; Recent Listening and Viewing</title><link>https://tkurtbond.github.io/posts/2005/06/07/2005-06-07/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;section id="gtkada-and-ada"&gt;
&lt;h2&gt;GtkAda and Ada&lt;/h2&gt;
&lt;p&gt;Using GNAT 3.15p with GtkAda-2.4.0 on Windows XP, when I wanted to
switch from using &lt;code class="docutils literal"&gt;Gtk.Menu.Popup&lt;/code&gt; to using a user instantiated
version of &lt;code class="docutils literal"&gt;Gtk.Menu.User_Menu_Popup.Popup&lt;/code&gt; I tried to switch from
using &lt;code class="docutils literal"&gt;Menu&lt;/code&gt; of type &lt;code class="docutils literal"&gt;Gtk_Menu&lt;/code&gt; for the first parameter to using
&lt;code class="docutils literal"&gt;Gtk_Menu_Record &lt;span class="pre"&gt;(Menu.all)'Access&lt;/span&gt;&lt;/code&gt; because gnatmake says:&lt;/p&gt;
&lt;pre class="literal-block"&gt;access to class-wide argument not allowed here
"Popup" is not a primitive operation of
"Gtk_Menu_Record"&lt;/pre&gt;
&lt;p&gt;I suppose that is because when the package is instantiated it's not in
the same scope as the original declaration of &lt;code class="docutils literal"&gt;Gtk_Menu_Record&lt;/code&gt; so it
can't be a primitive operation of that type. It's annoying, though.
Anyway, I never figured out the problem completely before having to
move on to something else.&lt;/p&gt;
&lt;p&gt;I never did get &lt;code class="docutils literal"&gt;Gtk.Menu.User_Menu_Popup.Popup&lt;/code&gt; working properly,
though.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="recent-listening"&gt;
&lt;h2&gt;Recent Listening&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Blue Blood&lt;/em&gt;, by Edward Conlon; performed by Tom Stechschulte;
Recorded Books, 2004.  Very interesting memoir of a NYPD cop in the late
1990s and early 2000s.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="recent-viewing"&gt;
&lt;h2&gt;Recent Viewing&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.imdb.com/title/tt0164984/"&gt;Zatoichi sekisho yaburi&lt;/a&gt;, aka &lt;em&gt;Adventures of a Blind
Man&lt;/em&gt;, 1964. Directed by Kimiyoshi Yasuda, writing by Shozaburo Asai
and Kan Shimozawa.Includes another glimpse into Zatoichi's background.
Good.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;</description><category>ada</category><category>gtkada</category><category>old blog</category><category>recent listening</category><category>recent viewing</category><guid>https://tkurtbond.github.io/posts/2005/06/07/2005-06-07/</guid><pubDate>Tue, 07 Jun 2005 05:00:00 GMT</pubDate></item><item><title>Recent Reading; Ada and doing things right</title><link>https://tkurtbond.github.io/posts/2004/07/28/2004-07-28/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;section id="recent-reading"&gt;
&lt;h2&gt;Recent Reading&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Nebula Winners Twelve&lt;/em&gt;, ed. Gordon R. Dickson, copyright 1978 by
Science Fiction Writers of America; Harper and Row, 1987.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;A Crowd of Shadows&lt;/em&gt;, by Charles L. Grant. Nebula Winner.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Breath's a Ware That Will Not Keep&lt;/em&gt;, by Thomas F. Monteleone.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Tricentennial&lt;/em&gt;, by Joe Haldeman.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;In the Bowl&lt;/em&gt;, by John Varley.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;The Academic Viewpoint&lt;/em&gt;, by James Gunn.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;The Bicentennial Man&lt;/em&gt;, by Isaac Asimov. Nebula Winner.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Houston, Houston, Do You Read?&lt;/em&gt;, by James Triptree, Jr. Nebula
Winner.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These are some of short Nebula winners and runners-up from 1976.  A
good collection; all the stories are still worth reading.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="ada-and-doing-things-right"&gt;
&lt;h2&gt;Ada and doing things right&lt;/h2&gt;
&lt;p&gt;I enjoy reading the newsgroup &lt;a class="reference external" href="news:comp.lang.ada"&gt;comp.lang.ada&lt;/a&gt;,
because there are number of people there who are doing commercial work
with very high quality requirements and interesting problems to solve.
It's nice to listen to folks who really work to get things &lt;em&gt;right&lt;/em&gt;.
And sometimes it's just a relief to read code that's written with a
clear syntax.&lt;/p&gt;
&lt;p&gt;Speaking of Ada 200Y, Martin Dowie has &lt;a class="reference external" href="http://www.martin.dowie.btinternet.co.uk/"&gt;back-port to Ada 95&lt;/a&gt; of some of the new &lt;a class="reference external" href="http://groups.google.com/groups?dq=&amp;amp;hl=en&amp;amp;lr=&amp;amp;ie=UTF-8&amp;amp;threadm=ce8pjj%247an%241%40titan.btinternet.com&amp;amp;prev=/groups%3Fhl%3Den%26lr%3D%26ie%3DUTF-8%26group%3Dcomp.lang.ada"&gt;Ada
200Y packages&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;AI-248 - &lt;code class="docutils literal"&gt;Ada.Directories.*&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AI-286 - &lt;code class="docutils literal"&gt;Ada.Assertions&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AI-296 - &lt;code class="docutils literal"&gt;Ada.Numerics.Generic_&lt;/code&gt;&lt;cite&gt;[Complex|Real]&lt;/cite&gt;&lt;code class="docutils literal"&gt;_Arrays&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AI-301 - &lt;code class="docutils literal"&gt;Ada.&lt;/code&gt;&lt;cite&gt;(Wide_)&lt;/cite&gt;&lt;code class="docutils literal"&gt;Text_IO.&lt;/code&gt;&lt;cite&gt;(Wide_)&lt;/cite&gt;&lt;code class="docutils literal"&gt;Unbounded_IO&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AI-302 - &lt;code class="docutils literal"&gt;Ada.Containers.*&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AI-346 - &lt;code class="docutils literal"&gt;Ada.Numerics.Generic_&lt;/code&gt;&lt;cite&gt;[Complex|Real]&lt;/cite&gt;&lt;code class="docutils literal"&gt;_Arrays.Generic_Roots&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;AI-351 - &lt;code class="docutils literal"&gt;Ada.Calendar.*&lt;/code&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;</description><category>ada</category><category>old blog</category><category>recent reading</category><guid>https://tkurtbond.github.io/posts/2004/07/28/2004-07-28/</guid><pubDate>Wed, 28 Jul 2004 05:00:00 GMT</pubDate></item><item><title>Ada as a Second Language, Second Edition</title><link>https://tkurtbond.github.io/posts/2003/07/24/2003-07-24-ada-cohen/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;I'm still working my way slowly through Cohen's &lt;a class="reference external" href="https://tkurtbond.github.io/posts/2003/07/09/2003-07-09/#cohen-ada95"&gt;Ada as a Second
Language, Second Edition&lt;/a&gt;.
Ada takes a much more conservative approach to reliability
than any of the BCPL/C languages (including Java), and in some cases
more even than the Pascal/Modula/Oberon languages, so there are more
restrictions on how some things are treated.  Looking carefully at the
language, I can understand the reasons for the restrictions, but
abiding by them takes more up-front planning than is promoted by the
BCPL/C languages.  Is the additional effort worth the extra reliability
for general purpose applications programming? That's what I hope to
find out.  It's easy to see, now that I'm back to using a language that
doesn't include garbage collection as part of the standard, how much
easier garbage collection makes interface design;
&lt;a class="reference external" href="http://www.m3.org/"&gt;Modula-3&lt;/a&gt; or Java have a definite advantage here.&lt;/p&gt;</description><category>ada</category><category>old blog</category><guid>https://tkurtbond.github.io/posts/2003/07/24/2003-07-24-ada-cohen/</guid><pubDate>Thu, 24 Jul 2003 05:00:00 GMT</pubDate></item><item><title>GtkAda and Recent Reading</title><link>https://tkurtbond.github.io/posts/2003/07/03/2003-07-03-gtkada-reading/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;section id="gtkada"&gt;
&lt;h2&gt;GtkAda&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="http://libre.act-europe.fr/GtkAda/"&gt;GtkAda&lt;/a&gt; folks have
released a new version of GtkAda for Gtk+-2.2 and it includes an
easily installed binary release.  It looks to me like the easiest way
to get started writing cross-platform Gtk+ programs is to install &lt;a class="reference external" href="ftp://ftp.cs.nyu.edu/pub/gnat/3.15p/winnt/gnat-3.15p-nt.exe"&gt;GNAT
3.15p&lt;/a&gt;
and &lt;a class="reference external" href="ftp://ftp.cs.nyu.edu/pub/gnat/3.15p/winnt/gnatwin-3.15p.exe"&gt;GNATWIN&lt;/a&gt; then
install the new &lt;a class="reference external" href="http://libre.act-europe.fr/GtkAda/gtkada-2.2.0.exe"&gt;GtkAda&lt;/a&gt; release.  Reasonably complete
examples are included in the distribution.&lt;/p&gt;
&lt;/section&gt;
&lt;section id="recent-reading"&gt;
&lt;h2&gt;Recent Reading&lt;/h2&gt;
&lt;ul class="simple" id="more-earthsea-tales"&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;The Other Wind&lt;/cite&gt; and &lt;cite&gt;Tales from Earthsea&lt;/cite&gt;, by Ursula K. LeGuin.  I
was very glad to see that there were still &lt;cite class="series"&gt;Earthsea&lt;/cite&gt; tales that
LeGuin wanted to tell.  Both of these books are quite good.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul class="simple" id="college"&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="http://www.epiphyte.net/SF/college-of-magics.html"&gt;A College of Magics&lt;/a&gt; by Caroline Stevermer.  This is a very entertaining
&lt;a class="reference external" href="http://www.wikipedia.org/wiki/Fictional_country"&gt;Ruritanian&lt;/a&gt;
fantasy in an alternate world with a touch of magic.  I've enjoyed her
other works as well: &lt;cite&gt;The Serpent's Egg&lt;/cite&gt;, &lt;cite&gt;When the King Comes Home&lt;/cite&gt;,
and &lt;cite&gt;Sorcery and Cecelia&lt;/cite&gt; (co-written with Patricia C. Wrede).  I
haven't read &lt;cite&gt;River Rats&lt;/cite&gt; yet, though.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;The Haunted Monastery, a Chinese Detective Story&lt;/cite&gt;, by Robert van
Gulik.  An enjoyable &lt;a class="reference external" href="http://www.friesian.com/ross/dee.htm"&gt;Judge Dee&lt;/a&gt; mystery.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;</description><category>ada</category><category>gtkada</category><category>old blog</category><category>recent reading</category><guid>https://tkurtbond.github.io/posts/2003/07/03/2003-07-03-gtkada-reading/</guid><pubDate>Thu, 03 Jul 2003 05:00:00 GMT</pubDate></item><item><title>Recent Reading; Computing: Ada</title><link>https://tkurtbond.github.io/posts/2003/06/24/2003-06-24/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;section id="recent-reading"&gt;
&lt;h2&gt;Recent Reading&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;Honorable Company&lt;/cite&gt; by Allan Mallinson.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;The Haunted Monastery&lt;/cite&gt; by Robert Hans Van Gulik.  This is one of
Gulik's &lt;a class="reference external" href="http://www.friesian.com/ross/dee.htm"&gt;Judge Dee&lt;/a&gt;
mysteries, set in ancient China.  Very good.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;Ada 95: The Craft of Object-Oriented Programming&lt;/cite&gt; by John English,
&lt;a class="reference external" href="http://www.it.bton.ac.uk/staff/je/adacraft/"&gt;online edition&lt;/a&gt;. A
good introduction to Ada 95.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/section&gt;
&lt;section id="computing-ada"&gt;
&lt;h2&gt;Computing: Ada&lt;/h2&gt;
&lt;p&gt;I've been looking at &lt;a class="reference external" href="http://libre.act-europe.fr/GtkAda/"&gt;GtkAda&lt;/a&gt;,
an Ada binding for Gtk+.  It's pretty complete, and is portable between
Unix and MS Windows, with a MacOS X version in the works.  An
&lt;a class="reference external" href="http://lists.act-europe.fr/pipermail/gtkada/2003-May/002223.html"&gt;explanation&lt;/a&gt; of how to create
the environment for you'll need for using recent versions (Gtk+-2.2.x
based, from CVS) with recent versions of GCC under MS Windows is
&lt;a class="reference external" href="http://lists.act-europe.fr/pipermail/gtkada/2003-May/002223.html"&gt;available&lt;/a&gt;.  (Update: a new
&lt;a class="reference external" href="https://tkurtbond.github.io/posts/2003/07/03/2003-07-03-gtkada-reading/"&gt;binary release&lt;/a&gt; makes
things much simpler.)&lt;/p&gt;
&lt;/section&gt;</description><category>ada</category><category>gtkada</category><category>old blog</category><category>recent reading</category><guid>https://tkurtbond.github.io/posts/2003/06/24/2003-06-24/</guid><pubDate>Tue, 24 Jun 2003 05:00:00 GMT</pubDate></item></channel></rss>