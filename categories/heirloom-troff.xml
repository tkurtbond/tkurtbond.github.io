<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lacking Natural Simplicity (Posts about heirloom troff)</title><link>https://tkurtbond.github.io/</link><description></description><atom:link href="https://tkurtbond.github.io/categories/heirloom-troff.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:tkurtbond@gmail.com"&gt;T. Kurt Bond&lt;/a&gt; </copyright><lastBuildDate>Mon, 03 Aug 2020 20:04:46 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Paragraph Justification in groff and TeX</title><link>https://tkurtbond.github.io/posts/2020/07/31/paragraph-justification-in-groff-and-tex/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;p&gt;An interesting message thread developed on the groff &lt;a class="reference external" href="https://lists.gnu.org/archive/html/groff/"&gt;mailing list&lt;/a&gt;
about various features of &lt;span class="app"&gt;Groff&lt;/span&gt; and &lt;span class="app"&gt;Heirloom Troff&lt;/span&gt;, with
a mention of &lt;span class="app"&gt;neatroff&lt;/span&gt;.  In particular, Steve Izma's post (&lt;a class="reference external" href="https://lists.gnu.org/archive/html/groff/2020-07/msg00092.html"&gt;P1&lt;/a&gt;)
discussed how he found &lt;span class="app"&gt;TeX&lt;/span&gt;'s paragraph-at-a-time justification
required as much tweaking as groff's simpler paragraph justification.
That lead to Peter Schaffter's post (&lt;a class="reference external" href="https://lists.gnu.org/archive/html/groff/2020-07/msg00101.html"&gt;P2&lt;/a&gt;) linking to an earlier post
(&lt;a class="reference external" href="https://lists.gnu.org/archive/html/groff/2014-03/msg00322.html"&gt;P3&lt;/a&gt;) where he proposed a simpler algorithm to improve &lt;span class="app"&gt;Groff&lt;/span&gt;'s
line-breaking and justification than the full Knuth-Plass
Line-Breaking Algorithm (&lt;a class="reference external" href="http://www.eprg.org/G53DOC/pdfs/knuth-plass-breaking.pdf"&gt;KP1&lt;/a&gt;, &lt;a class="reference external" href="http://litherum.blogspot.com/2015/07/knuth-plass-line-breaking-algorithm.html"&gt;D1&lt;/a&gt;) that &lt;span class="app"&gt;TeX&lt;/span&gt; uses. While
writing this post I ran across another paper, “Global multiple
objective line breaking” by Alex Holkner (&lt;a class="reference external" href="https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.585.8487"&gt;GMOLB1&lt;/a&gt;, &lt;a class="reference external" href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.585.8487&amp;amp;rep=rep1&amp;amp;type=pdf"&gt;GMOLB2&lt;/a&gt;) that explores
another line breaking algorithm and references some of the other
papers on the subject.&lt;/p&gt;</description><category>groff</category><category>heirloom troff</category><category>knuth-plass line-breaking algorithm</category><category>neatroff</category><category>tex</category><guid>https://tkurtbond.github.io/posts/2020/07/31/paragraph-justification-in-groff-and-tex/</guid><pubDate>Sat, 01 Aug 2020 02:42:15 GMT</pubDate></item><item><title>Text Subtleties</title><link>https://tkurtbond.github.io/posts/2020/07/07/text-subtleties/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;I just noticed that when &lt;a class="reference external" href="https://www.gnu.org/software/wget/"&gt;wget&lt;/a&gt; tells you the filename of file it just
saved, if your &lt;code class="docutils literal"&gt;LANG=C&lt;/code&gt; then it surrounds it with apostrophes ('), but
if your &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;LANG=en_US.UTF-8&lt;/span&gt;&lt;/code&gt; then it surrounds it with &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Unicode"&gt;Unicode&lt;/a&gt; LEFT SINGLE
QUOTATION MARK (‘)and RIGHT SINGLE QUOTATION MARK (’).  I appreciate
little subtleties like that.&lt;/p&gt;
&lt;p&gt;I use Unicode characters in most of the writing I do.  For &lt;a class="reference external" href="https://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt;,
which I rarely use these days, I use &lt;a class="reference external" href="https://en.wikipedia.org/wiki/XeTeX"&gt;XeTeX&lt;/a&gt;, which understands UTF-8
natively.  &lt;a class="reference external" href="https://en.wikipedia.org/wiki/ConTeXt"&gt;ConTeXt&lt;/a&gt;, which I do use regularly, also understands UTF-8
natively.  For &lt;a class="reference external" href="https://www.gnu.org/software/groff/"&gt;groff&lt;/a&gt; I use the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-k&lt;/span&gt;&lt;/code&gt; switch, which preprocesses the
text with &lt;span class="command"&gt;preconv&lt;/span&gt; (which is part of &lt;a class="reference external" href="https://www.gnu.org/software/groff/"&gt;groff&lt;/a&gt;), converting the
UTF-8 characters into &lt;a class="reference external" href="https://www.gnu.org/software/groff/"&gt;groff&lt;/a&gt; character escapes, since &lt;a class="reference external" href="https://www.gnu.org/software/groff/"&gt;groff&lt;/a&gt; &lt;em&gt;doesn't&lt;/em&gt;
understand UTF-8 natively.  Of course, if it is &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;ReStructuredText&lt;/a&gt; that
I'm working with then &lt;a class="reference external" href="https://pandoc.org/"&gt;pandoc&lt;/a&gt; can be configured to use any one of
&lt;a class="reference external" href="https://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt;, &lt;a class="reference external" href="https://en.wikipedia.org/wiki/ConTeXt"&gt;ConTeXt&lt;/a&gt;, and &lt;a class="reference external" href="https://www.gnu.org/software/groff/"&gt;groff&lt;/a&gt; for creating PDF output, and since
&lt;span class="command"&gt;rst2html.py&lt;/span&gt; just produces &lt;a class="reference external" href="https://en.wikipedia.org/wiki/LaTeX"&gt;LaTeX&lt;/a&gt; that includes any
character you put in your source you can just use &lt;span class="command"&gt;xelatex&lt;/span&gt;
as part of your commands to turn it into PDF.  And sometimes, when I'm
feeling whimsical, I use &lt;span class="app"&gt;Heirloom Troff&lt;/span&gt;, from the &lt;a class="reference external" href="https://n-t-roff.github.io/heirloom/doctools.html"&gt;Heirloom
Documentation Tools&lt;/a&gt;, which understands UTF-8 natively.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Last edited: 2020-08-03 16:02:52 EDT&lt;/em&gt;&lt;/p&gt;
&lt;!-- Local Variables:
time-stamp-format: "%04y-%02m-%02d %02H:%02M:%02S %Z"
time-stamp-start: "\\*Last edited:[ \t]+\\\\?"
time-stamp-end: "\\*\\\\?\n"
time-stamp-line-limit: -20
End: --&gt;&lt;/div&gt;</description><category>context</category><category>groff</category><category>heirloom troff</category><category>text</category><category>unicode</category><category>utf-8</category><category>xelatex</category><guid>https://tkurtbond.github.io/posts/2020/07/07/text-subtleties/</guid><pubDate>Tue, 07 Jul 2020 23:05:13 GMT</pubDate></item></channel></rss>