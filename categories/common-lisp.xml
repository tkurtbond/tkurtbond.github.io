<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lacking Natural Simplicity (Posts about common lisp)</title><link>https://tkurtbond.github.io/</link><description></description><atom:link href="https://tkurtbond.github.io/categories/common-lisp.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2020 &lt;a href="mailto:tkurtbond@gmail.com"&gt;T. Kurt Bond&lt;/a&gt; </copyright><lastBuildDate>Sat, 14 Mar 2020 05:45:37 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Playing with Hashlife</title><link>https://tkurtbond.github.io/posts/2019/11/08/playing-with-hashlife/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;C.P. found &lt;a class="reference external" href="https://github.com/stylewarning"&gt;Robert Smith&lt;/a&gt;'s &lt;a class="reference external" href="https://github.com/stylewarning/lisp-random/tree/master/hashlife"&gt;implementation&lt;/a&gt; of Bill Gosper's HASHLIFE
algorithm and wanted my help with running it.  I cloned the &lt;a class="reference external" href="https://github.com/stylewarning/lisp-random"&gt;repo&lt;/a&gt; it
was in and ran &lt;code class="docutils literal"&gt;sbcl&lt;/code&gt; in the &lt;code class="docutils literal"&gt;hashlife&lt;/code&gt; directory.  Then I
entered:&lt;/p&gt;
&lt;pre class="code lisp"&gt;&lt;a name="rest_code_744e11cd6e354e558ce00254f3a0aef3-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;asdf:operate&lt;/span&gt; &lt;span class="ss"&gt;'asdf:load-op&lt;/span&gt; &lt;span class="ss"&gt;'charmlife&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;That resulted in a &lt;code class="docutils literal"&gt;Component CHARMLIFE not found&lt;/code&gt; error in sbcl.  I
thought that was odd — it was right there in the current directory.  I
looked at &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;asdf:*central-registry*&lt;/span&gt;&lt;/code&gt;, and the only thing in it was
the quicklisp directory.  The ASDF &lt;a class="reference external" href="https://common-lisp.net/~mmommer/asdf-howto.shtml#sec11"&gt;howto&lt;/a&gt; showed an example of setting
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;asdf:*central-registry*&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code lisp"&gt;&lt;a name="rest_code_eebf4b94a54e4bd2ac96efbd1d4c62c2-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;setf&lt;/span&gt; &lt;span class="nv"&gt;asdf:*central-registry*&lt;/span&gt;
&lt;a name="rest_code_eebf4b94a54e4bd2ac96efbd1d4c62c2-2"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;;; Default directories, usually just the ``current directory''&lt;/span&gt;
&lt;a name="rest_code_eebf4b94a54e4bd2ac96efbd1d4c62c2-3"&gt;&lt;/a&gt;  &lt;span class="o"&gt;'&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vg"&gt;*default-pathname-defaults*&lt;/span&gt;
&lt;a name="rest_code_eebf4b94a54e4bd2ac96efbd1d4c62c2-4"&gt;&lt;/a&gt;
&lt;a name="rest_code_eebf4b94a54e4bd2ac96efbd1d4c62c2-5"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;;; Additional places where ASDF can find&lt;/span&gt;
&lt;a name="rest_code_eebf4b94a54e4bd2ac96efbd1d4c62c2-6"&gt;&lt;/a&gt;    &lt;span class="c1"&gt;;; system definition files&lt;/span&gt;
&lt;a name="rest_code_eebf4b94a54e4bd2ac96efbd1d4c62c2-7"&gt;&lt;/a&gt;    &lt;span class="l l-Other"&gt;#p"/home/foo/lisp/systems/"&lt;/span&gt;
&lt;a name="rest_code_eebf4b94a54e4bd2ac96efbd1d4c62c2-8"&gt;&lt;/a&gt;    &lt;span class="l l-Other"&gt;#p"/usr/share/common-lisp/systems/"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Noticing that it had the symbol &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;*default-pathname-defaults*&lt;/span&gt;&lt;/code&gt; in the
new value, I guessed that it being missing from mine caused ASDF to
not find the system in the current directory.  So I added it and tried
again.  This time ASDF couldn't find &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;cl-charms&lt;/span&gt;&lt;/code&gt;.  I guessed and
used &lt;a class="reference external" href="https://www.quicklisp.org/"&gt;Quicklisp&lt;/a&gt; to load it.  That worked.  Then I looked at
&lt;code class="docutils literal"&gt;charmlife.lisp&lt;/code&gt; and looked at the &lt;code class="docutils literal"&gt;main&lt;/code&gt; function and figured out
how to run it and how to interact with the program when it was running.&lt;/p&gt;
&lt;p&gt;Here's what I had to do:&lt;/p&gt;
&lt;pre class="code lisp"&gt;&lt;a name="rest_code_8b58a9b9d907496597415634a7fbbd83-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;setf&lt;/span&gt; &lt;span class="nv"&gt;asdf:*central-registry*&lt;/span&gt;
&lt;a name="rest_code_8b58a9b9d907496597415634a7fbbd83-2"&gt;&lt;/a&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;cons&lt;/span&gt; &lt;span class="ss"&gt;'*default-pathname-defaults*&lt;/span&gt;
&lt;a name="rest_code_8b58a9b9d907496597415634a7fbbd83-3"&gt;&lt;/a&gt;            &lt;span class="nv"&gt;asdf:*central-registry*&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;a name="rest_code_8b58a9b9d907496597415634a7fbbd83-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;ql:quickload&lt;/span&gt; &lt;span class="s"&gt;"cl-charms"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8b58a9b9d907496597415634a7fbbd83-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;asdf:operate&lt;/span&gt; &lt;span class="ss"&gt;'asdf:load-op&lt;/span&gt; &lt;span class="ss"&gt;'charmlife&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a name="rest_code_8b58a9b9d907496597415634a7fbbd83-6"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;charmlife:main&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</description><category>common lisp</category><category>hashlife</category><category>life</category><guid>https://tkurtbond.github.io/posts/2019/11/08/playing-with-hashlife/</guid><pubDate>Fri, 08 Nov 2019 14:43:19 GMT</pubDate></item><item><title>Fun with Lisp: notf and cdrf</title><link>https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;I actually use these in Emacs Lisp, for which you'd need a
&lt;code class="inlinecode docutils literal"&gt;(require 'cl))&lt;/code&gt;, but the &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;define-modify-macro&lt;/span&gt;&lt;/code&gt; is
originally from Common Lisp.&lt;/p&gt;
&lt;p&gt;These are trivial, but useful.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;code&gt;(define-modify-macro notf (&amp;amp;rest args) not)
(setq x nil)
(notf x)
x ;;=&amp;gt; t
(notf x)
x ;;=&amp;gt; nil
(setq x ‘(a (b (c t))))
(notf (car (cdr (cadadr x))))
x ;;=&amp;gt; (a (b (c nil)))
(notf (car (cdr (cadadr x))))
x ;;=&amp;gt; (a (b (c t)))
(setq x [1 2 3 t 5])
(notf (aref x 3))
x ;;=&amp;gt; [1 2 3 nil 5]
(notf (aref x 3))
x ;;=&amp;gt; [1 2 3 t 5]

(define-modify-macro cdrf (&amp;amp;rest args) cdr)
(setq x ‘(:a :b :c :d 1 2 3))
(defun frob (keyword) ‘nothing-now)
(while (member (car x) ‘(:a :b :c :d))
  (frob (car x))
  (cdrf x))
x ;;=&amp;gt; (1 2 3)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description><category>common lisp</category><category>emacs lisp</category><guid>https://tkurtbond.github.io/posts/2008/08/15/fun-with-lisp-notf-and-cdrf/</guid><pubDate>Fri, 15 Aug 2008 23:59:36 GMT</pubDate></item><item><title>Slime Oddity</title><link>https://tkurtbond.github.io/posts/2005/10/05/2005-10-05/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;p&gt;For some reason, clisp version 2.35 installed from the FreeBSD ports
doesn't have &lt;code class="docutils literal"&gt;:PC386&lt;/code&gt; in &lt;code class="docutils literal"&gt;*FEATURES*&lt;/code&gt;; without this, Slime from CVS
stops with a continuable error:&lt;/p&gt;
&lt;pre class="literal-block"&gt;** - Continuable Error
INTERN("*DOCUMENTATION*"): #&amp;lt;PACKAGE SYSTEM&amp;gt; is locked
If you continue (by typing 'continue'): Ignore the lock and proceed
The following restarts are also available:
SKIP           :R1      skip (COMPILE-FILES-IF-NEEDED-SERIALLY #)
STOP           :R2      stop loading file
/extra/sw/src/slime/swank-loader.lisp
ABORT          :R3      ABORT&lt;/pre&gt;
&lt;p&gt;And after that, even if you continue slime is never able to connect to
swank.&lt;/p&gt;&lt;/div&gt;</description><category>common lisp</category><category>old blog</category><category>slime</category><guid>https://tkurtbond.github.io/posts/2005/10/05/2005-10-05/</guid><pubDate>Wed, 05 Oct 2005 05:00:00 GMT</pubDate></item><item><title>Common Lisp, SBCL, and CLIM; Recent Reading</title><link>https://tkurtbond.github.io/posts/2003/11/22/2003-11-22-sbcl-author-of-the-century/</link><dc:creator>T. Kurt Bond</dc:creator><description>&lt;div&gt;&lt;div class="section" id="common-lisp-sbcl-and-clim"&gt;
&lt;h2&gt;Common Lisp, SBCL, and CLIM&lt;/h2&gt;
&lt;p&gt;I finally took the time to figure out how to install &lt;a class="reference external" href="http://clim.mikemac.com/"&gt;McCLIM&lt;/a&gt; under FreeBSD.  The first thing to do was
install &lt;a class="reference external" href="http://sbcl.sourceforge.net/"&gt;SBCL&lt;/a&gt; from scratch; the
FreeBSD port doesn't install all the SBCL extras, but they're needed
to build McCLIM, especially ASDF.  The other things I needed to do were
described in the &lt;code class="docutils literal"&gt;INSTALL.SBCL&lt;/code&gt; from the McCLIM release.  I had to
install &lt;a class="reference external" href="http://www.cliki.net/CLX"&gt;CLX&lt;/a&gt; for SBCL using ASDF.  This
proceeded with only one hitch: I needed a &lt;cite&gt;~/.sbcl/trusted-uids.lisp&lt;/cite&gt;
for some reason.  Once that was done it was easy to build McCLIM for
SBCL and run the demo applications.  Now that I know how to build
McCLIM I'll be able to investigate CLIM.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="recent-reading"&gt;
&lt;h2&gt;Recent Reading&lt;/h2&gt;
&lt;ul class="simple" id="author-of-the-century"&gt;
&lt;li&gt;&lt;p&gt;&lt;cite&gt;J.R.R. Tolkien: Author of the Century&lt;/cite&gt;, by Tom Shippey.  I think I
must have read &lt;cite&gt;The Hobbit&lt;/cite&gt; and &lt;cite&gt;The Lord of the Rings&lt;/cite&gt; for the first
time in 1977, when I was still quite young, and like many was
captivated immediately.  I read it again many times and enjoyed it just
as much each time.  It's one of those books that I return to and re-
read every few years.  I would not, however, have thought of Tolkien as
the “Author of the Century”, but in this book and &lt;cite&gt;The Road to
Middle-Earth&lt;/cite&gt; Shippey makes a very persuasive argument for just that,
pointing out that Tolkien may well have been the person with the
&lt;em&gt;deepest&lt;/em&gt; understanding of the English &lt;em&gt;language&lt;/em&gt; in this century, and
showing how his professional background as a philologist and language
scholar formed his fiction.  In any case, both books made me appreciate
much better the subtlety and depth of Tolkien's fiction and has the
best possible outcome for literary analysis: it made me want to read
the books again, as well as look further into the books edited by
J.R.R Tolkien's son, Christopher Tolkien.  I've read the &lt;cite&gt;The
Silmarillion&lt;/cite&gt; and &lt;cite&gt;Unfinished Tales of Númenor and Middle Earth&lt;/cite&gt;, but
I've not read any of the twelve volume of &lt;cite&gt;The History of Middle
Earth&lt;/cite&gt;, and I think after this it would be interesting to do so.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>clim</category><category>common lisp</category><category>old blog</category><category>recent reading</category><category>sbcl</category><guid>https://tkurtbond.github.io/posts/2003/11/22/2003-11-22-sbcl-author-of-the-century/</guid><pubDate>Sat, 22 Nov 2003 05:00:00 GMT</pubDate></item></channel></rss>