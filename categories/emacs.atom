<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet href="https://tkurtbond.github.io/assets/xml/atom.xsl" type="text/xsl media="all"?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom">
  <title>Lacking Natural Simplicity (Posts about emacs)</title>
  <id>https://tkurtbond.github.io/categories/emacs.atom</id>
  <updated>2021-07-10T07:47:23Z</updated>
  <author>
    <name>T. Kurt Bond</name>
  </author>
  <link rel="self" type="application/atom+xml" href="https://tkurtbond.github.io/categories/emacs.atom"/>
  <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/categories/emacs/"/>
  <generator uri="https://getnikola.com/">Nikola</generator>
  <entry>
    <title>Having Emacs time-stamps at the end of files</title>
    <id>https://tkurtbond.github.io/posts/2020/08/05/having-emacs-time-stamps-at-the-end-of-files/</id>
    <updated>2020-08-05T16:34:22-04:00</updated>
    <published>2020-08-05T16:34:22-04:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2020/08/05/having-emacs-time-stamps-at-the-end-of-files/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Do you ever use &lt;span class="app"&gt;Emacs&lt;/span&gt; time stamp functionality (type &lt;span class="key"&gt;C-h
f time-stamp&lt;/span&gt; in &lt;span class="app"&gt;Emacs&lt;/span&gt; to learn about that) to insert the
current date time stamp into your file when you save it?  I use this
frequently in documents I write, for my blog or standalone.  For the
longest time I thought you had to have the time stamp at the beginning
of the file.  But I wanted it at the end of blog posts because it’s
really an afterthought to most readers.  (Sometimes I go back and edit
posts some time after first posting them — perhaps they were
incomplete, or they had errors that needed correcting, etc.)  It turns
out that you can do that — if you set the variable
&lt;code&gt;time-stamp-line-limit&lt;/code&gt; to a negative number it will look
backwards from the end of the file for the timestamp.  I often set the
time stamp variables in a &lt;code class="docutils literal"&gt;Local Variables:&lt;/code&gt; comment at the end of
the file.&lt;/p&gt;
&lt;p&gt;Here's the &lt;a class="reference external" href="https://docutils.sourceforge.io/rst.html"&gt;reST&lt;/a&gt; fragment I insert into my blog posts that uses
&lt;code&gt;time-stamp&lt;/code&gt;:&lt;/p&gt;
&lt;pre class="code ReST"&gt;&lt;a id="rest_code_cbc89ab467094a2e80893523f0634f7c-1" name="rest_code_cbc89ab467094a2e80893523f0634f7c-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;role&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; app
&lt;a id="rest_code_cbc89ab467094a2e80893523f0634f7c-2" name="rest_code_cbc89ab467094a2e80893523f0634f7c-2"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;role&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; file
&lt;a id="rest_code_cbc89ab467094a2e80893523f0634f7c-3" name="rest_code_cbc89ab467094a2e80893523f0634f7c-3"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;role&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; command
&lt;a id="rest_code_cbc89ab467094a2e80893523f0634f7c-4" name="rest_code_cbc89ab467094a2e80893523f0634f7c-4"&gt;&lt;/a&gt;&lt;span class="p"&gt;..&lt;/span&gt; &lt;span class="ow"&gt;role&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt; key
&lt;a id="rest_code_cbc89ab467094a2e80893523f0634f7c-5" name="rest_code_cbc89ab467094a2e80893523f0634f7c-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_cbc89ab467094a2e80893523f0634f7c-6" name="rest_code_cbc89ab467094a2e80893523f0634f7c-6"&gt;&lt;/a&gt;&lt;span class="cp"&gt;.. *Last edited: 2020-08-05 17:03:37 EDT*&lt;/span&gt;
&lt;a id="rest_code_cbc89ab467094a2e80893523f0634f7c-7" name="rest_code_cbc89ab467094a2e80893523f0634f7c-7"&gt;&lt;/a&gt;
&lt;a id="rest_code_cbc89ab467094a2e80893523f0634f7c-8" name="rest_code_cbc89ab467094a2e80893523f0634f7c-8"&gt;&lt;/a&gt;&lt;span class="cp"&gt;..&lt;/span&gt;
&lt;a id="rest_code_cbc89ab467094a2e80893523f0634f7c-9" name="rest_code_cbc89ab467094a2e80893523f0634f7c-9"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   Local Variables:&lt;/span&gt;
&lt;a id="rest_code_cbc89ab467094a2e80893523f0634f7c-10" name="rest_code_cbc89ab467094a2e80893523f0634f7c-10"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   time-stamp-format: "%04y-%02m-%02d %02H:%02M:%02S %Z"&lt;/span&gt;
&lt;a id="rest_code_cbc89ab467094a2e80893523f0634f7c-11" name="rest_code_cbc89ab467094a2e80893523f0634f7c-11"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   time-stamp-start: "Last edited:[ \t]+\\\\?"&lt;/span&gt;
&lt;a id="rest_code_cbc89ab467094a2e80893523f0634f7c-12" name="rest_code_cbc89ab467094a2e80893523f0634f7c-12"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   time-stamp-end: "\\*\\\\?\n"&lt;/span&gt;
&lt;a id="rest_code_cbc89ab467094a2e80893523f0634f7c-13" name="rest_code_cbc89ab467094a2e80893523f0634f7c-13"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   time-stamp-line-limit: -20&lt;/span&gt;
&lt;a id="rest_code_cbc89ab467094a2e80893523f0634f7c-14" name="rest_code_cbc89ab467094a2e80893523f0634f7c-14"&gt;&lt;/a&gt;&lt;span class="cp"&gt;   End:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="time-stamp" label="time-stamp"/>
  </entry>
  <entry>
    <title>Arrow Macros in Emacs Lisp</title>
    <id>https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/</id>
    <updated>2020-07-03T14:11:16-04:00</updated>
    <published>2020-07-03T14:11:16-04:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2020/07/03/arrow-macros-in-emacs-lisp/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Are you familiar with arrow macros?  (They have nothing to do with
&lt;a class="reference external" href="https://en.wikibooks.org/wiki/Haskell/Understanding_arrows"&gt;arrows in Haskell&lt;/a&gt;.) They started out in &lt;a class="reference external" href="https://clojure.org/"&gt;Clojure&lt;/a&gt;, I think, and have
been ported to &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_Lisp"&gt;Common Lisp&lt;/a&gt; and probably other Lisps, though I didn't
find one for &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt;.  I think the &lt;a class="reference external" href="https://github.com/Harleqin/arrows"&gt;arrows&lt;/a&gt; package is the most up
to date in &lt;a class="reference external" href="https://www.quicklisp.org/"&gt;Quicklisp&lt;/a&gt; for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Common_Lisp"&gt;Common Lisp&lt;/a&gt;, but I found the &lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;
package first so that's the one I converted to &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; today.&lt;/p&gt;
&lt;p&gt;There were two slightly tricky parts to the port&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;I needed to use lexical binding for the source file&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;'s test suite used fractions, but &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; doesn't
have them.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyway, I think they're very useful.  If you have a value and
you want it to be processed by several functions in a chain you
can use an arrow macro instead of using lots of nested function
calls. For instance,&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_80b3ae6d464b4efcb1bd0224e46a81d2-1" name="rest_code_80b3ae6d464b4efcb1bd0224e46a81d2-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.+"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.-"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-\\."&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;is annoying and hard to read on one line.  If you split it into multiple lines&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-1" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-2" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-2"&gt;&lt;/a&gt; &lt;span class="s"&gt;"-+$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-3" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-3"&gt;&lt;/a&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-4" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-4"&gt;&lt;/a&gt;  &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-5" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-5"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-6" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-6"&gt;&lt;/a&gt;   &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-7" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-7"&gt;&lt;/a&gt;   &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-8" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-8"&gt;&lt;/a&gt;    &lt;span class="s"&gt;"\\.+"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-9" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-9"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-10" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-10"&gt;&lt;/a&gt;     &lt;span class="s"&gt;"\\.-"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-11" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-11"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-12" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-12"&gt;&lt;/a&gt;      &lt;span class="s"&gt;"-\\."&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-13" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-13"&gt;&lt;/a&gt;      &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-14" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-14"&gt;&lt;/a&gt;       &lt;span class="s"&gt;"-+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;
&lt;a id="rest_code_50f79afa0aac4595b9f7800ed5e75767-15" name="rest_code_50f79afa0aac4595b9f7800ed5e75767-15"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;))))))))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;that's also pretty horrible.  To read it you have to skip to the end,
figure out that function call, then skip back to the next function
call, and so forth, until you get back to the last function call,
reading it from inside out.  It looks much better if you use the
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;/code&gt; arrow macro, which substitutes the value you are passing along
as the last argument to the functions you are calling:&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_a109377f06fa43009a539c6a20491bab-1" name="rest_code_a109377f06fa43009a539c6a20491bab-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;
&lt;a id="rest_code_a109377f06fa43009a539c6a20491bab-2" name="rest_code_a109377f06fa43009a539c6a20491bab-2"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a109377f06fa43009a539c6a20491bab-3" name="rest_code_a109377f06fa43009a539c6a20491bab-3"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a109377f06fa43009a539c6a20491bab-4" name="rest_code_a109377f06fa43009a539c6a20491bab-4"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-\\."&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a109377f06fa43009a539c6a20491bab-5" name="rest_code_a109377f06fa43009a539c6a20491bab-5"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.-"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a109377f06fa43009a539c6a20491bab-6" name="rest_code_a109377f06fa43009a539c6a20491bab-6"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.+"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a109377f06fa43009a539c6a20491bab-7" name="rest_code_a109377f06fa43009a539c6a20491bab-7"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_a109377f06fa43009a539c6a20491bab-8" name="rest_code_a109377f06fa43009a539c6a20491bab-8"&gt;&lt;/a&gt;     &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;I also think it is more understandable than the highly nested calls,
since you can follow along in from start to finish, rather than from
inside out: you've got the value, you pass it to the first function,
then to the second, and so forth.&lt;/p&gt;
&lt;p&gt;There are also macros to insert the value at the front of the argument
list (&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;gt;&lt;/span&gt;&lt;/code&gt;) and to insert the value where a &lt;code class="docutils literal"&gt;&amp;lt;&amp;gt;&lt;/code&gt; symbol is found
(&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;-&amp;lt;&amp;gt;&lt;/span&gt;&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;I wrote some &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs Lisp&lt;/a&gt; code with the last expression above today, and
I think it makes a good example of why they are useful.&lt;/p&gt;
&lt;p&gt;Here's the use case that inspired me to port them to &lt;a class="reference external" href="https://www.gnu.org/software/emacs/manual/html_node/elisp/"&gt;Emacs
Lisp&lt;/a&gt;.  When I save things from the internet I often want to
create a directory to save them in based on the filename or
some text on a web page or something, but usually there are
spaces or special characters in that text, so I have to
sanitize the text to make it a safe and simple filename.  So I
need to replace all special characters with dashes.  But I
don't want dashes repeated multiple times, just a single dash,
and I don't want dashes followed or preceded by periods, only
the period.&lt;/p&gt;
&lt;p&gt;Here' s some code to do that:&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-1" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;tkb-sanitize-for-filename&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-2" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-2"&gt;&lt;/a&gt;  &lt;span class="s"&gt;"Clean up characters in STRING that aren't good for&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-3" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-3"&gt;&lt;/a&gt;&lt;span class="s"&gt;filenames."&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-4" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-4"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;-&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-5" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-5"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"[^-.a-z0-9]+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-6" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-6"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+"&lt;/span&gt; &lt;span class="s"&gt;"-"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-7" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-7"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-\\."&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-8" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-8"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.-"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-9" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-9"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"\\.+"&lt;/span&gt; &lt;span class="s"&gt;"."&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-10" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-10"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"^-+"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-11" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-11"&gt;&lt;/a&gt;       &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;replace-regexp-in-string&lt;/span&gt; &lt;span class="s"&gt;"-+$"&lt;/span&gt; &lt;span class="s"&gt;""&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-12" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-12"&gt;&lt;/a&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-13" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-13"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;defun&lt;/span&gt; &lt;span class="nv"&gt;tkb-sanitize-kill-for-filename&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-14" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-14"&gt;&lt;/a&gt;  &lt;span class="s"&gt;"Clean up characters that aren't good for filenames in the&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-15" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-15"&gt;&lt;/a&gt;&lt;span class="s"&gt;top of the kill&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-16" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-16"&gt;&lt;/a&gt;&lt;span class="s"&gt;ring and put the result on the top of the kill ring."&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-17" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-17"&gt;&lt;/a&gt;  &lt;span class="c1"&gt;;; gets the kill or the system clipboard if it is new.&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-18" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-18"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;interactive&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;list&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;current-kill&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-19" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-19"&gt;&lt;/a&gt;  &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;let&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nv"&gt;new-string&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;tkb-sanitize-for-filename&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-20" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-20"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;message&lt;/span&gt; &lt;span class="s"&gt;"Old string: %s\nNew String: %s"&lt;/span&gt; &lt;span class="nf"&gt;string&lt;/span&gt; &lt;span class="nv"&gt;new-string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-21" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-21"&gt;&lt;/a&gt;    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kill-new&lt;/span&gt; &lt;span class="nv"&gt;new-string&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-22" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-22"&gt;&lt;/a&gt;
&lt;a id="rest_code_b032f630af5245b5a8de159cf8c7ebbe-23" name="rest_code_b032f630af5245b5a8de159cf8c7ebbe-23"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;"C-c k S"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="ss"&gt;'tkb-sanitize-kill-for-filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Note that the function &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;tkb-sanitize-kill-for-filename&lt;/span&gt;&lt;/code&gt; that I use
interactively gets uses &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;(current-kill&lt;/span&gt; 0 t)&lt;/code&gt; because it either
returns the top of the kill ring, or if the system clipboard is newer
it puts that on top of the kill ring and returns it.  (The docstring
of &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;current-kill&lt;/span&gt;&lt;/code&gt; makes that a little difficult to figure out.)&lt;/p&gt;
&lt;p&gt;So if I have the name of a product as
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;"***Flashy####Product%%%%Name!!!!"&lt;/span&gt;&lt;/code&gt; I copy that to the clipboard
with &lt;code class="key docutils literal"&gt;&lt;span class="pre"&gt;⌘-C&lt;/span&gt;&lt;/code&gt;, switch to emacs, do &lt;code class="key docutils literal"&gt;&lt;span class="pre"&gt;C-c&lt;/span&gt; k S&lt;/code&gt;, switch back to
whatever program is saving the file, and use the generated,
sanitized name &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;Flashy-Product-Name&lt;/span&gt;&lt;/code&gt; with &lt;code class="key docutils literal"&gt;&lt;span class="pre"&gt;⌘-V&lt;/span&gt;&lt;/code&gt;.  Nifty!&lt;/p&gt;
&lt;p&gt;(And if you've ever wondered what the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Unicode"&gt;Unicode&lt;/a&gt; character for the Mac
keyboard &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Command_key"&gt;Command key&lt;/a&gt; (⌘) is, it is the PLACE OF INTEREST SIGN, and you
can enter it by C-x 8 RETURN PLACE OF INTEREST SIGN.  The symbol they
use for for the key labeled alt and &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Option_key"&gt;option&lt;/a&gt; (⌥) is the Unicode OPTION
KEY, and the symbol they use for the &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Shift_key"&gt;Shift Key&lt;/a&gt; (⇧) is UPWARDS WHITE ARROW.
I'm surprised they don't have a special symbol for &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Control_key"&gt;Control&lt;/a&gt;, but it
looks like they just use the plain ASCII ^, known in Unicode as
CIRCUMFLEX ACCENT.)&lt;/p&gt;
&lt;p&gt;Anyway, &lt;a class="reference external" href="https://tkurtbond.github.io/arrows-for-emacs.zip"&gt;here&lt;/a&gt;'s a &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Info-ZIP"&gt;ZIP&lt;/a&gt; file with the Emacs Lisp source for the arrow
macros so you can use them if you've been convinced of their
usefulness by this post.  It also has some minimal documentation in
the &lt;span class="file"&gt;README.md&lt;/span&gt; that came from the &lt;span class="file"&gt;README.md&lt;/span&gt; from
&lt;a class="reference external" href="https://github.com/nightfly19/cl-arrows"&gt;cl-arrows&lt;/a&gt;, which seems to repeat the information from the
docstrings for the macros.&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="arrow-macros" label="arrow macros"/>
    <category term="clojure" label="clojure"/>
    <category term="common-lisp" label="common lisp"/>
    <category term="emacs" label="emacs"/>
    <category term="emacs-lisp" label="emacs lisp"/>
    <category term="unicode" label="unicode"/>
  </entry>
  <entry>
    <title>Getting nxml-mode in emacs to validate DocBook 5 documents</title>
    <id>https://tkurtbond.github.io/posts/2019/11/05/getting-nxml-mode-in-emacs-to-validate-docbook-5-documents/</id>
    <updated>2019-11-05T20:32:24-05:00</updated>
    <published>2019-11-05T20:32:24-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2019/11/05/getting-nxml-mode-in-emacs-to-validate-docbook-5-documents/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;I have occasion to edit and build a DocBook 5 document under both
macOS Catalina and Fedora 30.&lt;/p&gt;
&lt;p&gt;On macOS I've used homebrew to install the docbook, docbook-xsl, and
libxslt (for xsltproc), and fop formulas, and changed my PATH to
include the directory where brew installed &lt;code class="docutils literal"&gt;xsltproc&lt;/code&gt;. which will then
use &lt;code class="docutils literal"&gt;/usr/local/etc/xml/catalog&lt;/code&gt; to find files, in which brew installed
links to the docbook schemas and xsl stylesheets.&lt;/p&gt;
&lt;p&gt;On Fedora I've used &lt;code class="docutils literal"&gt;dnf&lt;/code&gt; to install the docbook5-schemas,
docbook5-style-xsl, and fop packages.&lt;/p&gt;
&lt;p&gt;The document builds fine on both OSes, but Emacs doesn't validate
properly against the DocBook RELAX NG schemas, because the &lt;code class="docutils literal"&gt;*.rnc&lt;/code&gt; files
supplied with Emacs (26.3 on macOS, 26.2 on Fedora) are for DocBook 4.
However, Emacs will look at a &lt;code class="docutils literal"&gt;schemas.xml&lt;/code&gt; file in the same directory
as the file you are editing to find the &lt;code class="docutils literal"&gt;*.rnc&lt;/code&gt; files.  Unfortunately,
of course, they have different locations on macOS with brew and on
Fedora.&lt;/p&gt;
&lt;p&gt;So I wrote a script, generate-schemas-xml, in bash using xmlcatalog to
look up the translation for the URI for the RELAX NG compiled schema
file and generate the &lt;code class="docutils literal"&gt;schemas.xml&lt;/code&gt; file and substitute the translation
into the file:&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://tkurtbond.github.io/listings/generate-schemas-xml.html"&gt;generate-schemas-xml&lt;/a&gt;  &lt;a class="reference external" href="https://tkurtbond.github.io/listings/generate-schemas-xml"&gt;(Source)&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_6f4da7884bdb4194a5e0ef83e6ffaf31-1" name="rest_code_6f4da7884bdb4194a5e0ef83e6ffaf31-1"&gt;&lt;/a&gt;&lt;span class="ch"&gt;#! /usr/bin/env bash&lt;/span&gt;
&lt;a id="rest_code_6f4da7884bdb4194a5e0ef83e6ffaf31-2" name="rest_code_6f4da7884bdb4194a5e0ef83e6ffaf31-2"&gt;&lt;/a&gt;
&lt;a id="rest_code_6f4da7884bdb4194a5e0ef83e6ffaf31-3" name="rest_code_6f4da7884bdb4194a5e0ef83e6ffaf31-3"&gt;&lt;/a&gt;&lt;span class="nv"&gt;schema_location&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;xmlcatalog &lt;span class="s2"&gt;""&lt;/span&gt; &lt;span class="s2"&gt;"http://docbook.org/xml/5.0/rng/docbookxi.rnc"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;
&lt;a id="rest_code_6f4da7884bdb4194a5e0ef83e6ffaf31-4" name="rest_code_6f4da7884bdb4194a5e0ef83e6ffaf31-4"&gt;&lt;/a&gt;    grep &lt;span class="s2"&gt;"^file:///"&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;'s#^file://##'&lt;/span&gt;&lt;span class="k"&gt;)&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;a id="rest_code_6f4da7884bdb4194a5e0ef83e6ffaf31-5" name="rest_code_6f4da7884bdb4194a5e0ef83e6ffaf31-5"&gt;&lt;/a&gt;
&lt;a id="rest_code_6f4da7884bdb4194a5e0ef83e6ffaf31-6" name="rest_code_6f4da7884bdb4194a5e0ef83e6ffaf31-6"&gt;&lt;/a&gt;cat &amp;gt;schemas.xml &lt;span class="s"&gt;&amp;lt;&amp;lt;EOF&lt;/span&gt;
&lt;a id="rest_code_6f4da7884bdb4194a5e0ef83e6ffaf31-7" name="rest_code_6f4da7884bdb4194a5e0ef83e6ffaf31-7"&gt;&lt;/a&gt;&lt;span class="s"&gt;&amp;lt;locatingRules xmlns="http://thaiopensource.com/ns/locating-rules/1.0"&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_6f4da7884bdb4194a5e0ef83e6ffaf31-8" name="rest_code_6f4da7884bdb4194a5e0ef83e6ffaf31-8"&gt;&lt;/a&gt;&lt;span class="s"&gt;&amp;lt;namespace ns="http://docbook.org/ns/docbook" uri="$schema_location"/&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_6f4da7884bdb4194a5e0ef83e6ffaf31-9" name="rest_code_6f4da7884bdb4194a5e0ef83e6ffaf31-9"&gt;&lt;/a&gt;&lt;span class="s"&gt;&amp;lt;/locatingRules&amp;gt;&lt;/span&gt;
&lt;a id="rest_code_6f4da7884bdb4194a5e0ef83e6ffaf31-10" name="rest_code_6f4da7884bdb4194a5e0ef83e6ffaf31-10"&gt;&lt;/a&gt;&lt;span class="s"&gt;EOF&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;Then I had my Makefile generate the &lt;code class="docutils literal"&gt;schemas.xml&lt;/code&gt; file if it was missing.&lt;/p&gt;
&lt;p&gt;It was more complicated that I'd have liked, but it does work.&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="docbook-5" label="docbook 5"/>
    <category term="emacs" label="emacs"/>
    <category term="fedora" label="fedora"/>
    <category term="macos" label="macos"/>
  </entry>
  <entry>
    <title>Defining keys in the C-x 8 prefix keymap</title>
    <id>https://tkurtbond.github.io/posts/2012/10/03/defining-keys-in-the-c-x-8-prefix-keymap/</id>
    <updated>2012-10-03T23:54:40-05:00</updated>
    <published>2012-10-03T23:54:40-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2012/10/03/defining-keys-in-the-c-x-8-prefix-keymap/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Yay!  I finally found it!&lt;/p&gt;
&lt;p&gt;Suppose you hate typing “C-x 8 RET GREEK SMALL LETTER LAMBDA” to
insert a lowercase lambda character in emacs (perhaps because you have
a dull American keyboard and aren't very savvy to input methods).  You
can add a key definition to the “C-x 8 prefix keymap”, say “gl”, so
you can type “C-x 8 g l” and insert a lowercase lambda.&lt;/p&gt;
&lt;p&gt;Here's how you might do it for “λ”, “Λ”, and “§”:&lt;/p&gt;
&lt;pre class="literal-block"&gt;(load-library "iso-transl.el")
(iso-transl-define-keys '(("gl" . [?λ])   ; greek lowercase lambda
                          ("gL" . [?Λ])   ; greek uppercase lambda
                          ("ps" . [?§]))) ; punctuation SECTION SIGN&lt;/pre&gt;&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="emacs-lisp" label="emacs lisp"/>
    <category term="key-translation" label="key translation"/>
    <category term="unicode" label="unicode"/>
  </entry>
  <entry>
    <title>Multics Emacs programmed by secretaries</title>
    <id>https://tkurtbond.github.io/posts/2012/06/15/multics-emacs-programmed-by-secretaries/</id>
    <updated>2012-06-15T09:10:09-05:00</updated>
    <published>2012-06-15T09:10:09-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2012/06/15/multics-emacs-programmed-by-secretaries/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;RMS &lt;a class="reference external" href="http://www.gnu.org/gnu/rms-lisp.html"&gt;relates&lt;/a&gt; how programming Multics Emacs was so convenient that secretaries started to learn to use it:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;… The language that you build your extensions on shouldn't be
thought of as a programming language in afterthought; it should be
designed as a programming language. In fact, we discovered that
the best programming language for that purpose was Lisp.&lt;/p&gt;
&lt;p&gt;It was Bernie Greenberg, who discovered that it was (5). He wrote
a version of Emacs in Multics MacLisp, and he wrote his commands
in MacLisp in a straightforward fashion. The editor itself was
written entirely in Lisp. Multics Emacs proved to be a great
success — programming new editing commands was so convenient that
even the secretaries in his office started learning how to use
it. They used a manual someone had written which showed how to
extend Emacs, but didn't say it was a programming. So the
secretaries, who believed they couldn't do programming, weren't
scared off. They read the manual, discovered they could do useful
things and they learned to program.&lt;/p&gt;
&lt;p&gt;So Bernie saw that an application — a program that does something
useful for you — which has Lisp inside it and which you could
extend by rewriting the Lisp programs, is actually a very good way
for people to learn programming. It gives them a chance to write
small programs that are useful for them, which in most arenas you
can't possibly do. They can get encouragement for their own
practical use — at the stage where it's the hardest — where they
don't believe they can program, until they get to the point where
they are programmers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;!-- Wasn't troff also used by secretaries? --&gt;&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="lisp" label="lisp"/>
    <category term="programming" label="programming"/>
  </entry>
  <entry>
    <title>Emacs 23.1 and Wanderlust</title>
    <id>https://tkurtbond.github.io/posts/2009/09/25/emacs-23.1-and-wanderlust/</id>
    <updated>2009-09-25T14:34:41-05:00</updated>
    <published>2009-09-25T14:34:41-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2009/09/25/emacs-23.1-and-wanderlust/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;To get UTF-8 to work when sending drafted messages  in &lt;a class="reference external" href="http://www.gohome.org/wl/"&gt;Wanderlust&lt;/a&gt; with
Emacs 23.1 I had to apply this &lt;a class="reference external" href="http://article.gmane.org/gmane.mail.wanderlust.general.japanese/5978"&gt;patch&lt;/a&gt; to FLIM.&lt;/p&gt;
&lt;p&gt;I also checked out the wl-2_15_6-vtl branch in the wanderlust
repository and the semi-1_14-vtl branch in the semi repository.
(See &lt;a class="reference external" href="https://tkurtbond.github.io/posts/2009/09/02/wanderlust-apel-semi-and-flim-development/"&gt;repos&lt;/a&gt; for info about the repositories.)&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="wanderlust" label="wanderlust"/>
  </entry>
  <entry>
    <title>Case-insenstive filename completion with bash and emacs</title>
    <id>https://tkurtbond.github.io/posts/2009/04/24/case-insenstive-filename-completion-with-bash-and-emacs/</id>
    <updated>2009-04-24T13:59:07-05:00</updated>
    <published>2009-04-24T13:59:07-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2009/04/24/case-insenstive-filename-completion-with-bash-and-emacs/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;It's strange, I know, that while I like case sensitive filenames, I
don't actually want to be bothered matching the case exactly when I'm
using tab completion.  Fortunately, &lt;span class="program"&gt;emacs&lt;/span&gt; and
&lt;span class="program"&gt;bash&lt;/span&gt; both accommodate my whims.  For bash, add&lt;/p&gt;
&lt;pre class="code bash"&gt;&lt;a id="rest_code_87ffadd852ce4c3585419f7c3d449066-1" name="rest_code_87ffadd852ce4c3585419f7c3d449066-1"&gt;&lt;/a&gt;&lt;span class="nb"&gt;set&lt;/span&gt; completion-ignore-case on
&lt;/pre&gt;&lt;p&gt;to your &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;~/.inputrc&lt;/span&gt;&lt;/code&gt; file.  For emacs, add&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_17a79ac6ac6a43dba171dda52ba86bd3-1" name="rest_code_17a79ac6ac6a43dba171dda52ba86bd3-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;read-file-name-completion-ignore-case&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;to your emacs initialization files.  Of course, if want to get rid of
all completion case sensitivity, you need&lt;/p&gt;
&lt;pre class="code emacs-lisp"&gt;&lt;a id="rest_code_bef8d88cb34c4980a91fefed95830bb9-1" name="rest_code_bef8d88cb34c4980a91fefed95830bb9-1"&gt;&lt;/a&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;setq&lt;/span&gt; &lt;span class="nv"&gt;completion-ignore-case&lt;/span&gt; &lt;span class="no"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;too.&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="bash" label="bash"/>
    <category term="computer" label="computer"/>
    <category term="emacs" label="emacs"/>
  </entry>
  <entry>
    <title>Emacs and Cygwin python</title>
    <id>https://tkurtbond.github.io/posts/2008/12/15/emacs-and-cygwin-python/</id>
    <updated>2008-12-15T17:07:43-05:00</updated>
    <published>2008-12-15T17:07:43-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2008/12/15/emacs-and-cygwin-python/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;If you happen to be using &lt;a class="reference external" href="http://www.gnu.org/software/emacs/windows/ntemacs.html"&gt;Windows Emacs&lt;/a&gt; and &lt;a class="reference external" href="http://www.cygwin.com/"&gt;Cygwin&lt;/a&gt; &lt;a class="reference external" href="http://www.python.org/"&gt;Python&lt;/a&gt; there's
an annoying interaction where “M-x run-python” hangs.  The easiest way
to fix it is to mount the directory where you have your emacs
installation into the Cygwin file name structure.  For instance, I
have my emacs installation in &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;C:\emacs\emacs-22.2&lt;/span&gt;&lt;/code&gt;, and in a
cygwin shell I did &lt;code class="docutils literal"&gt;mount &lt;span class="pre"&gt;-b&lt;/span&gt; &lt;span class="pre"&gt;‘C:\emacs'&lt;/span&gt; /emacs&lt;/code&gt;, and now running the
Cygwin python works.&lt;/p&gt;
&lt;p&gt;The emacs function &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;run-python&lt;/span&gt;&lt;/code&gt; adds the emacs &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;data-directory&lt;/span&gt;&lt;/code&gt; to
the &lt;code class="docutils literal"&gt;PYTHONPATH&lt;/code&gt; in the emacs &lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;process-environment&lt;/span&gt;&lt;/code&gt; before running
python; unfortunately, since this is the MS Windows emacs, its
&lt;code class="docutils literal"&gt;&lt;span class="pre"&gt;data-directory&lt;/span&gt;&lt;/code&gt; starts with a drive letter and a colon.  When the
Cygwin python initializes &lt;code class="docutils literal"&gt;sys.path&lt;/code&gt; it splits &lt;code class="docutils literal"&gt;PYTHONPATH&lt;/code&gt; at the
colons, which means &lt;code class="docutils literal"&gt;sys.path&lt;/code&gt; ends up with the drive letter as one
component (usually interpreted as a relative path) and everything
after the colon as another component.  It that's a valid Cygwin
pathname for the Emacs data directory (which is what the above mount
command did), things work (accidentally).&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="emacs" label="emacs"/>
    <category term="python" label="python"/>
  </entry>
  <entry>
    <title>Mousing in Emacs under Screen</title>
    <id>https://tkurtbond.github.io/posts/2008/12/11/mousing-in-emacs-under-screen/</id>
    <updated>2008-12-11T12:46:02-05:00</updated>
    <published>2008-12-11T12:46:02-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2008/12/11/mousing-in-emacs-under-screen/"/>
    <summary type="html">&lt;p&gt;It &lt;a class="reference external" href="http://savannah.gnu.org/bugs/?14930"&gt;turns out&lt;/a&gt; that if you execute the command &lt;cite&gt;xterm-mouse-mode&lt;/cite&gt; (or
evaluate &lt;cite&gt;(xterm-mouse-mode 1)&lt;/cite&gt; in your initialization file) when
running &lt;a class="reference external" href="http://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; under &lt;a class="reference external" href="http://www.gnu.org/software/screen/"&gt;Screen&lt;/a&gt; it allows “non-modified single clicks” to
work.  Normal mouse functionality is still available by holding the
Shift key while clicking.  I use the &lt;a class="reference external" href="http://www.chiark.greenend.org.uk/~sgtatham/putty/"&gt;PuTTY&lt;/a&gt; ssh client for remote
access to various servers, and this works well Emacs in Screen under
PuTTY, too.&lt;/p&gt;</summary>
    <category term="computer" label="computer"/>
    <category term="emacs" label="emacs"/>
    <category term="screen" label="screen"/>
    <category term="tools" label="tools"/>
  </entry>
  <entry>
    <title>E-mail Crisis, Part 4</title>
    <id>https://tkurtbond.github.io/posts/2008/09/10/e-mail-crisis-part-4/</id>
    <updated>2008-09-10T01:05:39-05:00</updated>
    <published>2008-09-10T01:05:39-05:00</published>
    <author>
      <name>T. Kurt Bond</name>
    </author>
    <link rel="alternate" type="text/html" href="https://tkurtbond.github.io/posts/2008/09/10/e-mail-crisis-part-4/"/>
    <summary type="html">&lt;div&gt;&lt;p&gt;Well, it looks like a leader is slowly emerging in my quest for an
Emacs based mail reader: &lt;a class="reference external" href="http://www.gohome.org/wl/"&gt;Wanderlust&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;It handles MH- and Maildir-format mailboxes, UTF-8 in headers, has
good facilities for reading and composing MIME messages, and I finally
got it to work with Lotus Domino/Notes IMAP/SSL, amazingly.&lt;/p&gt;
&lt;p&gt;Moreover, it looks like I'm probably going to switch to using a
Maildir-format mailbox, which will work well with my use of &lt;a class="reference external" href="http://www.cis.upenn.edu/~bcpierce/unison/"&gt;Unison&lt;/a&gt;:
MH-format mailboxes' use of plain numbers for message IDs/filenames
(which can change a lot) makes things a little more confusing when
syncing mailboxes with Unison.&lt;/p&gt;
&lt;p&gt;Moving away from MH-format mailboxes is a bit of a shame, since it
means that I'll be losing the ability to use the MH command line
programs for accessing my e-mail.  I've used MH in the past, and have
always liked the command line access it gives you.  Ah well.  I wish
mdmh had advanced further.&lt;/p&gt;&lt;/div&gt;</summary>
    <category term="e-mail" label="e-mail"/>
    <category term="emacs" label="emacs"/>
  </entry>
</feed>
